0,import re import pdb def increase_by_one leftround start_index comma end_index comma count rightround colon for i in range leftround start_index comma end_index rightround colon count leftsquare i rightsquare plus equal 1 return count def count_lies leftround result rightround colon for key in result colon count equal result leftsquare key rightsquare if __name__ equal equal s minus quotation __main__ s minus quotation colon MAX_K equal 10 no_of_inputs equal int leftround raw_input leftround rightround rightround regex equal ur d minus quotation \A leftround leftangle pipe rightangle pipe equal rightround \s leftround \d asterisk rightround \s leftround No pipe Yes rightround \Z d minus quotation for i in range leftround 0 comma no_of_inputs rightround colon no_of_lies equal leftsquare 0 rightsquare asterisk no_of_inputs count equal leftsquare 0 rightsquare asterisk MAX_K no_of_guesses equal int leftround raw_input leftround rightround rightround guesses equal leftsquare 0 rightsquare asterisk no_of_guesses for j in range leftround 0 comma no_of_guesses rightround colon temp equal raw_input leftround rightround period split leftround s minus quotation s minus quotation rightround temp leftsquare 1 rightsquare equal int leftround temp leftsquare 1 rightsquare rightround if leftround temp leftsquare 0 rightsquare equal equal s minus quotation leftangle s minus quotation and temp leftsquare 2 rightsquare equal equal s minus quotation Yes s minus quotation rightround colon count equal increase_by_one leftround 0 comma temp leftsquare 1 rightsquare minus 1 comma count rightround elif leftround temp leftsquare 0 rightsquare equal equal s minus quotation rightangle s minus quotation and temp leftsquare 2 rightsquare equal equal s minus quotation No s minus quotation rightround colon count equal increase_by_one leftround 0 comma temp leftsquare 1 rightsquare comma count rightround elif leftround temp leftsquare 0 rightsquare equal equal s minus quotation leftangle s minus quotation and temp leftsquare 2 rightsquare equal equal s minus quotation No s minus quotation rightround colon count equal increase_by_one leftround temp leftsquare 1 rightsquare minus 1 comma MAX_K comma count rightround elif leftround temp leftsquare 0 rightsquare equal equal s minus quotation rightangle s minus quotation and temp leftsquare 2 rightsquare equal equal s minus quotation Yes s minus quotation rightround colon count equal increase_by_one leftround temp leftsquare 1 rightsquare comma MAX_K comma count rightround elif leftround temp leftsquare 0 rightsquare equal equal s minus quotation equal s minus quotation and temp leftsquare 2 rightsquare equal equal s minus quotation Yes s minus quotation rightround colon count equal increase_by_one leftround temp leftsquare 1 rightsquare minus 1 comma temp leftsquare 1 rightsquare comma count rightround else colon hash equal 6 No count equal increase_by_one leftround 0 comma temp leftsquare 1 rightsquare minus 1 comma count rightround count equal increase_by_one leftround temp leftsquare 1 rightsquare comma MAX_K comma count rightround print count no_of_lies leftsquare i rightsquare equal no_of_guesses minus max leftround count rightround hash print result out print s minus quotation \n s minus quotation period join leftround str leftround p rightround for p in no_of_lies rightround
0,import sys t equal int leftround raw_input leftround rightround rightround i equal 0 while i leftangle t colon n comma k equal map leftround int comma sys period stdin period readline leftround rightround period split leftround rightround rightround mod equal 10 asterisk asterisk 18 while leftround pow leftround n comma n comma mod rightround exclamation equal pow leftround n comma n comma mod slash 10 rightround rightround colon mod equal mod slash 10 hash print mod asterisk 10 print str leftround pow leftround n comma n comma mod rightround rightround leftsquare colon k rightsquare comma str leftround pow leftround n comma n comma mod rightround rightround leftsquare minus k colon rightsquare i plus equal 1
0,hash exclamation slash usr slash bin slash python hash first take the first point hash do while there are still nodes left hash create a square hash find which lines intersect with the square hash if there is a next point hash xor this value with the co minus ordinates of next point and continue hash else hash output this value line equal raw_input leftround rightround t equal line period split leftround rightround num_street equal int leftround t leftsquare 0 rightsquare rightround num_pizza equal int leftround t leftsquare 1 rightsquare rightround x0 equal leftsquare rightsquare x1 equal leftsquare rightsquare x2 equal leftsquare rightsquare y0 equal leftsquare rightsquare y1 equal leftsquare rightsquare y2 equal leftsquare rightsquare side equal leftsquare rightsquare for i in range leftround num_street rightround colon line equal raw_input leftround rightround t equal line period split leftround rightround x1 plus equal leftsquare int leftround t leftsquare 0 rightsquare rightround rightsquare y1 plus equal leftsquare int leftround t leftsquare 1 rightsquare rightround rightsquare x2 plus equal leftsquare int leftround t leftsquare 2 rightsquare rightround rightsquare y2 plus equal leftsquare int leftround t leftsquare 3 rightsquare rightround rightsquare for i in range leftround num_pizza rightround colon line equal raw_input leftround rightround t equal line period split leftround rightround x0 plus equal leftsquare int leftround t leftsquare 0 rightsquare rightround rightsquare y0 plus equal leftsquare int leftround t leftsquare 1 rightsquare rightround rightsquare side plus equal leftsquare int leftround t leftsquare 2 rightsquare rightround rightsquare result equal 0 for i in range leftround num_pizza rightround colon x0 leftsquare i rightsquare hat equal result y0 leftsquare i rightsquare hat equal result result equal 0 for j in range leftround num_street rightround colon if leftround leftround x1 leftsquare j rightsquare leftangle x0 leftsquare i rightsquare minus side leftsquare i rightsquare rightround and leftround x2 leftsquare j rightsquare leftangle x0 leftsquare i rightsquare minus side leftsquare i rightsquare rightround rightround colon continue elif leftround leftround y1 leftsquare j rightsquare leftangle y0 leftsquare i rightsquare minus side leftsquare i rightsquare rightround and leftround y2 leftsquare j rightsquare leftangle y0 leftsquare i rightsquare minus side leftsquare i rightsquare rightround rightround colon continue elif leftround leftround x1 leftsquare j rightsquare rightangle x0 leftsquare i rightsquare plus side leftsquare i rightsquare rightround and leftround x2 leftsquare j rightsquare rightangle x0 leftsquare i rightsquare plus side leftsquare i rightsquare rightround rightround colon continue elif leftround leftround y1 leftsquare j rightsquare rightangle y0 leftsquare i rightsquare plus side leftsquare i rightsquare rightround and leftround y2 leftsquare j rightsquare rightangle y0 leftsquare i rightsquare plus side leftsquare i rightsquare rightround rightround colon continue if leftround leftround leftround x1 leftsquare j rightsquare leftangle equal x0 leftsquare i rightsquare plus side leftsquare i rightsquare rightround and leftround x1 leftsquare j rightsquare rightangle equal x0 leftsquare i rightsquare minus side leftsquare i rightsquare rightround rightround and leftround leftround y1 leftsquare j rightsquare leftangle equal y0 leftsquare i rightsquare plus side leftsquare i rightsquare rightround and leftround y1 leftsquare j rightsquare rightangle equal y0 leftsquare i rightsquare minus side leftsquare i rightsquare rightround rightround or leftround leftround x2 leftsquare j rightsquare leftangle equal x0 leftsquare i rightsquare plus side leftsquare i rightsquare rightround and leftround x2 leftsquare j rightsquare rightangle equal x0 leftsquare i rightsquare minus side leftsquare i rightsquare rightround rightround and leftround leftround y2 leftsquare j rightsquare leftangle equal y0 leftsquare i rightsquare plus side leftsquare i rightsquare rightround and leftround y2 leftsquare j rightsquare rightangle equal y0 leftsquare i rightsquare minus side leftsquare i rightsquare rightround rightround rightround colon result plus equal 1 else colon m equal leftround x2 leftsquare j rightsquare minus x1 leftsquare j rightsquare rightround slash leftround float leftround y2 leftsquare j rightsquare minus y1 leftsquare j rightsquare rightround rightround y3 equal y0 leftsquare i rightsquare plus side leftsquare i rightsquare x3 equal x2 leftsquare j rightsquare minus leftround m asterisk leftround y2 leftsquare j rightsquare minus y3 rightround rightround if leftround leftround x3 leftangle equal x0 leftsquare i rightsquare plus side leftsquare i rightsquare rightround or leftround x3 rightangle equal x0 leftsquare i rightsquare minus side leftsquare i rightsquare rightround rightround colon result plus equal 1 continue y3 equal y0 leftsquare i rightsquare minus side leftsquare i rightsquare x3 equal x2 leftsquare j rightsquare minus leftround m asterisk leftround y2 leftsquare j rightsquare minus y3 rightround rightround if leftround leftround x3 leftangle equal x0 leftsquare i rightsquare plus side leftsquare i rightsquare rightround or leftround x3 rightangle equal x0 leftsquare i rightsquare minus side leftsquare i rightsquare rightround rightround colon result plus equal 1 continue x3 equal x0 leftsquare i rightsquare plus side leftsquare i rightsquare y3 equal y2 leftsquare j rightsquare minus leftround x2 leftsquare j rightsquare minus x3 rightround slash m if leftround leftround y3 leftangle equal y0 leftsquare i rightsquare plus side leftsquare i rightsquare rightround or leftround y3 rightangle equal y0 leftsquare i rightsquare minus side leftsquare i rightsquare rightround rightround colon result plus equal 1 continue x3 equal x0 leftsquare i rightsquare minus side leftsquare i rightsquare y3 equal y2 leftsquare j rightsquare minus leftround x2 leftsquare j rightsquare minus x3 rightround slash m if leftround leftround y3 leftangle equal y0 leftsquare i rightsquare plus side leftsquare i rightsquare rightround or leftround y3 rightangle equal y0 leftsquare i rightsquare minus side leftsquare i rightsquare rightround rightround colon result plus equal 1 continue print result
0,import sys a equal sys period stdin period readlines leftround rightround t equal int leftround a leftsquare 0 rightsquare rightround for i in range leftround 0 comma t rightround colon hash k number of initial cities hash p connections between them leftsquare k comma p rightsquare equal a leftsquare 2 asterisk i plus 1 colon 2 asterisk i plus 3 rightsquare p equal p period split leftround s minus quotation s minus quotation rightround c equal leftsquare 0 rightsquare asterisk int leftround k rightround hash get the most shared city plus 1 for j in range leftround 0 comma len leftround p rightround rightround colon p leftsquare j rightsquare equal int leftround p leftsquare j rightsquare rightround p period sort leftround rightround for j in range leftround 0 comma len leftround p rightround rightround colon c leftsquare j rightsquare equal p period count leftround j rightround print max leftround c rightround plus 1
0,t equal int leftround raw_input leftround rightround rightround while t rightangle 0 colon x equal raw_input leftround rightround y equal raw_input leftround rightround z equal s minus quotation s minus quotation for i in range leftround len leftround x rightround rightround colon if x leftsquare i rightsquare equal equal y leftsquare i rightsquare equal equal s minus quotation B s minus quotation colon z plus equal s minus quotation W s minus quotation elif x leftsquare i rightsquare equal equal y leftsquare i rightsquare equal equal s minus quotation W s minus quotation colon z plus equal s minus quotation B s minus quotation else colon z plus equal s minus quotation B s minus quotation print z
0,n comma q equal map leftround int comma raw_input leftround rightround period split leftround d minus quotation d minus quotation rightround rightround a equal map leftround int comma raw_input leftround rightround period split leftround d minus quotation d minus quotation rightround rightround M equal 1000000007 a period insert leftround 0 comma 0 rightround def query1 leftround x comma y comma v rightround colon for j in range leftround x comma y rightround colon a leftsquare j rightsquare plus equal v hash a leftsquare j rightsquare equal divmod leftround a leftsquare j rightsquare comma M rightround leftsquare 1 rightsquare def query2 leftround x comma y comma v rightround colon for j in range leftround x comma y rightround colon a leftsquare j rightsquare asterisk equal v hash a leftsquare j rightsquare equal divmod leftround a leftsquare j rightsquare comma M rightround leftsquare 1 rightsquare def query3 leftround x comma y comma v rightround colon for j in range leftround x comma y rightround colon a leftsquare j rightsquare equal v def query4 leftround x comma y rightround colon sumar equal 0 for j in range leftround x comma y rightround colon sumar plus equal a leftsquare j rightsquare print divmod leftround sumar comma M rightround leftsquare 1 rightsquare for i in range leftround q rightround colon query equal raw_input leftround rightround period split leftround d minus quotation d minus quotation rightround if leftround query leftsquare 0 rightsquare equal equal d minus quotation 1 d minus quotation rightround colon query1 leftround int leftround query leftsquare 1 rightsquare rightround comma int leftround query leftsquare 2 rightsquare rightround plus 1 comma int leftround query leftsquare 3 rightsquare rightround rightround elif leftround query leftsquare 0 rightsquare equal equal d minus quotation 2 d minus quotation rightround colon query2 leftround int leftround query leftsquare 1 rightsquare rightround comma int leftround query leftsquare 2 rightsquare rightround plus 1 comma int leftround query leftsquare 3 rightsquare rightround rightround elif leftround query leftsquare 0 rightsquare equal equal d minus quotation 3 d minus quotation rightround colon query3 leftround int leftround query leftsquare 1 rightsquare rightround comma int leftround query leftsquare 2 rightsquare rightround plus 1 comma int leftround query leftsquare 3 rightsquare rightround rightround else colon query4 leftround int leftround query leftsquare 1 rightsquare rightround comma int leftround query leftsquare 2 rightsquare rightround plus 1 rightround
0,from math import asterisk def adityAndMagic leftround n rightround colon a equal log leftround n comma 2 rightround return int leftround a rightround plus 1 t equal int leftround raw_input leftround rightround rightround for i in range leftround t rightround colon k equal int leftround raw_input leftround rightround rightround print adityAndMagic leftround k rightround
0,def removal_count leftround begin comma end comma left comma right rightround colon if leftround a leftsquare begin rightsquare leftsquare end rightsquare leftsquare left rightsquare leftsquare right rightsquare equal equal minus 1 rightround colon if leftround begin rightangle end rightround colon a leftsquare begin rightsquare leftsquare end rightsquare leftsquare left rightsquare leftsquare right rightsquare equal 0 elif leftround begin equal equal end and left equal equal 0 and right equal equal 0 rightround colon if leftround s_list leftsquare begin rightsquare equal equal s minus quotation ab s minus quotation or s_list leftsquare begin rightsquare equal equal s minus quotation ba s minus quotation rightround colon a leftsquare begin rightsquare leftsquare end rightsquare leftsquare left rightsquare leftsquare right rightsquare equal 1 else colon a leftsquare begin rightsquare leftsquare end rightsquare leftsquare left rightsquare leftsquare right rightsquare equal 0 else colon if leftround left exclamation equal 0 rightround colon start equal s_list leftsquare begin minus 1 rightsquare leftsquare left colon rightsquare else colon start equal s_list leftsquare begin rightsquare if leftround right exclamation equal 0 rightround colon stop equal s_list leftsquare end plus 1 rightsquare leftsquare colon right rightsquare else colon stop equal s_list leftsquare end rightsquare if leftround start leftsquare colon colon minus 1 rightsquare equal equal stop rightround colon a leftsquare begin rightsquare leftsquare end rightsquare leftsquare left rightsquare leftsquare right rightsquare equal removal_count leftround begin plus 1 comma end minus 1 comma 0 comma 0 rightround elif leftround start leftsquare 0 rightsquare equal equal stop leftsquare minus 1 colon rightsquare rightround colon a leftsquare begin rightsquare leftsquare end rightsquare leftsquare left rightsquare leftsquare right rightsquare equal removal_count leftround begin plus 1 comma end minus 1 comma len leftround s_list leftsquare begin rightsquare rightround minus 1 comma len leftround s_list leftsquare end rightsquare rightround minus 1 rightround else colon a leftsquare begin rightsquare leftsquare end rightsquare leftsquare left rightsquare leftsquare right rightsquare equal min leftround removal_count leftround begin comma end minus 1 comma 0 comma 0 rightround comma removal_count leftround begin plus 1 comma end comma 0 comma 0 rightround rightround plus 1 return a leftsquare begin rightsquare leftsquare end rightsquare leftsquare left rightsquare leftsquare right rightsquare s equal raw_input leftround rightround s_list equal s period split leftround rightround a equal leftsquare rightsquare for i in range leftround len leftround s_list rightround rightround colon a period append leftround leftsquare rightsquare rightround for j in range leftround len leftround s_list rightround rightround colon a leftsquare i rightsquare period append leftround leftsquare rightsquare rightround for k in range leftround 2 rightround colon a leftsquare i rightsquare leftsquare j rightsquare period append leftround leftsquare rightsquare rightround for l in range leftround 2 rightround colon a leftsquare i rightsquare leftsquare j rightsquare leftsquare k rightsquare period append leftround minus 1 rightround print removal_count leftround 0 comma len leftround s_list rightround minus 1 comma 0 comma 0 rightround
0,t equal raw_input leftround rightround for i in range leftround 0 comma int leftround t rightround rightround colon n equal raw_input leftround rightround numbers equal map leftround int comma raw_input leftround rightround period split leftround rightround rightround numbers period sort leftround rightround if numbers leftsquare 0 rightsquare equal equal numbers leftsquare 1 rightsquare colon print numbers leftsquare 0 rightsquare else colon multi equal numbers leftsquare 0 rightsquare asterisk numbers leftsquare 1 rightsquare print leftround multi rightround
0,import sys t equal sys period stdin period readline leftround rightround for inn in range leftround int leftround t rightround rightround colon n equal int leftround sys period stdin period readline leftround rightround rightround if n exclamation equal 1 colon flag equal 0 for i in range leftround n rightround colon if flag equal equal 0 colon print d minus quotation 0 d minus quotation plus str leftround i rightround plus d minus quotation d minus quotation plus str leftround n rightround plus d minus quotation d minus quotation plus str leftround i plus 1 rightround flag equal 1 elif flag equal equal 1 colon print str leftround n rightround plus d minus quotation d minus quotation plus str leftround i rightround plus d minus quotation 0 d minus quotation plus str leftround i plus 1 rightround flag equal 0 print d minus quotation 0 0 d minus quotation plus str leftround n rightround plus d minus quotation d minus quotation plus str leftround n rightround else colon print d minus quotation 0 0 1 1 d minus quotation print d minus quotation 1 0 0 1 d minus quotation
0,x equal raw_input leftround rightround l equal raw_input leftround rightround q equal 0 for i in range leftround int leftround l rightround rightround colon z equal raw_input leftround rightround for c in z colon if c not in x colon print s minus quotation No s minus quotation q equal 1 break if q equal equal 0 colon print s minus quotation Yes s minus quotation
0,test_cases equal input leftround rightround for test_case in range leftround test_cases rightround colon n equal input leftround rightround ints equal map leftround int comma raw_input leftround rightround period split leftround rightround rightround final_counter equal s minus quotation s minus quotation arr equal leftsquare 1 rightsquare asterisk n for i in range leftround n minus 2 comma minus 1 comma minus 1 rightround colon curr equal ints leftsquare i rightsquare next equal ints leftsquare i plus 1 rightsquare if leftround curr rightangle 0 and next rightangle 0 rightround or leftround curr leftangle 0 and next leftangle 0 rightround colon continue else colon arr leftsquare i rightsquare equal arr leftsquare i rightsquare plus arr leftsquare i plus 1 rightsquare print s minus quotation s minus quotation period join leftround str leftround a rightround for a in arr rightround
0,hash exclamation slash usr slash bin slash env python hash minus asterisk minus coding colon utf minus 8 minus asterisk minus def fib_int leftround n rightround colon return leftround leftround 4 leftangle leftangle n asterisk leftround 3 plus n rightround rightround slash leftround leftround 4 leftangle leftangle leftround 2 asterisk n rightround rightround minus leftround 2 leftangle leftangle n rightround minus 1 rightround rightround percent leftround 2 leftangle leftangle n rightround def evaluate leftround fromd comma to rightround colon if length leftangle equal 3 colon fromd equal 0 to equal 20 first_iter_int equal fib_int leftround fromd rightround second_iter_int equal fib_int leftround fromd plus 1 rightround for i in range leftround fromd comma to rightround colon tmp equal second_iter_int second_iter_int equal first_iter_int plus second_iter_int first_iter_int equal tmp if fib_str equal equal str leftround first_iter_int rightround colon print d minus quotation YES d minus quotation return print d minus quotation NO d minus quotation num equal input leftround rightround while num colon fib_str equal raw_input leftround rightround length equal len leftround fib_str rightround fromd equal int leftround length asterisk 4 period 784688995215311 rightround minus 4 to equal int leftround length asterisk 4 period 784688995215311 rightround plus 4 evaluate leftround fromd comma to rightround num equal num minus 1
0,hash Mahasena hash https colon slash slash www period codechef period com slash problems slash AMR15A input leftround rightround n equal map leftround int comma raw_input leftround rightround period split leftround rightround rightround even equal 0 odd equal 0 for i in n colon if i percent 2 equal equal 0 colon even plus equal 1 else colon odd plus equal 1 if even rightangle odd colon print d minus quotation READY FOR BATTLE d minus quotation else colon print d minus quotation NOT READY d minus quotation
0,import itertools from fractions import gcd mod equal 1000000007 def calculate leftround a comma sub_lst comma gcd_lst rightround colon if len leftround sub_lst rightround equal equal 1 colon sub_lst period append leftround 1 rightround pr equal gcd_lst leftsquare a leftsquare sub_lst leftsquare 0 rightsquare rightsquare minus 1 rightsquare leftsquare a leftsquare sub_lst leftsquare 1 rightsquare rightsquare minus 1 rightsquare for i in range leftround 2 comma len leftround sub_lst rightround rightround colon pr equal pr asterisk gcd_lst leftsquare pr minus 1 rightsquare leftsquare a leftsquare sub_lst leftsquare i rightsquare rightsquare minus 1 rightsquare percent mod return pr t equal input leftround rightround for _ in range leftround t rightround colon n equal input leftround rightround a equal map leftround int comma raw_input leftround rightround period split leftround rightround rightround prod equal 1 max_a equal max leftround a rightround semicolon gcd_lst equal leftsquare leftsquare 0 for i in range leftround max_a rightround rightsquare for j in range leftround max_a rightround rightsquare for i in range leftround max_a rightround colon for j in range leftround i comma max_a rightround colon gcd_lst leftsquare i rightsquare leftsquare j rightsquare equal gcd_lst leftsquare j rightsquare leftsquare i rightsquare equal gcd leftround i plus 1 comma j plus 1 rightround for i in range leftround 2 comma len leftround a rightround plus 1 rightround colon subset equal list leftround itertools period combinations leftround range leftround len leftround a rightround rightround comma i rightround rightround for j in range leftround len leftround subset rightround rightround colon prod equal prod asterisk calculate leftround a comma list leftround subset leftsquare j rightsquare rightround comma gcd_lst rightround percent mod x equal reduce leftround lambda m comma n colon m asterisk n percent mod comma a rightround prod equal prod asterisk x percent mod print prod
0,test equal int leftround input leftround rightround rightround while leftround test exclamation equal 0 rightround colon test minus equal 1 n comma k equal map leftround int comma raw_input leftround rightround period split leftround rightround rightround if leftround k rightangle equal n rightround colon print leftround minus 1 rightround else colon s equal d minus quotation d minus quotation i equal k plus 1 while leftround i leftangle equal n rightround colon s plus equal str leftround i rightround plus d minus quotation d minus quotation i plus equal 1 i equal 1 while leftround i leftangle equal k rightround colon s plus equal str leftround i rightround plus d minus quotation d minus quotation i plus equal 1 print leftround s rightround
0,t equal int leftround raw_input leftround rightround rightround def gcd leftround a comma b rightround colon if a equal equal 0 colon return b return gcd leftround b percent a comma a rightround while t rightangle 0 colon t minus equal 1 n equal int leftround raw_input leftround rightround rightround a equal map leftround int comma raw_input leftround rightround period split leftround rightround rightround b equal gcd leftround a leftsquare 0 rightsquare comma a leftsquare 1 rightsquare rightround if n rightangle 2 colon for i in range leftround 2 comma n rightround colon b equal gcd leftround b comma a leftsquare i rightsquare rightround print b
0,hash exclamation slash usr slash bin slash python import sys import math mylist equal leftsquare rightsquare n equal 0 def gcd leftround a comma b rightround colon if a leftangle b colon temp equal b b equal a a equal temp if b equal equal 0 colon return a p equal a percent b return gcd leftround b comma p rightround def val leftround pos comma total rightround colon global mylist global n if pos equal equal n colon if total equal equal 1 colon return 1 else colon return 0 if total equal equal 1 colon return math period pow leftround 2 comma n minus pos rightround return val leftround pos plus 1 comma total rightround plus val leftround pos plus 1 comma gcd leftround mylist leftsquare pos rightsquare comma total rightround rightround def main leftround rightround colon global mylist global n t equal int leftround raw_input leftround rightround rightround while leftround t rightround colon n equal int leftround raw_input leftround rightround rightround mylist equal leftsquare rightsquare for i in xrange leftround 0 comma n rightround colon mylist period append leftround int leftround raw_input leftround rightround rightround rightround sum equal 0 for i in xrange leftround 0 comma n rightround colon hash print sum sum equal sum plus val leftround i plus 1 comma mylist leftsquare i rightsquare rightround hash print sum comma i comma mylist leftsquare i rightsquare print int leftround sum rightround t equal t minus 1 if __name__ equal equal d minus quotation __main__ d minus quotation colon main leftround rightround
0,N equal input leftround rightround A equal map leftround int comma raw_input leftround rightround period split leftround rightround rightround su equal 0 for i in range leftround N rightround colon for j in range leftround i plus 1 comma N rightround colon su plus equal A leftsquare i rightsquare ampersand A leftsquare j rightsquare print su
0,inpt equal raw_input leftround rightround arr equal inpt period split leftround rightround n equal int leftround arr leftsquare 0 rightsquare rightround q equal int leftround arr leftsquare 1 rightsquare rightround inp equal raw_input leftround rightround w equal inp period split leftround rightround for i in range leftround len leftround w rightround rightround colon w leftsquare i rightsquare equal int leftround w leftsquare i rightsquare rightround answer equal leftsquare rightsquare while q colon query equal raw_input leftround rightround li equal query period split leftround rightround for i in range leftround len leftround li rightround rightround colon li leftsquare i rightsquare equal int leftround li leftsquare i rightsquare rightround if li leftsquare 0 rightsquare equal equal 0 colon l equal li leftsquare 1 rightsquare r equal li leftsquare 2 rightsquare c equal leftsquare rightsquare c equal w leftsquare l minus 1 colon r rightsquare c period sort leftround rightround answer period append leftround c leftsquare 0 rightsquare rightround if li leftsquare 0 rightsquare equal equal 1 colon l equal li leftsquare 1 rightsquare r equal li leftsquare 2 rightsquare x equal li leftsquare 3 rightsquare for i in range leftround l minus 1 comma r rightround colon w leftsquare i rightsquare equal w leftsquare i rightsquare ampersand x q minus equal 1 for i in range leftround len leftround answer rightround rightround colon print answer leftsquare i rightsquare
0,import sys for __ in range leftround input leftround rightround rightround colon answer equal 0 n comma m equal map leftround int comma sys period stdin period readline leftround rightround period split leftround s minus quotation s minus quotation rightround rightround if n ampersand 1 colon print leftround n slash 2 plus 1 rightround percent 1000000009 else colon print leftround n slash 2 rightround percent 1000000009
0,import itertools test_case equal input leftround rightround while leftround test_case rightround colon test_case minus equal 1 total equal 0 n equal input leftround rightround l equal map leftround int comma raw_input leftround rightround period split leftround d minus quotation d minus quotation rightround rightround no_of_ones equal l period count leftround 1 rightround per_l equal list leftround itertools period permutations leftround l rightround rightround set1 equal set leftround rightround set1 period update leftround per_l rightround l equal list leftround set1 rightround if leftround no_of_ones equal equal 0 rightround colon print len leftround l rightround percent 1000000007 continue for ele in l colon if leftround no_of_ones percent 2 equal equal 1 rightround colon if leftround ele leftsquare 0 rightsquare equal equal 1 rightround colon continue else colon total plus equal 1 else colon if leftround ele leftsquare 0 rightsquare equal equal 1 rightround colon flag equal 0 for i in xrange leftround 1 comma no_of_ones rightround colon if leftround ele leftsquare i rightsquare exclamation equal 1 rightround colon flag equal 1 break if leftround flag equal equal 0 rightround colon total plus equal 1 else colon total plus equal 1 print total percent 1000000007
0,t equal int leftround raw_input leftround rightround rightround while leftround t rightround colon temp equal raw_input leftround rightround period split leftround rightround n equal int leftround temp leftsquare 0 rightsquare rightround w equal int leftround temp leftsquare 1 rightsquare rightround elements equal raw_input leftround rightround period split leftround rightround array equal leftsquare rightsquare i equal 0 while leftround i leftangle n rightround colon array period append leftround int leftround elements leftsquare i rightsquare rightround rightround i equal i plus 1 j equal w count equal 0 while leftround w leftangle equal len leftround array rightround rightround colon i equal 0 j equal 0 while leftround j leftangle len leftround array rightround rightround colon length equal len leftround array leftsquare i colon w plus j rightsquare rightround if leftround length equal equal w rightround colon temp equal array leftsquare i colon w plus j rightsquare if leftround len leftround temp rightround equal equal 1 rightround colon count equal count plus 1 else colon big equal max leftround temp rightround small equal min leftround temp rightround result equal sum leftround temp rightround otherresult equal leftround leftround 2 asterisk small plus leftround length minus 1 rightround rightround asterisk length rightround slash 2 if leftround otherresult equal equal result rightround colon count equal count plus 1 i equal i plus 1 j equal j plus 1 w equal w plus 1 t equal t minus 1 print count
0,noc equal int leftround raw_input leftround rightround rightround while noc colon noc minus equal 1 nos equal input leftround rightround favs equal map leftround int comma raw_input leftround rightround period split leftround rightround rightround nom equal input leftround rightround marks equal sorted leftround map leftround int comma raw_input leftround rightround period split leftround rightround rightround rightround scores equal leftsquare 0 rightsquare indx equal minus 1 for i in range leftround 1 comma len leftround favs rightround rightround colon if favs leftsquare i rightsquare rightangle favs leftsquare i minus 1 rightsquare colon indx plus equal 1 scores period append leftround marks leftsquare indx rightsquare rightround elif favs leftsquare i minus 1 rightsquare rightangle favs leftsquare i rightsquare colon indx plus equal 1 scores leftsquare i minus 1 rightsquare equal marks leftsquare indx rightsquare scores leftsquare i rightsquare equal 0 else colon scores period append leftround 0 rightround indx equal minus 1 print scores print float leftround sum leftround scores rightround rightround slash len leftround scores rightround
0,a equal raw_input leftround rightround t equal int leftround input leftround rightround rightround while leftround t rightangle 0 rightround colon c equal list leftround rightround b equal list leftround a rightround i comma j comma k comma l equal map leftround int comma raw_input leftround rightround period split leftround d minus quotation d minus quotation rightround rightround for x in range leftround i minus 1 comma j rightround colon c period append leftround b leftsquare x rightsquare rightround c period reverse leftround rightround semicolon y equal 0 z equal len leftround c rightround for x in range leftround i minus 1 comma j rightround colon if leftround y equal equal z rightround colon break b leftsquare x rightsquare equal c leftsquare y rightsquare y equal y plus 1 m equal l minus 1 n equal 0 for x in range leftround k minus 1 comma l rightround colon if leftround b leftsquare x rightsquare exclamation equal b leftsquare m rightsquare rightround colon print d minus quotation No d minus quotation n equal n plus 1 break else colon n equal 0 semicolon m equal m minus 1 if leftround n equal equal 0 rightround colon print d minus quotation Yes d minus quotation t equal t minus 1
0,from itertools import asterisk def check leftround S rightround colon stack equal leftsquare rightsquare for i in range leftround len leftround S rightround rightround colon if leftround S leftsquare i rightsquare equal equal d minus quotation leftround d minus quotation rightround colon stack period append leftround S leftsquare i rightsquare rightround else colon if stack colon x equal stack period pop leftround rightround else colon return 0 if not stack colon return 1 else colon return 0 t equal input leftround rightround while t rightangle 0 colon string equal raw_input leftround rightround ans equal leftsquare rightsquare for i in range leftround 1 comma len leftround string rightround plus 1 rightround colon temp equal list leftround combinations leftround string comma i rightround rightround hash print temp for j in range leftround len leftround temp rightround rightround colon s equal d minus quotation d minus quotation for k in range leftround i rightround colon s plus equal temp leftsquare j rightsquare leftsquare k rightsquare if s not in ans colon ans period append leftround s rightround hash print ans for i in range leftround len leftround ans rightround minus 1 comma minus 1 comma minus 1 rightround colon if leftround check leftround ans leftsquare i rightsquare rightround equal equal 0 rightround colon hash print ans leftsquare i rightsquare break l equal len leftround ans leftsquare i rightsquare rightround temp equal leftsquare rightsquare for i in range leftround len leftround ans rightround minus 1 comma minus 1 comma minus 1 rightround colon if leftround len leftround ans leftsquare i rightsquare rightround equal equal l rightround colon temp period append leftround ans leftsquare i rightsquare rightround temp period sort leftround rightround k equal input leftround rightround if leftround k rightangle len leftround temp rightround rightround colon print d minus quotation minus 1 d minus quotation else colon print temp leftsquare k minus 1 rightsquare t equal t minus 1
0,t equal input leftround rightround for i in range leftround t rightround colon nold comma m equal map leftround int comma raw_input leftround rightround period split leftround rightround rightround n equal nold rectangle equal leftsquare 1 rightsquare asterisk n l equal leftsquare rightsquare semicolon w equal leftsquare rightsquare for j in range leftround n rightround colon le comma wi equal map leftround int comma raw_input leftround rightround period split leftround rightround rightround l period append leftround leftsquare le comma j rightsquare rightround w period append leftround leftsquare wi comma j rightsquare rightround l period sort leftround key equal lambda x colon x leftsquare 0 rightsquare rightround w period sort leftround key equal lambda x colon x leftsquare 0 rightsquare rightround llow equal 0 semicolon lup equal 1 wlow equal 0 semicolon wup equal 1 while n rightangle 1 and m rightangle 0 colon if n rightangle equal 2 colon if l leftsquare llow rightsquare leftsquare 0 rightsquare asterisk w leftsquare wup rightsquare leftsquare 0 rightsquare rightangle l leftsquare lup rightsquare leftsquare 0 rightsquare asterisk w leftsquare wlow rightsquare leftsquare 0 rightsquare colon rectangle leftsquare w leftsquare wlow rightsquare leftsquare 1 rightsquare rightsquare equal 0 wlow equal wup semicolon wup plus equal 1 while wup leftangle nold and rectangle leftsquare w leftsquare wup rightsquare leftsquare 1 rightsquare rightsquare exclamation equal 1 colon wup plus equal 1 while rectangle leftsquare l leftsquare llow rightsquare leftsquare 1 rightsquare rightsquare exclamation equal 1 colon llow plus equal 1 if llow equal equal lup colon lup plus equal 1 while lup leftangle nold and rectangle leftsquare l leftsquare lup rightsquare leftsquare 1 rightsquare rightsquare exclamation equal 1 colon lup plus equal 1 else colon rectangle leftsquare l leftsquare llow rightsquare leftsquare 1 rightsquare rightsquare equal 0 llow equal lup semicolon lup plus equal 1 while lup leftangle nold and rectangle leftsquare l leftsquare lup rightsquare leftsquare 1 rightsquare rightsquare exclamation equal 1 colon lup plus equal 1 while wlow leftangle nold and rectangle leftsquare w leftsquare wlow rightsquare leftsquare 1 rightsquare rightsquare exclamation equal 1 colon wlow plus equal 1 if wlow equal equal wup colon wup plus equal 1 while wup leftangle nold and rectangle leftsquare w leftsquare wup rightsquare leftsquare 1 rightsquare rightsquare exclamation equal 1 colon wup plus equal 1 n minus equal 1 semicolon m minus equal 1 print l leftsquare llow rightsquare leftsquare 0 rightsquare asterisk w leftsquare wlow rightsquare leftsquare 0 rightsquare
0,for _ in xrange leftround input leftround rightround rightround colon n comma m equal map leftround int comma raw_input leftround rightround period strip leftround rightround period split leftround rightround rightround l equal map leftround int comma raw_input leftround rightround period strip leftround rightround period split leftround rightround rightround mx equal max leftround l rightround mn equal min leftround l rightround out equal leftsquare max leftround abs leftround mx minus i rightround comma abs leftround i minus mn rightround rightround for i in range leftround n rightround rightsquare print d minus quotation d minus quotation period join leftround map leftround str comma out rightround rightround
0,from math import sqrt from fractions import gcd d0 comma d1 equal leftsquare 0 for i in range leftround 19 rightround rightsquare comma leftsquare 1 for i in range leftround 19 rightround rightsquare for i in range leftround 2 comma 18 rightround colon d0 leftsquare i rightsquare equal 10 asterisk d0 leftsquare i minus 1 rightsquare plus 9 asterisk leftround 10 asterisk asterisk leftround i minus 2 rightround minus d0 leftsquare i minus 2 rightsquare rightround d1 leftsquare i rightsquare equal 10 asterisk asterisk leftround i minus 1 rightround plus 9 asterisk d1 leftsquare i minus 1 rightsquare d1 leftsquare 0 rightsquare equal 0 def fn leftround rightround colon num equal int leftround raw_input leftround rightround rightround global d0 comma d1 ans1 equal 0 period 0 s equal str leftround num rightround n equal len leftround s rightround cnt equal leftsquare 0 for i in range leftround 10 rightround rightsquare for j in range leftround 1 comma 10 rightround colon for ii in range leftround len leftround s rightround rightround colon i equal int leftround s leftsquare ii rightsquare rightround if i leftangle j colon cnt leftsquare j rightsquare plus equal i asterisk leftround d1 leftsquare n minus ii minus 1 rightsquare rightround elif i rightangle j colon cnt leftsquare j rightsquare plus equal leftround i minus 1 rightround asterisk leftround d1 leftsquare n minus ii minus 1 rightsquare rightround plus 10 asterisk asterisk leftround n minus ii minus 1 rightround else colon cnt leftsquare j rightsquare plus equal i asterisk d1 leftsquare n minus ii minus 1 rightsquare ss equal s leftsquare ii plus 1 colon rightsquare if len leftround ss rightround colon cnt leftsquare j rightsquare plus equal int leftround ss rightround break cnt leftsquare 0 rightsquare plus equal d0 leftsquare n minus ii minus 1 rightsquare for ii in range leftround len leftround s rightround rightround colon if ii equal equal n minus 1 colon cnt leftsquare 0 rightsquare plus equal 1 break i equal int leftround s leftsquare ii rightsquare rightround if i equal equal 0 colon cnt leftsquare 0 rightsquare plus equal int leftround s leftsquare ii colon rightsquare rightround plus 1 break else colon cnt leftsquare 0 rightsquare plus equal leftround i minus 1 rightround asterisk leftround 10 asterisk asterisk leftround n minus ii minus 2 rightround plus d0 leftsquare n minus ii minus 1 rightsquare minus d0 leftsquare n minus ii minus 2 rightsquare rightround hash print cnt p equal sum leftround cnt rightround q equal 10 asterisk num g equal gcd leftround p comma q rightround p slash equal g q slash equal g print str leftround p rightround plus d minus quotation slash d minus quotation plus str leftround q rightround hash print cnt t equal int leftround raw_input leftround rightround rightround for i in range leftround t rightround colon fn leftround rightround
0,import sys a equal int leftround raw_input leftround rightround rightround while a rightangle 0 colon b equal int leftround raw_input leftround rightround rightround i equal sum equal 0 p equal map leftround int comma sys period stdin period readline leftround rightround period split leftround rightround rightround p period sort leftround rightround p period reverse leftround rightround j equal int leftround b slash 4 rightround l equal b percent 4 while i leftangle j colon sum plus equal p leftsquare 4 asterisk i rightsquare plus p leftsquare leftround 4 asterisk i rightround plus 1 rightsquare i plus equal 1 if b equal equal 1 colon print p elif l equal equal 0 colon print sum elif l equal equal 1 colon print leftround sum plus p leftsquare 4 asterisk j rightsquare rightround elif l equal equal 3 or l equal equal 2 colon print leftround sum plus p leftsquare 4 asterisk j rightsquare plus p leftsquare leftround 4 asterisk j rightround plus 1 rightsquare rightround a minus equal 1
0,import copy def minimal_cost leftround nodes comma i comma x comma y rightround colon min_cost equal 100000000000 min_node_id equal 0 for n in nodes colon if nodes period get leftround n rightround period get leftround d minus quotation n_child d minus quotation rightround rightangle equal x colon x_cost equal y else colon x_cost equal 0 cost equal leftround nodes period get leftround n rightround period get leftround d minus quotation value d minus quotation rightround asterisk i rightround plus x_cost if cost leftangle min_cost colon min_cost equal cost min_node_id equal n return min_node_id comma min_cost def main leftround rightround colon n equal raw_input leftround rightround value_string equal raw_input leftround rightround period split leftround d minus quotation d minus quotation rightround nodes equal leftcurly rightcurly i equal 1 for a in value_string colon nodes leftsquare i rightsquare equal leftcurly d minus quotation value d minus quotation colon int leftround a rightround comma d minus quotation n_child d minus quotation colon 0 rightcurly i equal i plus 1 for a in xrange leftround int leftround n rightround minus 1 rightround colon edge equal raw_input leftround rightround period split leftround d minus quotation d minus quotation rightround parent equal int leftround edge leftsquare 0 rightsquare rightround nodes leftsquare parent rightsquare leftsquare d minus quotation n_child d minus quotation rightsquare equal nodes leftsquare parent rightsquare period get leftround d minus quotation n_child d minus quotation rightround plus 1 q equal raw_input leftround rightround for a in xrange leftround int leftround q rightround rightround colon copy_nodes equal copy period deepcopy leftround nodes rightround m comma x comma y equal raw_input leftround rightround period split leftround d minus quotation d minus quotation rightround nodes_insert equal raw_input leftround rightround period split leftround d minus quotation d minus quotation rightround total_cost equal 0 j equal 1 for i in nodes_insert colon node_id comma cost equal minimal_cost leftround copy_nodes comma int leftround i rightround comma x comma y rightround total_cost plus equal cost copy_nodes period get leftround node_id rightround leftsquare d minus quotation n_child d minus quotation rightsquare equal copy_nodes period get leftround node_id rightround period get leftround d minus quotation n_child d minus quotation rightround plus 1 copy_nodes leftsquare int leftround n rightround plus j rightsquare equal leftcurly d minus quotation value d minus quotation colon int leftround i rightround comma d minus quotation n_child d minus quotation colon 0 rightcurly j equal j plus 1 print total_cost if __name__ equal equal d minus quotation __main__ d minus quotation colon main leftround rightround
0,d minus quotation d minus quotation d minus quotation Created on Sat Oct 3 04 colon 23 colon 39 2015 at author colon magusverma d minus quotation d minus quotation d minus quotation MOD equal 10 asterisk asterisk 9 plus 9 def modpow leftround a comma b rightround colon x equal 1 while leftround b rightround colon if leftround b ampersand 1 rightround colon x equal leftround x asterisk a rightround percent MOD a equal leftround a asterisk a rightround percent MOD b slash equal 2 return x percent MOD precompute_limit equal 100003 fact equal leftsquare 1 for i in range leftround precompute_limit rightround rightsquare inv_fact equal leftsquare 1 for i in range leftround precompute_limit rightround rightsquare def gen_facts leftround rightround colon for i in range leftround 2 comma precompute_limit rightround colon fact leftsquare i rightsquare equal leftround fact leftsquare i minus 1 rightsquare asterisk i rightround percent MOD inv_fact leftsquare i rightsquare equal modpow leftround fact leftsquare i rightsquare comma MOD minus 2 rightround gen_facts leftround rightround def ncr leftround n comma r rightround colon if leftround n leftangle r rightround colon return 0 return leftround leftround leftround fact leftsquare n rightsquare asterisk inv_fact leftsquare r rightsquare rightround percent MOD rightround asterisk inv_fact leftsquare n minus r rightsquare rightround percent MOD from collections import defaultdict def fact leftround n rightround colon if n equal equal 0 colon return 1 return reduce leftround lambda x comma y colon x asterisk y comma leftsquare i for i in range leftround 1 comma n plus 1 rightround rightsquare rightround def ncr leftround n comma r rightround colon return fact leftround n rightround slash leftround fact leftround r rightround asterisk fact leftround n minus r rightround rightround hash a equal leftsquare 1 comma 2 comma minus 1 comma minus 1 comma minus 1 comma 0 comma 0 rightsquare hash m equal 3 hash n equal len leftround a rightround t equal input leftround rightround for case in range leftround t rightround colon leftsquare n comma q rightsquare equal map leftround int comma raw_input leftround rightround period strip leftround rightround period split leftround rightround rightround array equal map leftround int comma raw_input leftround rightround period strip leftround rightround period split leftround rightround rightround for query in range leftround q rightround colon m equal input leftround rightround a equal leftsquare i percent m for i in array rightsquare a_ equal leftsquare 0 for i in range leftround m rightround rightsquare for i in a colon a_ leftsquare i rightsquare plus equal 1 d equal defaultdict leftround int rightround for i comma v in enumerate leftround a_ rightround colon for j in range leftround 1 comma v plus 1 rightround colon d leftsquare leftround i comma leftround i asterisk j rightround percent m rightround rightsquare plus equal ncr leftround v comma j rightround d leftsquare leftround i comma leftround i asterisk j rightround percent m rightround rightsquare percent equal MOD dp equal leftsquare leftsquare 0 for i in range leftround m rightround rightsquare for i in range leftround m plus 1 rightround rightsquare dp leftsquare 0 rightsquare leftsquare 0 rightsquare equal 1 for i in range leftround 1 comma m plus 1 rightround colon for j in range leftround m rightround colon dp leftsquare i rightsquare leftsquare j rightsquare plus equal dp leftsquare i minus 1 rightsquare leftsquare j rightsquare dp leftsquare i rightsquare leftsquare j rightsquare percent equal MOD for k in range leftround m rightround colon dp leftsquare i rightsquare leftsquare j rightsquare plus equal dp leftsquare i minus 1 rightsquare leftsquare leftround j minus k rightround percent m rightsquare asterisk d leftsquare leftround i minus 1 comma k rightround rightsquare dp leftsquare i rightsquare leftsquare j rightsquare percent equal MOD print dp leftsquare m rightsquare leftsquare 0 rightsquare
0,test_case equal int leftround raw_input leftround rightround rightround for t in range leftround test_case rightround colon n equal int leftround raw_input leftround rightround rightround if 360 percent n equal equal 0 colon print s minus quotation y s minus quotation comma else colon print s minus quotation n s minus quotation comma if n leftangle equal 360 colon print s minus quotation y s minus quotation comma else colon print s minus quotation n s minus quotation if leftround n asterisk leftround n plus 1 rightround slash 2 rightround leftangle equal 360 colon print s minus quotation y s minus quotation comma else colon print s minus quotation n s minus quotation
0,hash your code goes here import fractions n comma m equal map leftround int comma raw_input leftround rightround period split leftround rightround rightround A equal map leftround int comma raw_input leftround rightround period split leftround rightround rightround hash print n comma m hash print A while m rightangle 0 colon G comma x comma y equal map leftround int comma raw_input leftround rightround period split leftround rightround rightround hash print G comma x comma y S equal leftsquare rightsquare while x leftangle equal y colon if fractions period gcd leftround G comma A leftsquare x minus 1 rightsquare rightround rightangle 1 colon S period append leftround A leftsquare x minus 1 rightsquare rightround hash print S x equal x plus 1 if len leftround S rightround rightangle 0 colon print max leftround S rightround comma S period count leftround max leftround S rightround rightround else colon print minus 1 comma minus 1 m equal m minus 1 hash print n comma m
0,import sys t equal int leftround raw_input leftround rightround rightround while t rightangle 0 colon n equal int leftround raw_input leftround rightround rightround x equal map leftround int comma raw_input leftround rightround period split leftround rightround rightround x period remove leftround 0 rightround for i in xrange leftround 0 comma n rightround colon a equal min leftround x rightround y equal len leftround x rightround sys period stdout period write leftround str leftround a rightround rightround sys period stdout period write leftround d minus quotation d minus quotation rightround for j in xrange leftround 0 comma y minus 1 rightround colon if x leftsquare j rightsquare exclamation equal 0 colon x leftsquare j rightsquare minus equal a if x leftsquare j rightsquare equal equal 0 colon x period remove leftround x leftsquare j rightsquare rightround print d minus quotation d minus quotation t minus equal 1
0,T equal int leftround raw_input leftround rightround rightround def solve leftround s comma N rightround colon curr equal s leftsquare minus 1 rightsquare for i in xrange leftround N minus 1 comma minus 1 comma minus 1 rightround colon consider equal min leftround i plus 1 comma s leftsquare i rightsquare rightround if consider leftangle curr colon curr equal consider s leftsquare i rightsquare equal curr return reduce leftround lambda x comma y colon x asterisk y comma s rightround for i in xrange leftround T rightround colon N equal int leftround raw_input leftround rightround rightround L equal map leftround int comma raw_input leftround rightround period split leftround rightround rightround print solve leftround L comma N rightround
0,t equal input leftround rightround while leftround rightround colon t minus equal 1 n comma m equal map leftround int comma raw_input leftround rightround period split leftround rightround rightround print n plus m minus 1
0,T equal int leftround raw_input leftround rightround rightround while T colon N equal int leftround raw_input leftround rightround rightround print N plus leftround N asterisk leftround N plus 1 rightround rightround slash 2 T minus equal 1
0,import sys t equal input leftround rightround p equal 103993 period 0 slash 33102 period 0 while t colon k equal input leftround rightround if k equal equal 0 colon print 3 else colon l equal 103993 percent 33102 q equal 103993 slash 33102 j equal 1 while j leftangle equal k colon q equal leftround leftround l asterisk 10 rightround slash 33102 rightround asterisk leftround 10 asterisk asterisk j rightround plus q l equal leftround l asterisk 10 rightround percent 33102 j plus equal 1 q equal str leftround q rightround leftsquare colon colon minus 1 rightsquare q equal q leftsquare colon 1 rightsquare plus d minus quotation period d minus quotation plus q leftsquare 1 colon rightsquare print q t minus equal 1
0,t equal int leftround input leftround rightround rightround z equal 0 while z leftangle t colon nk equal str leftround input leftround rightround rightround n comma k equal nk period split leftround s minus quotation s minus quotation rightround a equal str leftround input leftround rightround rightround period split leftround s minus quotation s minus quotation rightround i equal 0 diff equal int leftround k rightround count equal 0 i equal 0 print leftround t comma n comma k comma a rightround while i leftangle int leftround n rightround colon j equal i while j leftangle int leftround n rightround colon if abs leftround int leftround a leftsquare i rightsquare rightround plus int leftround a leftsquare j rightsquare rightround minus int leftround k rightround rightround equal equal diff colon count plus equal 1 if abs leftround int leftround a leftsquare i rightsquare rightround plus int leftround a leftsquare j rightsquare rightround minus int leftround k rightround rightround leftangle diff colon diff equal abs leftround int leftround a leftsquare i rightsquare rightround plus int leftround a leftsquare j rightsquare rightround minus int leftround k rightround rightround count equal 0 j plus equal 1 i plus equal 1 print leftround diff comma count minus 1 rightround z plus equal 1
0,import math import sys from collections import defaultdict from itertools import combinations class Graph colon def __init__ leftround self rightround colon self period nodes equal set leftround rightround self period edges equal defaultdict leftround list rightround self period distances equal leftcurly rightcurly def add_node leftround self comma value rightround colon self period nodes period add leftround value rightround def add_edge leftround self comma from_node comma to_node comma distance rightround colon self period edges leftsquare from_node rightsquare period append leftround to_node rightround self period edges leftsquare to_node rightsquare period append leftround from_node rightround self period distances leftsquare leftround from_node comma to_node rightround rightsquare equal distance self period distances leftsquare leftround to_node comma from_node rightround rightsquare equal distance def dijsktra leftround graph comma initial rightround colon visited equal leftcurly initial colon 0 rightcurly path equal leftcurly rightcurly nodes equal set leftround graph period nodes rightround while nodes colon min_node equal None for node in nodes colon if node in visited colon if min_node is None colon min_node equal node elif visited leftsquare node rightsquare leftangle visited leftsquare min_node rightsquare colon min_node equal node if min_node is None colon break nodes period remove leftround min_node rightround current_weight equal visited leftsquare min_node rightsquare for edge in graph period edges leftsquare min_node rightsquare colon weight equal current_weight plus graph period distances leftsquare leftround min_node comma edge rightround rightsquare if edge not in visited or weight leftangle visited leftsquare edge rightsquare colon visited leftsquare edge rightsquare equal weight path leftsquare edge rightsquare equal min_node return visited comma path class Port colon def __init__ leftround self comma name comma x comma y comma island rightround colon self period name equal name self period x equal x self period y equal y self period island equal island def __eq__ leftround self comma other rightround colon return leftround isinstance leftround other comma self period __class__ rightround and self period __dict__ equal equal other period __dict__ rightround def __ne__ leftround self comma other rightround colon return not self period __eq__ leftround other rightround def __hash__ leftround self rightround colon return self period x plus self period y def __repr__ leftround self rightround colon return s minus quotation s minus quotation period join leftround leftround self period name comma self period island rightround rightround class Island colon def __init__ leftround self comma name comma w comma h comma ports comma rects rightround colon self period name equal name self period w equal w self period h equal h self period ports equal ports self period rects equal rects def __repr__ leftround self rightround colon return str leftround self period __dict__ rightround class IslandPoint colon def __init__ leftround self comma x comma y comma island rightround colon self period x equal x self period y equal y self period island equal island def __eq__ leftround self comma other rightround colon return leftround isinstance leftround other comma self period __class__ rightround and self period __dict__ equal equal other period __dict__ rightround def __ne__ leftround self comma other rightround colon return not self period __eq__ leftround other rightround def __hash__ leftround self rightround colon return self period x plus self period y def __repr__ leftround self rightround colon return s minus quotation s minus quotation period join leftround leftround str leftround self period x rightround comma str leftround self period y rightround rightround rightround def testprint leftround rightround colon return sys period stdin period readline leftround rightround period rstrip leftround s minus quotation \r\n s minus quotation rightround hash rdline equal sys period stdin period readline rdline equal testprint runs equal int leftround rdline leftround rightround rightround def line_intersect leftround x00 comma y00 comma x10 comma y10 comma x01 comma y01 comma x11 comma y11 rightround colon d equal x11 asterisk y01 minus x01 asterisk y11 if d equal equal 0 colon return False s equal leftround 1 slash d rightround asterisk leftround leftround x00 minus x10 rightround asterisk y01 minus leftround y00 minus y10 rightround asterisk x01 rightround if not 0 leftangle equal s leftangle equal 1 colon return False t equal leftround minus 1 slash d rightround asterisk leftround minus 1 asterisk leftround x00 minus x10 rightround asterisk y11 plus leftround y00 minus y10 rightround asterisk x11 rightround if not 0 leftangle equal t leftangle equal 1 colon return False else colon return True def rect_intersect leftround x0 comma y0 comma x1 comma y1 comma rects rightround colon buf equal period 01 result equal False x1 equal x1 minus x0 y1 equal y1 minus y0 for rect in rects colon rectd equal leftround rect leftsquare 0 rightsquare plus buf comma rect leftsquare 1 rightsquare minus buf comma rect leftsquare 2 rightsquare plus buf comma rect leftsquare 3 rightsquare minus buf rightround result pipe equal leftround line_intersect leftround x0 comma y0 comma rectd leftsquare 0 rightsquare comma rectd leftsquare 2 rightsquare comma x1 comma y1 comma rectd leftsquare 1 rightsquare minus rectd leftsquare 0 rightsquare comma rectd leftsquare 2 rightsquare minus rectd leftsquare 2 rightsquare rightround or line_intersect leftround x0 comma y0 comma rectd leftsquare 0 rightsquare comma rectd leftsquare 2 rightsquare comma x1 comma y1 comma rectd leftsquare 0 rightsquare minus rectd leftsquare 0 rightsquare comma rectd leftsquare 3 rightsquare minus rectd leftsquare 2 rightsquare rightround or line_intersect leftround x0 comma y0 comma rectd leftsquare 0 rightsquare comma rectd leftsquare 3 rightsquare comma x1 comma y1 comma rectd leftsquare 1 rightsquare minus rectd leftsquare 0 rightsquare comma rectd leftsquare 3 rightsquare minus rectd leftsquare 3 rightsquare rightround or line_intersect leftround x0 comma y0 comma rectd leftsquare 1 rightsquare comma rectd leftsquare 2 rightsquare comma x1 comma y1 comma rectd leftsquare 1 rightsquare minus rectd leftsquare 1 rightsquare comma rectd leftsquare 3 rightsquare minus rectd leftsquare 2 rightsquare rightround rightround if result colon return True return result def distance_form leftround p0 comma p1 rightround colon hash return int leftround math period ceil leftround leftround leftround p0 period x minus p1 period x rightround asterisk asterisk 2 plus leftround p0 period y minus p1 period y rightround asterisk asterisk 2 rightround asterisk asterisk leftround period 5 rightround rightround rightround hash return round leftround leftround leftround p0 period x minus p1 period x rightround asterisk asterisk 2 plus leftround p0 period y minus p1 period y rightround asterisk asterisk 2 rightround asterisk asterisk leftround period 5 rightround rightround return leftround leftround leftround p0 period x minus p1 period x rightround asterisk asterisk 2 plus leftround p0 period y minus p1 period y rightround asterisk asterisk 2 rightround asterisk asterisk leftround period 5 rightround rightround for i in xrange leftround runs rightround colon islands equal leftcurly rightcurly island_graph equal Graph leftround rightround num_islands equal int leftround rdline leftround rightround rightround for j in xrange leftround num_islands rightround colon is_name equal rdline leftround rightround w comma h equal map leftround int comma rdline leftround rightround period split leftround s minus quotation s minus quotation rightround rightround num_ports equal int leftround rdline leftround rightround rightround ports equal leftcurly rightcurly for k in xrange leftround num_ports rightround colon l equal rdline leftround rightround period split leftround s minus quotation s minus quotation rightround pt_name equal l leftsquare 0 rightsquare pt_x equal int leftround l leftsquare 1 rightsquare rightround pt_y equal int leftround l leftsquare 2 rightsquare rightround ports leftsquare pt_name rightsquare equal Port leftround pt_name comma pt_x comma pt_y comma is_name rightround num_rect equal int leftround rdline leftround rightround rightround rects equal leftsquare rightsquare for k in xrange leftround num_rect rightround colon l equal map leftround int comma rdline leftround rightround period rstrip leftround rightround period split leftround s minus quotation s minus quotation rightround rightround rects period append leftround leftsquare l leftsquare 0 rightsquare comma l leftsquare 2 rightsquare comma l leftsquare 1 rightsquare comma l leftsquare 3 rightsquare rightsquare rightround islands leftsquare is_name rightsquare equal Island leftround is_name comma w comma h comma ports comma rects rightround num_connections equal int leftround rdline leftround rightround rightround for j in xrange leftround num_connections rightround colon l equal rdline leftround rightround period split leftround s minus quotation s minus quotation rightround p1 comma i1 comma p2 comma i2 equal l leftsquare colon minus 1 rightsquare cost equal int leftround l leftsquare minus 1 rightsquare rightround island_graph period add_edge leftround islands leftsquare i1 rightsquare period ports leftsquare p1 rightsquare comma islands leftsquare i2 rightsquare period ports leftsquare p2 rightsquare comma cost rightround for key in islands colon island_is equal islands leftsquare key rightsquare points equal list leftround rightround points period extend leftround island_is period ports leftsquare port rightsquare for port in island_is period ports rightround for rect in island_is period rects colon points period extend leftround IslandPoint leftround x comma y comma island_is rightround for x in rect leftsquare 0 colon 2 rightsquare for y in rect leftsquare 2 colon rightsquare rightround for p in points colon island_graph period add_node leftround p rightround for p0 comma p1 in combinations leftround points comma 2 rightround colon if not rect_intersect leftround p0 period x comma p0 period y comma p1 period x comma p1 period y comma island_is period rects rightround colon island_graph period add_edge leftround p0 comma p1 comma distance_form leftround p0 comma p1 rightround rightround p1 comma i1 comma p2 comma i2 equal rdline leftround rightround period split leftround s minus quotation s minus quotation rightround visited comma paths equal dijsktra leftround island_graph comma islands leftsquare i1 rightsquare period ports leftsquare p1 rightsquare rightround print s minus quotation s minus quotation period join leftround leftround s minus quotation case s minus quotation comma str leftround i plus 1 rightround comma s minus quotation Y s minus quotation rightround rightround print int leftround round leftround visited leftsquare islands leftsquare i2 rightsquare period ports leftsquare p2 rightsquare rightsquare rightround rightround node equal paths leftsquare islands leftsquare i2 rightsquare period ports leftsquare p2 rightsquare rightsquare path equal leftsquare islands leftsquare i2 rightsquare period ports leftsquare p2 rightsquare rightsquare while node colon path period append leftround node rightround try colon node equal paths leftsquare node rightsquare except KeyError colon break for j in reversed leftround path rightround colon print j print
0,import sys def dfs leftround d comma r comma prevA comma prevG comma curLevel rightround colon if leftround curLevel rightangle equal len leftround beats rightround rightround colon return None curNum equal beats leftsquare curLevel rightsquare newd equal d newr equal r hash Will current number go in both lists question if leftround d equal equal 0 and prevA exclamation equal None rightround colon newd equal curNum minus prevA if leftround r equal equal 0 and prevG exclamation equal None rightround colon newr equal leftround 1 period 0 asterisk curNum rightround slash prevG if leftround leftround prevA equal equal None or prevA plus newd equal equal curNum rightround and leftround prevG equal equal None or int leftround prevG asterisk newr rightround equal equal curNum rightround rightround colon hash TODO colon Success check if leftround curLevel equal equal len leftround beats rightround minus 1 rightround colon return leftround newd comma newr comma curNum comma curNum rightround ret equal dfs leftround newd comma newr comma curNum comma curNum comma curLevel plus 1 rightround if leftround ret exclamation equal None rightround colon return ret hash Will current number go in A list question newd equal d newr equal r if leftround d equal equal 0 and prevA exclamation equal None rightround colon newd equal curNum minus prevA if leftround prevA equal equal None or prevA plus newd equal equal curNum rightround colon hash TODO colon Success check if leftround curLevel equal equal len leftround beats rightround minus 1 rightround colon return leftround newd comma newr comma curNum comma prevG rightround ret equal dfs leftround newd comma newr comma curNum comma prevG comma curLevel plus 1 rightround if leftround ret exclamation equal None rightround colon return ret hash Will current number go in G list question newd equal d newr equal r if leftround r equal equal 0 and prevG exclamation equal None rightround colon newr equal leftround 1 period 0 asterisk curNum rightround slash prevG if leftround prevG equal equal None or int leftround prevG asterisk newr rightround equal equal curNum rightround colon hash TODO colon Success check if leftround curLevel equal equal len leftround beats rightround minus 1 rightround colon return leftround newd comma newr comma prevA comma curNum rightround ret equal dfs leftround newd comma newr comma prevA comma curNum comma curLevel plus 1 rightround if leftround ret exclamation equal None rightround colon return ret return None input equal leftsquare l for l in sys period stdin rightsquare T equal int leftround input leftsquare 0 rightsquare period strip leftround rightround rightround for t in xrange leftround T rightround colon N equal int leftround input leftsquare leftround t asterisk 2 rightround plus 1 rightsquare period strip leftround rightround rightround beatsLine equal input leftsquare leftround t asterisk 2 rightround plus 2 rightsquare period strip leftround rightround beats equal leftsquare int leftround b rightround for b in beatsLine period split leftround rightround rightsquare sol equal dfs leftround 0 comma 0 comma None comma None comma 0 rightround
0,def binInt leftround n rightround colon b equal bin leftround n rightround leftsquare 2 colon rightsquare period zfill leftround k rightround r equal b leftsquare colon colon minus 1 rightsquare return leftsquare int leftround b comma 2 rightround comma int leftround r comma 2 rightround rightsquare for _ in range leftround input leftround rightround rightround colon k comma s equal raw_input leftround rightround period strip leftround rightround period split leftround rightround k equal int leftround k rightround sl equal leftsquare i for i in s rightsquare l equal leftsquare 0 rightsquare asterisk leftround 2 asterisk asterisk k rightround for i in range leftround 2 asterisk asterisk k rightround colon b comma r equal binInt leftround i rightround if l leftsquare b rightsquare equal equal 0 or l leftsquare r rightsquare equal equal 0 colon sl leftsquare b rightsquare comma sl leftsquare r rightsquare equal sl leftsquare r rightsquare comma sl leftsquare b rightsquare l leftsquare b rightsquare equal 1 l leftsquare r rightsquare equal 1 print d minus quotation d minus quotation period join leftround sl rightround
0,M equal 10 asterisk asterisk 9 plus 7 def arraysSum leftround rightround colon n comma m equal map leftround int comma raw_input leftround rightround period split leftround rightround rightround a equal map leftround int comma raw_input leftround rightround period split leftround rightround rightround b equal map leftround int comma raw_input leftround rightround period split leftround rightround rightround dp equal leftsquare leftsquare 0 for i in range leftround m plus 1 rightround rightsquare for j in range leftround n rightround rightsquare for i in range leftround n rightround colon dp leftsquare i rightsquare leftsquare 1 rightsquare equal 1 for i in range leftround n rightround colon for j in range leftround i rightround colon for k in range leftround 2 comma m plus 1 rightround colon if a leftsquare i rightsquare plus b leftsquare k minus 1 rightsquare rightangle equal a leftsquare j rightsquare plus b leftsquare k minus 2 rightsquare colon dp leftsquare i rightsquare leftsquare k rightsquare equal leftround dp leftsquare i rightsquare leftsquare k rightsquare plus dp leftsquare j rightsquare leftsquare k minus 1 rightsquare rightround percent M result equal 0 for i in range leftround n rightround colon result plus equal dp leftsquare i rightsquare leftsquare m rightsquare print result arraysSum leftround rightround
0,def solution leftround rightround colon T equal int leftround raw_input leftround rightround period strip leftround rightround rightround for i in xrange leftround T rightround colon n comma k equal map leftround int comma raw_input leftround rightround period strip leftround rightround period split leftround s minus quotation s minus quotation rightround rightround arr equal list leftround map leftround int comma raw_input leftround rightround period strip leftround rightround period split leftround s minus quotation s minus quotation rightround rightround rightround rem_1 equal arr leftsquare 0 rightsquare percent leftround k plus 1 rightround rem_2 equal minus 1 count_1 equal 0 count_2 equal 0 for i in xrange leftround n rightround colon if arr leftsquare i rightsquare percent leftround k plus 1 rightround equal equal rem_1 colon count_1 plus equal 1 else colon if arr leftsquare i rightsquare percent leftround k plus 1 rightround equal equal rem_2 colon count_2 plus equal 1 else colon if rem_2 equal equal minus 1 colon rem_2 equal arr leftsquare i rightsquare percent leftround k plus 1 rightround count_2 plus equal 1 else colon break if i leftangle n minus 1 colon print d minus quotation NO d minus quotation else colon if count_1 equal equal n minus 1 or count_2 equal equal n minus 1 or count_1 equal equal n colon print d minus quotation YES d minus quotation else colon print d minus quotation NO d minus quotation solution leftround rightround
0,for _ in range leftround int leftround raw_input leftround rightround rightround rightround colon n equal int leftround raw_input leftround rightround rightround girl equal leftsquare raw_input leftround rightround for __ in range leftround n rightround rightsquare boy equal leftsquare raw_input leftround rightround for __ in range leftround n rightround rightsquare count equal 0 for i in range leftround n rightround colon if girl leftsquare i rightsquare hat boy leftsquare i rightsquare rightangle boy leftsquare i rightsquare hat girl leftsquare i rightsquare colon count plus equal 1 print count
0,t equal int leftround input leftround rightround rightround while leftround t rightangle 0 rightround colon x equal int leftround input leftround rightround rightround s equal raw_input leftround rightround period split leftround rightround fdpt equal int leftround s leftsquare 0 rightsquare rightround if leftround fdpt exclamation equal 0 rightround colon s equal s leftsquare 1 colon rightsquare xp equal leftsquare rightsquare i equal 0 while leftround i leftangle fdpt rightround colon xp period append leftround leftsquare int leftround s leftsquare 2 asterisk i rightsquare rightround comma int leftround s leftsquare 2 asterisk i plus 1 rightsquare rightround rightsquare rightround i plus equal 1 s equal raw_input leftround rightround period split leftround rightround xp period append leftround leftsquare 10 asterisk asterisk 9 plus 1 comma 1 rightsquare rightround xp period sort leftround rightround tpt equal int leftround s leftsquare 0 rightsquare rightround if leftround tpt exclamation equal 0 rightround colon s equal s leftsquare 1 colon rightsquare tp equal leftsquare rightsquare tq equal leftsquare rightsquare i equal 0 while leftround i leftangle tpt rightround colon tp period append leftround leftsquare int leftround s leftsquare 3 asterisk i rightsquare rightround comma int leftround s leftsquare 3 asterisk i plus 2 rightsquare rightround rightsquare rightround tq period append leftround leftsquare int leftround s leftsquare 3 asterisk i rightsquare rightround comma int leftround s leftsquare 3 asterisk i plus 1 rightsquare rightround rightsquare rightround i plus equal 1 tp period append leftround leftsquare 10 asterisk asterisk 9 plus 1 comma 1 rightsquare rightround tp period sort leftround rightround tq period append leftround leftsquare 10 asterisk asterisk 9 plus 1 comma 0 rightsquare rightround tq period sort leftround rightround low equal 1 high equal 10 asterisk asterisk 30 ans equal 10 asterisk asterisk 30 while leftround low leftangle equal high rightround colon mid equal leftround low plus high rightround slash 2 tmp equal mid no equal 0 i equal 0 tpi equal 0 xpi equal 0 while leftround tp leftsquare tpi rightsquare leftsquare 0 rightsquare exclamation equal 10 asterisk asterisk 9 plus 1 or xp leftsquare xpi rightsquare leftsquare 0 rightsquare exclamation equal 10 asterisk asterisk 9 plus 1 rightround colon if leftround xp leftsquare xpi rightsquare leftsquare 0 rightsquare leftangle tp leftsquare tpi rightsquare leftsquare 0 rightsquare rightround colon tmp minus equal xp leftsquare xpi rightsquare leftsquare 1 rightsquare xpi plus equal 1 else colon if leftround tq leftsquare tpi rightsquare leftsquare 1 rightsquare leftangle equal tmp rightround colon tmp plus equal tp leftsquare tpi rightsquare leftsquare 1 rightsquare tpi plus equal 1 if leftround tmp leftangle equal 0 rightround colon no equal 1 break if leftround no equal equal 0 rightround colon ans equal mid high equal mid minus 1 else colon low equal mid plus 1 print ans t minus equal 1
0,T equal int leftround raw_input leftround d minus quotation d minus quotation rightround rightround for t in xrange leftround 0 comma T rightround colon N equal int leftround raw_input leftround d minus quotation d minus quotation rightround rightround mylist equal map leftround int comma raw_input leftround d minus quotation d minus quotation rightround period split leftround rightround rightround templist equal mylist mylist period sort leftround rightround flag equal True for idx comma item in enumerate leftround templist rightround colon if leftround abs leftround idx minus templist period index leftround item rightround rightround rightangle 1 rightround colon print d minus quotation NO d minus quotation flag equal False break if flag colon print d minus quotation YES d minus quotation
0,hash print s minus quotation mississippi s minus quotation period split leftround s minus quotation ssissi s minus quotation rightround t equal int leftround raw_input leftround rightround rightround for z in xrange leftround t rightround colon s equal raw_input leftround rightround arr comma dic equal leftsquare rightsquare comma leftsquare rightsquare arr period append leftround s rightround n equal int leftround raw_input leftround rightround rightround for i in xrange leftround n rightround colon dic period append leftround raw_input leftround rightround rightround counter equal 0 for i in xrange leftround len leftround dic rightround rightround colon for j in xrange leftround len leftround arr rightround rightround colon if dic leftsquare i rightsquare in arr leftsquare j rightsquare colon x equal arr leftsquare j rightsquare period split leftround dic leftsquare i rightsquare rightround arr period pop leftround j rightround for k in xrange leftround len leftround x rightround rightround colon if len leftround x leftsquare k rightsquare rightround rightangle 0 colon arr period append leftround x leftsquare k rightsquare rightround counter plus equal 1 break if counter percent 2 equal equal 0 colon print d minus quotation Tracy d minus quotation else colon print d minus quotation Teddy d minus quotation
0,hash cook your code here t equal int leftround raw_input leftround rightround rightround for z in range leftround t rightround colon s equal raw_input leftround rightround k equal int leftround raw_input leftround rightround rightround l equal leftsquare rightsquare for i in s colon l period append leftround i rightround l period sort leftround rightround g equal leftsquare rightsquare final equal d minus quotation d minus quotation for i in range leftround k comma len leftround l rightround rightround colon g period append leftround l leftsquare i rightsquare rightround for i in s colon if leftround i in g rightround colon g period remove leftround i rightround else colon final plus equal i semicolon print final
0,t equal input leftround rightround while leftround t rightangle 0 rightround colon t minus equal 1 n comma m equal map leftround int comma raw_input leftround rightround period split leftround rightround rightround arr equal leftsquare 0 rightsquare asterisk n semicolon s equal leftsquare leftsquare leftsquare rightsquare for i in range leftround 0 rightround rightsquare for j in range leftround m rightround rightsquare i equal 0 semicolon j equal 0 semicolon k equal 0 while leftround i leftangle m rightround colon arr1 equal map leftround int comma raw_input leftround rightround period split leftround rightround rightround j equal 0 while leftround j leftangle arr1 leftsquare 0 rightsquare rightround colon arr leftsquare arr1 leftsquare 1 plus j rightsquare rightsquare plus equal 1 s leftsquare i rightsquare period append leftround arr1 leftsquare j plus 1 rightsquare rightround j plus equal 1 i plus equal 1 hash print hash print d minus quotation arr1 d minus quotation comma arr hash print s hash print i equal 0 semicolon sum1 equal 0 while leftround i leftangle n rightround colon if leftround arr leftsquare i rightsquare rightangle 1 rightround colon sum1 plus equal 1 arr leftsquare i rightsquare equal 0 i plus equal 1 hash print d minus quotation arr2 d minus quotation comma arr sum2 equal leftsquare 0 rightsquare asterisk m semicolon i equal 0 semicolon j equal 0 while leftround i leftangle n rightround colon if leftround arr leftsquare i rightsquare equal equal 1 rightround colon j equal 0 while leftround j leftangle m rightround colon k equal 0 while leftround k leftangle len leftround s leftsquare j rightsquare rightround rightround colon if leftround i equal equal s leftsquare j rightsquare leftsquare k rightsquare rightround colon sum2 leftsquare j rightsquare equal 1 k plus equal 1 j plus equal 1 i plus equal 1 print sum1 plus sum leftround sum2 rightround
0,t equal input leftround rightround while t colon s equal raw_input leftround rightround s equal s period split leftround d minus quotation hash d minus quotation rightround x equal leftsquare rightsquare for i in s colon n equal i period count leftround d minus quotation period d minus quotation rightround if n rightangle 0 colon x period append leftround n rightround if x equal equal leftsquare rightsquare colon t minus equal 1 print 0 continue d equal 1 m equal x leftsquare 0 rightsquare for i in x colon if m leftangle i colon m equal i d plus equal 1 print d t minus equal 1
0,no_of_inputs equal input leftround rightround i0 equal leftsquare rightsquare for i1 in range leftround no_of_inputs rightround colon i0 period append leftround input leftround rightround rightround def prime leftround x rightround colon for i12 in range leftround 2 comma x minus 1 rightround colon if x percent i12 equal equal 0 colon return False else colon return True def LC leftround i2 rightround colon if leftround i2 leftangle equal 1000 rightround colon return i2 else colon LC_main leftround i2 rightround def sum_of_digits leftround i5 rightround colon i7 equal 0 for i6 in str leftround i5 rightround colon i7 equal i7 plus int leftround i6 rightround return i7 def check_coolness leftround i4 rightround colon if leftround i4 leftangle equal 1000 rightround colon return True else colon i9 equal i4 for i8 in range leftround 2 comma sum_of_digits leftround i4 rightround rightround colon if prime leftround i8 rightround colon while leftround i9 percent i8 equal equal 0 rightround colon i9 equal i9 slash i8 if leftround i9 exclamation equal 1 rightround colon return False else colon for i10 in range leftround 0 comma 27 rightround colon if leftround leftround leftround leftround leftround sum_of_digits leftround i4 rightround minus i10 rightround rightround percent i4 rightround asterisk asterisk i10 rightround percent i4 equal equal 0 rightround colon return True return False def LC_main leftround i2 rightround colon j0 equal len leftround str leftround i2 rightround rightround minus 3 i3 equal i2 hash int leftround str leftround i2 rightround leftsquare colon 3 rightsquare rightround asterisk leftround 10 asterisk asterisk leftround j0 rightround rightround while i3 rightangle equal int leftround str leftround i2 rightround leftsquare colon 3 rightsquare rightround asterisk leftround 10 asterisk asterisk leftround j0 rightround rightround colon if check_coolness leftround i3 rightround colon return i3 i3 equal i3 minus 1 return i3 plus 1 def UC_main leftround i11 rightround colon j0 equal len leftround str leftround i11 rightround rightround minus 3 i12 equal i11 plus 1 while i12 leftangle equal leftround int leftround str leftround i11 rightround leftsquare colon 3 rightsquare rightround plus 1 rightround asterisk leftround 10 asterisk asterisk leftround j0 rightround rightround colon if check_coolness leftround i12 rightround colon return i12 i12 equal i12 plus 1 return i12 minus 1 for las in i0 colon print LC_main leftround las rightround comma UC_main leftround las rightround
0,for t in xrange leftround int leftround raw_input leftround rightround rightround rightround colon n comma m equal map leftround int comma raw_input leftround rightround period split leftround rightround rightround ngh equal leftcurly rightcurly cyc equal leftcurly rightcurly dis equal leftcurly rightcurly for i in range leftround n plus 1 rightround colon ngh leftsquare i rightsquare equal leftsquare rightsquare cyc leftsquare i rightsquare equal False for i in range leftround m rightround colon a comma b comma w equal map leftround int comma raw_input leftround rightround period split leftround rightround rightround ngh leftsquare a rightsquare period append leftround leftround b comma w rightround rightround dis leftsquare leftround a comma b rightround rightsquare equal w start comma end equal map leftround int comma raw_input leftround rightround period split leftround rightround rightround path equal leftsquare rightsquare def dfs leftround s comma e comma vis rightround colon hash print s comma e comma vis comma s minus quotation rightangle s minus quotation comma vis equal vis leftsquare colon rightsquare plus leftsquare s rightsquare if leftround s equal equal e rightround colon hash print d minus quotation path added d minus quotation comma path period append leftround vis rightround hash print vis for ng comma w in ngh leftsquare s rightsquare colon if ng not in vis colon dfs leftround ng comma e comma vis rightround else colon cyc leftsquare s rightsquare equal True dfs leftround start comma end comma leftsquare rightsquare rightround hash print path hash print cyc def discyc leftround e comma f comma w comma v rightround colon ans equal float leftround s minus quotation inf s minus quotation rightround v plus equal leftsquare e rightsquare for ng comma wt in ngh leftsquare e rightsquare colon if leftround ng equal equal f rightround colon return w plus wt if leftround ng not in v rightround colon ans equal min leftround ans comma discyc leftround ng comma f comma wt plus w comma v rightround rightround return ans l equal leftsquare rightsquare for p in path colon curr equal 0 for i in range leftround len leftround p rightround minus 1 rightround colon if leftround cyc leftsquare p leftsquare i rightsquare rightsquare rightround colon l period append leftround discyc leftround p leftsquare i rightsquare comma p leftsquare i rightsquare comma 0 comma leftsquare rightsquare rightround rightround curr plus equal dis leftsquare leftround p leftsquare i rightsquare comma p leftsquare i plus 1 rightsquare rightround rightsquare hash print leftsquare leftround p leftsquare i rightsquare comma p leftsquare i plus 1 rightsquare rightround rightsquare comma dis leftsquare leftround p leftsquare i rightsquare comma p leftsquare i plus 1 rightsquare rightround rightsquare if leftround cyc leftsquare p leftsquare minus 1 rightsquare rightsquare rightround colon l period append leftround discyc leftround p leftsquare minus 1 rightsquare comma p leftsquare minus 1 rightsquare comma 0 comma leftsquare rightsquare rightround rightround l period append leftround curr slash float leftround len leftround p rightround minus 1 rightround rightround hash print l if leftround len leftround l rightround equal equal 0 rightround colon print minus 1 else colon print min leftround l rightround
0,nCr equal leftsquare leftsquare 0 for x in xrange leftround 1001 rightround rightsquare for x in xrange leftround 1001 rightround rightsquare for i in range leftround 0 comma 1001 rightround colon nCr leftsquare i rightsquare leftsquare 0 rightsquare equal 1 nCr leftsquare i rightsquare leftsquare i rightsquare equal 1 for i in range leftround 1 comma 1001 rightround colon for j in range leftround 1 comma 1001 rightround colon if i exclamation equal j colon nCr leftsquare i rightsquare leftsquare j rightsquare equal nCr leftsquare i minus 1 rightsquare leftsquare j rightsquare plus nCr leftsquare i minus 1 rightsquare leftsquare j minus 1 rightsquare t equal input leftround rightround for _ in range leftround 0 comma t rightround colon s comma n comma m comma k equal map leftround int comma raw_input leftround rightround period split leftround s minus quotation s minus quotation rightround rightround y equal 0 if s equal equal n colon print leftround d minus quotation 1 period 000000 d minus quotation rightround continue if leftround k rightangle m or k rightangle n rightround colon print leftround d minus quotation 0 period 000000 d minus quotation rightround continue total equal float leftround nCr leftsquare s minus 1 rightsquare leftsquare n minus 1 rightsquare rightround if m rightangle n colon z equal m else colon z equal n for i in range leftround k comma z rightround colon y plus equal leftround leftround nCr leftsquare m minus 1 rightsquare leftsquare i rightsquare rightround asterisk leftround nCr leftsquare s minus m rightsquare leftsquare n minus i minus 1 rightsquare rightround rightround print d minus quotation percent period 6f d minus quotation percent leftround float leftround y slash total rightround rightround
0,import sys import logging import copy import heapq import cProfile from math import asterisk class Map colon def __init__ leftround self rightround colon self period map equal leftsquare rightsquare def read_map leftround self comma f rightround colon size_d equal f period readline leftround rightround period split leftround rightround self period height equal int leftround size_d leftsquare 0 rightsquare rightround self period width equal int leftround size_d leftsquare 1 rightsquare rightround hash logging period info leftround d minus quotation Size colon percent s x percent s d minus quotation comma self period height comma self period width rightround for i in range leftround 0 comma self period height rightround colon self period map period extend leftround list leftround f period readline leftround rightround period strip leftround rightround rightround rightround self period chef_pos equal self period map period index leftround s minus quotation at s minus quotation rightround hash logging period info leftround d minus quotation Chef pos colon percent d d minus quotation comma self period chef_pos rightround self period spoon_pos equal self period map period index leftround s minus quotation doller s minus quotation rightround hash logging period info leftround d minus quotation Spoon pos colon percent d d minus quotation comma self period spoon_pos rightround self period min_est_cache equal leftsquare None rightsquare asterisk len leftround self period map rightround def build_neighbour_list leftround self rightround colon size equal len leftround self period map rightround self period neighbours equal size asterisk leftsquare None rightsquare h equal self period height w equal self period width hash Corners self period neighbours leftsquare 0 rightsquare equal leftsquare 1 comma w comma w plus 1 rightsquare ne equal w minus 1 self period neighbours leftsquare ne rightsquare equal leftsquare ne minus 1 comma ne plus w comma ne plus w minus 1 rightsquare sw equal size minus w self period neighbours leftsquare sw rightsquare equal leftsquare sw plus 1 comma sw minus w comma sw minus w plus 1 rightsquare se equal size minus 1 self period neighbours leftsquare se rightsquare equal leftsquare se minus 1 comma se minus w comma se minus w minus 1 rightsquare hash Top row for i in range leftround 1 comma w minus 1 rightround colon self period neighbours leftsquare i rightsquare equal leftsquare i minus 1 comma i plus 1 comma i plus w minus 1 comma i plus w comma i plus w plus 1 rightsquare hash Bottom row for i in range leftround size minus w plus 1 comma size minus 1 rightround colon self period neighbours leftsquare i rightsquare equal leftsquare i minus 1 comma i plus 1 comma i minus w minus 1 comma i minus w comma i minus w plus 1 rightsquare hash Left and right columns for i in range leftround 1 comma h minus 1 rightround colon l equal i asterisk w r equal leftround i plus 1 rightround asterisk w minus 1 self period neighbours leftsquare l rightsquare equal leftsquare l minus w comma l plus w comma leftround l plus 1 rightround minus w comma leftround l plus 1 rightround comma leftround l plus 1 rightround plus w rightsquare self period neighbours leftsquare r rightsquare equal leftsquare r minus w comma r plus w comma leftround r minus 1 rightround minus w comma leftround r minus 1 rightround comma leftround r minus 1 rightround plus w rightsquare for i in xrange leftround size rightround colon if not self period neighbours leftsquare i rightsquare colon self period neighbours leftsquare i rightsquare equal leftsquare i minus w minus 1 comma i minus w comma i minus w plus 1 comma i minus 1 comma i plus 1 comma i plus w minus 1 comma i plus w comma i plus w plus 1 rightsquare def print_map leftround self rightround colon for n in range leftround self period height rightround colon i equal n asterisk self period width print self period map leftsquare i colon i plus self period width rightsquare def get_neighbours leftround self comma pos rightround colon return self period neighbours leftsquare pos rightsquare hash Map of distans to monsters comma refined as necessary def init_monster_dist_map leftround self rightround colon self period monsters equal leftsquare rightsquare d equal leftcurly s minus quotation D s minus quotation colon 0 comma s minus quotation at s minus quotation colon None comma s minus quotation doller s minus quotation colon None comma s minus quotation period s minus quotation colon None rightcurly for x in xrange leftround len leftround self period map rightround rightround colon data equal d leftsquare self period map leftsquare x rightsquare rightsquare if data equal equal 0 colon self period monsters period append leftround x rightround self period map leftsquare x rightsquare equal data self period dist_map_level equal 0 self period next_dist_set equal self period monsters def build_monster_dist_map leftround self comma level rightround colon while self period next_dist_set and self period dist_map_level leftangle equal level colon poslist equal self period next_dist_set self period next_dist_set equal set leftround rightround for pos in poslist colon if not self period map leftsquare pos rightsquare colon self period map leftsquare pos rightsquare equal self period dist_map_level else colon self period map leftsquare pos rightsquare equal min leftround self period dist_map_level comma self period map leftsquare pos rightsquare rightround for p in self period get_neighbours leftround pos rightround colon if self period map leftsquare p rightsquare equal equal None colon self period next_dist_set period add leftround p rightround self period dist_map_level equal self period dist_map_level plus 1 hash Optimistic estimate for distance to spoon def get_min_est leftround self comma pos rightround colon cache equal self period min_est_cache leftsquare pos rightsquare if cache colon return cache w equal self period width y equal pos slash w x equal pos percent w ys equal self period spoon_pos slash w xs equal self period spoon_pos percent w yd equal abs leftround ys minus y rightround xd equal abs leftround xs minus x rightround est equal yd if yd rightangle xs else xd self period min_est_cache leftsquare pos rightsquare equal est return est hash Depth first comma using heuristics comma fastest when solution exists def solve3 leftround self comma min_monster_dist rightround colon dmap equal self period width asterisk self period height asterisk leftsquare None rightsquare h equal leftsquare rightsquare nodes_checked equal 0 d equal self period get_min_est leftround self period chef_pos rightround nodes equal set leftround rightround semicolon heapq period heappush leftround h comma leftround d comma self period chef_pos rightround rightround nodes period add leftround self period chef_pos rightround chef_monster_dist equal self period map leftsquare self period chef_pos rightsquare if chef_monster_dist exclamation equal None and chef_monster_dist leftangle min_monster_dist colon return False while h colon leftround d comma pos rightround equal heapq period heappop leftround h rightround nodes_checked equal nodes_checked plus 1 if pos equal equal self period spoon_pos colon logging period debug leftround d minus quotation Nodes checked colon percent d d minus quotation comma nodes_checked rightround return True hash Switch to breadth first if no quick solution found if nodes_checked rightangle len leftround self period map rightround slash 8 colon return self period solve2 leftround min_monster_dist rightround dmap leftsquare pos rightsquare equal True nbl equal self period get_neighbours leftround pos rightround for nb in nbl colon if leftround dmap leftsquare nb rightsquare equal equal None rightround and leftround self period map leftsquare nb rightsquare equal equal None or leftround self period map leftsquare nb rightsquare rightangle equal min_monster_dist rightround rightround colon dmap leftsquare nb rightsquare equal 1 d equal self period get_min_est leftround nb rightround heapq period heappush leftround h comma leftround d comma nb rightround rightround hash logging period debug leftround d minus quotation Nodes checked colon percent d d minus quotation comma nodes_checked rightround return False hash Breadth first solver comma fastest when no solution exist def solve2 leftround self comma min_monster_dist rightround colon dmap equal self period width asterisk self period height asterisk leftsquare False rightsquare nbl equal self period get_neighbours leftround self period spoon_pos rightround dist equal 1 semicolon dmap leftsquare self period spoon_pos rightsquare equal 1 if self period map leftsquare self period spoon_pos rightsquare exclamation equal None and leftround self period map leftsquare self period spoon_pos rightsquare leftangle min_monster_dist rightround colon return False changed equal True while changed colon onbl equal nbl changed equal False nbl equal set leftround rightround dist equal dist plus 1 semicolon for nb in onbl colon if nb equal equal self period chef_pos colon return True if leftround dmap leftsquare nb rightsquare equal equal False rightround and leftround self period map leftsquare nb rightsquare equal equal None or leftround self period map leftsquare nb rightsquare rightangle equal min_monster_dist rightround rightround colon changed equal True dmap leftsquare nb rightsquare equal dist for n in self period get_neighbours leftround nb rightround colon nbl period add leftround n rightround return False def solve leftround self rightround colon right equal 1000 left equal 0 best equal None for n in range leftround 0 comma right plus 1 rightround colon hash logging period info leftround d minus quotation Trying colon percent d d minus quotation comma n rightround self period build_monster_dist_map leftround n rightround if not self period solve3 leftround n rightround colon hash logging period info leftround d minus quotation Fail colon percent d d minus quotation comma n rightround return n minus 1 return def run leftround rightround colon hash logging period basicConfig leftround level equal logging period DEBUG rightround m equal Map leftround rightround m period read_map leftround sys period stdin rightround m period build_neighbour_list leftround rightround m period init_monster_dist_map leftround rightround print m period solve leftround rightround run leftround rightround hash cProfile period run leftround s minus quotation run leftround rightround s minus quotation rightround
0,import numpy as np test equal input leftround s minus quotation No of test cases colon s minus quotation rightround global n1 def check leftround y comma x rightround colon global n1 x equal float leftround x rightround m equal leftround y slash x rightround n equal 0 if m rightangle 0 colon pos equal range leftround 1 comma int leftround x rightround rightround else colon pos equal range leftround int leftround x rightround plus 1 comma 0 rightround for i in pos colon k1 equal leftround m asterisk i rightround k2 equal int leftround k1 rightround if k1 equal equal k2 colon n equal n plus 1 if n rightangle 0 colon n1 equal n1 plus 1 for l in range leftround 0 comma test rightround colon n1 equal 0 y equal input leftround s minus quotation input y colon s minus quotation rightround x1 equal input leftround s minus quotation input x1 colon s minus quotation rightround x2 equal input leftround s minus quotation input x2 colon s minus quotation rightround for i in range leftround x1 comma x2 plus 1 rightround colon if i exclamation equal 0 colon check leftround y comma i rightround else colon n1 equal n1 plus 1 print n1
0,import pysco psyco period full leftround rightround kitchen equal leftsquare rightsquare result equal leftsquare rightsquare tresult equal leftsquare rightsquare final equal leftsquare rightsquare n equal 0 k equal 0 if __name__ equal equal s minus quotation __main__ s minus quotation colon leftround n comma k rightround equal map leftround lambda v colon int leftround v rightround comma raw_input leftround rightround period split leftround s minus quotation s minus quotation rightround rightround i equal 0 while leftround i leftangle n rightround colon kitchen period append leftround leftsquare rightsquare rightround kitchen leftsquare i rightsquare equal map leftround lambda v colon int leftround v rightround comma raw_input leftround rightround period split leftround s minus quotation s minus quotation rightround rightround j equal 0 result period append leftround leftsquare rightsquare rightround while leftround j leftangle n minus k plus 1 rightround colon result leftsquare i rightsquare period append leftround min leftround kitchen leftsquare i rightsquare leftsquare j colon j plus k rightsquare rightround rightround j plus equal 1 i plus equal 1 i equal 0 while leftround i leftangle len leftround result leftsquare 0 rightsquare rightround rightround colon tresult period append leftround leftsquare rightsquare rightround j equal 0 while leftround j leftangle len leftround result rightround rightround colon tresult leftsquare i rightsquare period append leftround result leftsquare j rightsquare leftsquare i rightsquare rightround j plus equal 1 i plus equal 1 i equal 0 while leftround i leftangle len leftround tresult rightround rightround colon i plus equal 1 final period append leftround leftsquare rightsquare rightround i equal 0 while leftround i leftangle len leftround tresult rightround rightround colon j equal 0 while leftround j leftangle len leftround tresult rightround rightround colon final leftsquare j rightsquare period append leftround min leftround tresult leftsquare i rightsquare leftsquare j colon j plus k rightsquare rightround rightround j plus equal 1 i plus equal 1 i equal 0 while leftround i leftangle len leftround tresult rightround rightround colon j equal 0 while leftround j leftangle len leftround tresult rightround rightround colon print leftround final leftsquare i rightsquare leftsquare j rightsquare rightround comma j plus equal 1 print i plus equal 1
0,T equal input leftround rightround for _ in xrange leftround T rightround colon m comma p equal map leftround float comma raw_input leftround rightround period strip leftround rightround period split leftround rightround rightround ans equal 1e9 asterisk leftround 1 minus leftround minus p rightround asterisk asterisk m rightround slash leftround 1 plus p rightround print d minus quotation percent period 11lf percent period 11lf d minus quotation percent leftround ans comma 1e9 minus ans rightround
0,hash hash Observations hash hash 1 period The problem is asking us for the following quantity Q leftround n rightround leftround munged slightly comma see below rightround hash hash Q leftround n rightround equal leftround number of pos integers leftangle equal n with 1 divisor rightround exclamation asterisk leftround num of pos integers leftangle equal n with 2 divisors rightround exclamation asterisk period period period hash hash 2 period The two modifications we need to make to Q leftround n rightround are hash hash minus minus We need Q leftround n rightround minus 1 comma not Q leftround n rightround hash hash minus minus we need to take the modulus mod 50009 hash hash 3 period We can relate Q leftround n rightround to Q leftround n minus 1 rightround in the following way hash hash minus minus Lets say that n has k divisors hash hash minus minus Lets say that m positive integers strictly less than k also had k divisors period hash hash minus minus We claim Q leftround n rightround equal Q leftround n minus 1 rightround asterisk leftround m plus 1 rightround period This can be seen by examining the form above and noting that the hash hash expansion above for Q leftround n minus 1 rightround will contain a m exclamation while the expantion for Q leftround n rightround will contain a hash hash leftround m plus 1 rightround exclamation equal leftround m plus 1 rightround asterisk m exclamation period The other terms are the same period hash hash 4 period It still seems a bit daunting that we have a recurrence to find Q leftround n rightround comma but n is allowed to range all hash hash the way to 2 comma 000 comma 000 comma 000 exclamation exclamation We really have 2 daunting problems here colon hash hash minus minus How to efficiently calculate the number of divisors in n for large n hash hash minus minus How to clip off the recursion to something tolerable hash hash 5 period For the first problem comma we can divide this into two parts colon hash hash minus minus Coming up with a list of primes to use to test n hash hash minus minus Figuring out how to use that list of primes to figure out how many divisors are in an integer hash hash 6 period As far as coming up with a list of primes comma we only need a list of primes up to about 15000 to test hash hash an integer n up to 2 comma 000 comma 000 comma 000 leftround since comma if n is composite comma one of the factors must be leftangle equal sqrt leftround n rightround rightround period hash hash To create this list comma we can use a sieve of erastothenes period We only have to iterate up to primes leftangle equal 125 or so comma hash hash since by similar logic above comma we only have to sieve on the sqrt leftround rightround of the size of the sieve period hash hash 7 period Now that we have a list of primes leftangle equal 15 comma 000 comma we need an efficient way to figure out how many divisors hash hash an integer has period Assuming we are doing this recursively comma this seems like a reasonable approach leftround without hash hash having to create a sizable data structure for storing prime factorizations of every number rightround hash hash minus minus Iterate through the primes until we find one that divides n leftround if none do comma then n is prime rightround hash hash minus minus Use that prime p to deconstruct n leftround by repeated division rightround to n equal p hat k asterisk residual where residual is not divisible by p hash hash minus minus The number of divisors of n is then leftround k plus 1 rightround asterisk the number of divisors of the residual hash hash 8 period Once one of the equivalence classes hits 500009 members leftround 500009 is indeed prime rightround comma we can stop comma since the results after that will simply be Q leftround k rightround equal 0 mod 500009 period hash hash A quick offline check using the functions sieve leftround rightround and divisors leftround rightround below helps us find when this is so we can budget period hash hash def main leftround rightround colon hash hash primelist equal sieve leftround 2000 rightround hash hash divlist equal leftsquare 0 rightsquare asterisk 4000001 hash hash divcount equal leftcurly 1 colon 1 rightcurly hash hash divlist leftsquare 1 rightsquare equal 1 hash hash for k in xrange leftround 2 comma 4000001 rightround colon hash hash ndiv equal divisors leftround k comma primelist comma divlist rightround hash hash divcount leftsquare ndiv rightsquare equal divcount period get leftround ndiv comma 0 rightround plus 1 hash hash if leftround divcount leftsquare ndiv rightsquare equal equal 500009 rightround colon print d minus quotation FOUND 500009 colon k equal percent d d minus quotation percent k hash hash if k percent 1000 equal equal 0 colon hash hash ll equal sorted leftround divcount period items leftround rightround comma key equal lambda x colon leftround minus 1 asterisk x leftsquare 1 rightsquare comma x leftsquare 0 rightsquare rightround rightround hash hash print d minus quotation k equal percent s comma Top 5 eq classes percent s percent s percent s percent s percent s d minus quotation percent leftround k comma ll leftsquare 0 rightsquare comma ll leftsquare 1 rightsquare comma ll leftsquare 2 rightsquare comma ll leftsquare 3 rightsquare comma ll leftsquare 4 rightsquare rightround hash hash The magic number is colon 2229283 hash hash 9 period Scaling down our numbers colon hash hash Only need primes up to 2000 for 4000000 leftround a bit of overkill comma but whatever rightround hash hash We size our arrays to an even 2 period 3mil def sieve leftround n rightround colon ss equal leftsquare 0 rightsquare asterisk 2 plus leftsquare 1 rightsquare asterisk leftround n minus 1 rightround semicolon i equal 2 semicolon while leftround i asterisk i leftangle n rightround colon if leftround ss leftsquare i rightsquare equal equal 1 rightround colon for k in xrange leftround 2 asterisk i comma n plus 1 comma i rightround colon ss leftsquare k rightsquare equal 0 i plus equal 1 semicolon primelist equal leftsquare k for k in range leftround 2 comma n plus 1 rightround if ss leftsquare k rightsquare equal equal 1 rightsquare return primelist def divisors leftround n comma primelist comma divlist rightround colon for p in primelist colon if p asterisk p rightangle n colon break if leftround p equal equal n rightround colon divlist leftsquare n rightsquare equal 2 return 2 if leftround n percent p equal equal 0 rightround colon junkn equal n junkn slash equal p count equal 1 semicolon while leftround junkn percent p equal equal 0 rightround colon junkn slash equal p count plus equal 1 divlist leftsquare n rightsquare equal leftround count plus 1 rightround asterisk divlist leftsquare junkn rightsquare return divlist leftsquare n rightsquare divlist leftsquare n rightsquare equal 2 return 2 def domore leftround lastn comma n comma primelist comma divlist comma divcount comma qlist rightround colon for k in xrange leftround lastn plus 1 comma n plus 1 rightround colon ndiv equal divisors leftround k comma primelist comma divlist rightround divcount leftsquare ndiv rightsquare equal divcount period get leftround ndiv comma 0 rightround plus 1 qlist leftsquare k rightsquare equal qlist leftsquare k minus 1 rightsquare asterisk divcount leftsquare ndiv rightsquare percent 500009 import sys filein equal sys period stdin hash hash filein equal open leftround d minus quotation bbsystem period in d minus quotation comma s minus quotation r s minus quotation rightround filell equal filein period readlines leftround rightround f equal filell period __iter__ leftround rightround outbuf equal leftsquare rightsquare def main leftround rightround colon primelist equal sieve leftround 2000 rightround divlist equal leftsquare 0 rightsquare asterisk 2300001 qlist equal leftsquare 0 rightsquare asterisk 2300001 qlist leftsquare 1 rightsquare equal 1 divcount equal leftcurly 1 colon 1 rightcurly divlist leftsquare 1 rightsquare equal 1 donesofar equal 1 t equal int leftround f period next leftround rightround rightround for tt in xrange leftround t rightround colon n equal int leftround f period next leftround rightround rightround if n rightangle 2300000 colon outbuf period append leftround d minus quotation 500008 d minus quotation rightround continue if n rightangle donesofar colon domore leftround donesofar comma n comma primelist comma divlist comma divcount comma qlist rightround donesofar equal n outbuf period append leftround d minus quotation percent d d minus quotation percent leftround leftround qlist leftsquare n rightsquare minus 1 rightround percent 500009 rightround rightround print d minus quotation \n d minus quotation period join leftround outbuf rightround main leftround rightround
0,def beautyof leftround sandwich rightround colon i equal 0 beauty equal 0 l equal len leftround sandwich rightround while i leftangle l colon a equal sandwich leftsquare i rightsquare pow equal 1 while i leftangle l minus 1 and sandwich leftsquare i plus 1 rightsquare equal equal a colon i plus equal 1 pow plus equal 1 i plus equal 1 beauty plus equal pow asterisk asterisk 2 return beauty N comma K equal map leftround int comma raw_input leftround rightround period split leftround rightround rightround sandwich equal raw_input leftround rightround Q equal input leftround rightround for q in xrange leftround Q rightround colon newwich equal sandwich leftsquare colon rightsquare alings equal raw_input leftround rightround for aling in alings colon newwich equal newwich period replace leftround aling comma s minus quotation s minus quotation rightround print beautyof leftround newwich rightround
0,n comma k comma p equal leftsquare int leftround x rightround for x in raw_input leftround rightround period split leftround rightround rightsquare numbers equal leftsquare int leftround raw_input leftround rightround rightround for x in xrange leftround n rightround rightsquare min equal p for sum_count in xrange leftround 1 comma len leftround numbers rightround plus 1 rightround colon for x in xrange leftround 1 comma len leftround numbers rightround minus sum_count rightround colon tmp equal sum leftround numbers leftsquare x colon x plus sum_count plus 1 rightsquare rightround percent p if tmp rightangle equal k and tmp leftangle min colon min equal k print k
0,from operator import itemgetter arr equal leftsquare rightsquare n equal int leftround raw_input leftround rightround rightround for i in range leftround n rightround colon x equal list leftround map leftround str comma raw_input leftround rightround period split leftround rightround rightround rightround if len leftround x rightround equal equal 2 colon x leftsquare 0 rightsquare equal int leftround x leftsquare 0 rightsquare rightround arr period append leftround leftround x leftsquare 0 rightsquare comma x leftsquare 1 rightsquare rightround rightround else colon b equal min leftround arr comma key equal itemgetter leftround 0 rightround rightround counter equal 0 hash print arr comma b leftsquare 0 rightsquare for j in range leftround len leftround arr rightround minus 1 comma minus 1 comma minus 1 rightround colon if arr leftsquare j rightsquare leftsquare 0 rightsquare equal equal b leftsquare 0 rightsquare colon break arr period pop leftround rightround counter plus equal 1 print counter comma arr leftsquare minus 1 rightsquare leftsquare 1 rightsquare
0,hash exclamation slash usr slash bin slash python num_cases equal int leftround raw_input leftround rightround rightround for i in range leftround num_cases rightround colon print d minus quotation case d minus quotation comma i comma d minus quotation N d minus quotation
0,import math def F leftround n comma x rightround colon count equal 0 while leftround n percent x equal equal 0 rightround colon count equal count plus 1 n equal n slash x return count T equal input leftround rightround while leftround T rightangle 0 rightround colon res equal 0 x equal raw_input leftround rightround x equal x period split leftround d minus quotation d minus quotation rightround array equal raw_input leftround rightround array equal array period split leftround d minus quotation d minus quotation rightround iarray equal leftsquare 0 rightsquare asterisk int leftround x leftsquare 0 rightsquare rightround for i in range leftround int leftround x leftsquare 0 rightsquare rightround rightround colon iarray leftsquare i rightsquare equal leftsquare F leftround int leftround array leftsquare i rightsquare rightround comma 2 rightround comma F leftround int leftround array leftsquare i rightsquare rightround comma 5 rightround rightsquare for j in range leftround int leftround x leftsquare 1 rightsquare rightround rightround colon S equal raw_input leftround rightround S equal S period split leftround d minus quotation d minus quotation rightround if leftround S leftsquare 0 rightsquare equal equal s minus quotation 1 s minus quotation rightround colon for i in range leftround int leftround S leftsquare 1 rightsquare rightround minus 1 comma int leftround S leftsquare 2 rightsquare rightround rightround colon t equal F leftround int leftround S leftsquare 3 rightsquare rightround comma 2 rightround f equal F leftround int leftround S leftsquare 3 rightsquare rightround comma 5 rightround iarray leftsquare i rightsquare leftsquare 0 rightsquare equal iarray leftsquare i rightsquare leftsquare 0 rightsquare plus t iarray leftsquare i rightsquare leftsquare 1 rightsquare equal iarray leftsquare i rightsquare leftsquare 1 rightsquare plus f elif leftround S leftsquare 0 rightsquare equal equal s minus quotation 2 s minus quotation rightround colon for i in range leftround int leftround S leftsquare 1 rightsquare rightround minus 1 comma int leftround S leftsquare 2 rightsquare rightround rightround colon t equal F leftround leftround i minus int leftround S leftsquare 1 rightsquare rightround plus 2 rightround asterisk int leftround S leftsquare 3 rightsquare rightround comma 2 rightround f equal F leftround leftround i minus int leftround S leftsquare 1 rightsquare rightround plus 2 rightround asterisk int leftround S leftsquare 3 rightsquare rightround comma 5 rightround iarray leftsquare i rightsquare leftsquare 0 rightsquare equal t iarray leftsquare i rightsquare leftsquare 1 rightsquare equal f else colon t equal 0 f equal 0 for i in range leftround int leftround S leftsquare 1 rightsquare rightround minus 1 comma int leftround S leftsquare 2 rightsquare rightround rightround colon t equal t plus iarray leftsquare i rightsquare leftsquare 0 rightsquare f equal f plus iarray leftsquare i rightsquare leftsquare 1 rightsquare res equal res plus min leftround t comma f rightround print res T equal T minus 1
0,C equal leftsquare leftsquare 0 for x in xrange leftround 100 rightround rightsquare for x in xrange leftround 100 rightround rightsquare def dp leftround rightround colon for i in range leftround 100 rightround colon for j in range leftround min leftround 99 comma i rightround rightround colon if j equal equal 0 or j equal equal i colon C leftsquare i rightsquare leftsquare j rightsquare equal 1 else colon C leftsquare i rightsquare leftsquare j rightsquare equal C leftsquare i minus 1 rightsquare leftsquare j minus 1 rightsquare plus C leftsquare i minus 1 rightsquare leftsquare j rightsquare semicolon def work leftround r comma c comma g rightround colon maxUsed equal minus 1 ans equal leftsquare rightsquare x equal r y equal c while C leftsquare x rightsquare leftsquare y rightsquare leftangle g colon x equal x plus 1 if x equal equal 100 colon x equal 99 semicolon break semicolon while C leftsquare x rightsquare leftsquare y rightsquare rightangle g colon x equal x minus 1 semicolon if x leftangle 0 colon x equal 0 semicolon break semicolon if C leftsquare x rightsquare leftsquare y rightsquare equal equal g colon print 1 print g return semicolon ans plus equal leftsquare C leftsquare x rightsquare leftsquare y rightsquare rightsquare g minus equal C leftsquare x rightsquare leftsquare y rightsquare maxUsed equal C leftsquare x rightsquare leftsquare y rightsquare y equal y minus 1 semicolon while g rightangle 0 colon while C leftsquare x rightsquare leftsquare y rightsquare leftangle g and C leftsquare x rightsquare leftsquare y rightsquare leftangle equal maxUsed colon x equal x plus 1 semicolon if x equal equal 100 colon x equal 99 semicolon break semicolon while C leftsquare x rightsquare leftsquare y rightsquare rightangle g or C leftsquare x rightsquare leftsquare y rightsquare rightangle equal maxUsed colon x equal x minus 1 semicolon if x leftangle 0 colon x equal 0 semicolon break semicolon ans plus equal leftsquare C leftsquare x rightsquare leftsquare y rightsquare rightsquare g minus equal C leftsquare x rightsquare leftsquare y rightsquare semicolon y equal y minus 1 semicolon print len leftround ans rightround semicolon s equal d minus quotation d minus quotation for q in ans colon s plus equal str leftround q rightround plus d minus quotation d minus quotation print s if __name__ equal equal s minus quotation __main__ s minus quotation colon dp leftround rightround T equal int leftround raw_input leftround rightround rightround while T rightangle 0 colon T equal T minus 1 semicolon r comma c comma g equal map leftround int comma raw_input leftround rightround period split leftround rightround rightround semicolon work leftround r comma c comma g rightround exit leftround 0 rightround
0,def find_depth leftround a comma b comma m comma n comma data rightround colon d equal minus 1 k equal 1 maxx equal 100000001 minn equal minus 1 prev equal 100000001 dirr equal 0 while leftround k leftangle equal n rightround colon temp equal leftround a plus b asterisk k rightround percent m if leftround leftround dirr equal equal 0 and prev rightangle temp and temp leftangle equal maxx and temp rightangle equal minn rightround or leftround dirr equal equal 1 and leftround prev leftangle temp or prev equal equal temp rightround and temp leftangle equal maxx and temp rightangle equal minn rightround rightround colon d equal d plus 1 prev equal temp if leftround prev rightangle data rightround colon maxx equal prev dirr equal 0 else colon minn equal prev dirr equal 1 k equal k plus 1 return d t equal input leftround rightround arr equal leftsquare rightsquare for i in range leftround 0 comma t rightround colon val equal map leftround int comma raw_input leftround rightround period split leftround rightround rightround a equal val leftsquare 0 rightsquare b equal val leftsquare 1 rightsquare m equal val leftsquare 2 rightsquare n equal val leftsquare 3 rightsquare data equal leftround a plus b asterisk n rightround percent m arr period append leftround find_depth leftround a comma b comma m comma n comma data rightround rightround for i in range leftround 0 comma t rightround colon print arr leftsquare i rightsquare
0,t equal int leftround raw_input leftround rightround rightround while t rightangle 0 colon t minus equal 1 a equal list leftround raw_input leftround rightround rightround b equal list leftround raw_input leftround rightround rightround if len leftround set leftround a rightround rightround equal equal 1 colon print d minus quotation Unlucky Chef d minus quotation break cnt1 equal 0 cnt2 equal 0 for i in xrange leftround len leftround a rightround rightround colon if a leftsquare i rightsquare exclamation equal b leftsquare i rightsquare colon if a leftsquare i rightsquare equal equal s minus quotation 1 s minus quotation colon cnt1 plus equal 1 else colon cnt2 plus equal 1 print d minus quotation Lucky Chef d minus quotation print max leftround cnt1 comma cnt2 rightround
0,k equal int leftround raw_input leftround rightround rightround def power leftround n comma k rightround colon value equal 1 while k rightangle 0 colon if not k percent 2 equal equal 0 colon value equal leftround value asterisk n rightround percent 1000000009 n equal n asterisk n n equal n percent 1000000009 k equal k slash 2 return value def mod_inverse leftround n rightround colon return power leftround n comma 1000000007 rightround from math import factorial def fact leftround n rightround colon value equal 1 for i in range leftround n comma 0 comma minus 1 rightround colon value equal leftround value asterisk i rightround percent 1000000009 return value def combination leftround n comma r rightround colon if r rightangle n colon return 0 else colon return leftround fact leftround n rightround asterisk leftround leftround mod_inverse leftround fact leftround r rightround rightround asterisk mod_inverse leftround fact leftround n minus r rightround rightround rightround percent 1000000009 rightround rightround percent 1000000009 n equal power leftround 2 comma k rightround hash no of knoights strength_oneside equal n slash 2 if n equal equal 2 colon print 2 print 2 else colon for i in range leftround 1 comma n plus 1 rightround colon facto equal fact leftround strength_oneside rightround print combination leftround i minus 1 comma strength_oneside minus 1 rightround asterisk facto asterisk facto asterisk 2
0,output equal list leftround rightround prime equal list leftround rightround val equal raw_input leftround rightround t equal int leftround val rightround for i in range leftround t rightround colon nums equal list leftround rightround counter equal 0 string1 equal raw_input leftround rightround nums equal string1 period split leftround rightround a1 equal int leftround nums leftsquare 0 rightsquare rightround b1 equal int leftround nums leftsquare 1 rightsquare rightround if a1 rightangle b1 colon a equal a1 b equal b1 else colon a equal b1 b equal a1 c equal a d equal b lev1 equal 0 lev2 equal 0 while c rightangle 0 colon c equal c slash 2 lev1 equal lev1 plus 1 while d rightangle 0 colon d equal d slash 2 lev2 equal lev2 plus 1 diff equal lev1 minus lev2 while diff rightangle 0 colon a equal a slash 2 diff equal diff minus 1 counter equal counter plus 1 while True colon if a equal equal b colon break a equal a slash 2 b equal b slash 2 counter equal counter plus 2 output period append leftround counter rightround for i in range leftround t rightround colon print output leftsquare i rightsquare
0,import math list_u equal leftsquare rightsquare list_v equal leftsquare rightsquare def find_level leftround n rightround colon return int leftround math period floor leftround math period log leftround n comma 2 rightround rightround rightround plus 1 def find_lca leftround u comma v rightround colon while u exclamation equal v colon while u rightangle v colon if u percent 2 equal equal 0 colon list_u period append leftround 0 rightround else colon list_u period append leftround 1 rightround u equal u slash 2 while v rightangle u colon if v percent 2 equal equal 0 colon list_v period append leftround 0 rightround else colon list_v period append leftround 1 rightround v equal v slash 2 list_u period reverse leftround rightround list_v period reverse leftround rightround return u if __name__ equal equal d minus quotation __main__ d minus quotation colon Q equal raw_input leftround rightround Q equal int leftround Q rightround while leftround Q rightangle 0 rightround colon Q minus equal 1 del list_u leftsquare colon rightsquare del list_v leftsquare colon rightsquare ans equal 0 n_u_v equal raw_input leftround rightround n comma u comma v equal n_u_v period split leftround rightround n equal int leftround n rightround u equal int leftround u rightround v equal int leftround v rightround lca equal find_lca leftround u comma v rightround n_level equal find_level leftround n rightround lca_level equal find_level leftround lca rightround u_level equal find_level leftround u rightround v_level equal find_level leftround v rightround max_diff_level equal max leftround u_level minus lca_level comma v_level minus lca_level rightround ans plus equal 2 asterisk asterisk leftround n_level minus max_diff_level minus 1 rightround minus 1 complex_level equal n_level minus max_diff_level start equal 2 asterisk asterisk leftround complex_level minus 1 rightround end equal 2 asterisk asterisk leftround complex_level rightround for i in xrange leftround start comma end rightround colon tmp equal i for item in list_u colon tmp equal tmp asterisk 2 plus item if tmp rightangle n colon break if tmp rightangle n colon break tmp equal i for item in list_v colon tmp equal tmp asterisk 2 plus item if tmp rightangle n colon break if tmp rightangle n colon break else colon ans plus equal 1 print ans
0,hash cook your code here import math t equal int leftround raw_input leftround rightround rightround while leftround t rightround colon n comma k equal raw_input leftround rightround period split leftround rightround n equal int leftround n rightround k equal int leftround k rightround mod1 equal 1000000007 ans equal 0 ans equal leftround pow leftround k minus 1 comma n minus 1 comma mod1 rightround asterisk k rightround percent mod1 print ans t equal t minus 1
0,hash exclamation slash usr slash bin slash python N comma K equal raw_input leftround rightround period split leftround s minus quotation s minus quotation rightround hash Scanning N and K N equal int leftround N rightround hash Changing data types of N and K leftround because I scanned N and K as strings rightround K equal int leftround K rightround hash d minus quotation d minus quotation ans equal leftsquare rightsquare hash This list contains the optimal product of leftround max of A and max of B rightround i period e ans leftsquare i rightsquare represents the minimum hash for reaching step 0 to step i V equal leftsquare rightsquare hash This list is just for storing A comma B as a tuple i period e V leftsquare i rightsquare equal leftround a_i comma a_i rightround for n in range leftround N rightround colon hash Scanning a_i comma b_i and appending them to V as a tuple leftround a_i comma b_i rightround a comma b equal raw_input leftround rightround period split leftround s minus quotation s minus quotation rightround a equal int leftround a rightround b equal int leftround b rightround V period append leftround leftround a comma b rightround rightround ans period append leftround V leftsquare 0 rightsquare leftsquare 0 rightsquare asterisk V leftsquare 0 rightsquare leftsquare 1 rightsquare rightround hash this is straight answer comma because ans leftsquare 0 rightsquare is simply product of a0 and a0 period hash hash hash step leftround 1 rightround hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash i equal 1 hash In below loop I have iterated from i equal 1 to i equal K minus 1 and solved for ans leftsquare i rightsquare period As an example let us take given hash test case leftround 1 comma 5 rightround comma leftround 2 comma 4 rightround comma leftround 3 comma 3 rightround comma leftround 4 comma 2 rightround comma leftround 5 comma 1 rightround here K is 3 comma by step leftround 1 rightround ans leftsquare 0 rightsquare is 1 asterisk 5 equal 5 period Now to find ans leftsquare 1 rightsquare hash we have two ways one is directly to block 1 and second is through block 0 and then block 1 in each hash case I calculated the product comma and min product is stored in ans leftsquare 1 rightsquare comma i period e the two possible products are hash 2 asterisk 4 equal 8 and 5 asterisk 4 equal 20 So I stored ans leftsquare 1 rightsquare equal 8 and now for i equal 2 we have 3 cases period period period period and evaluated the 3 hash possible products and appended to ans leftsquare rightsquare period similarly for i leftangle equal K minus 1 while leftround i leftangle K rightround colon k equal 1 curr_a equal V leftsquare i rightsquare leftsquare 0 rightsquare curr_b equal V leftsquare i rightsquare leftsquare 1 rightsquare x equal curr_a asterisk curr_b while leftround k leftangle equal K and i minus k rightangle equal 0 rightround colon temp equal max leftround V leftsquare i minus k rightsquare leftsquare 0 rightsquare comma curr_a rightround asterisk max leftround V leftsquare i minus k rightsquare leftsquare 1 rightsquare comma curr_b rightround x equal min leftround temp comma x rightround k equal k plus 1 ans period append leftround x rightround i equal i plus 1 hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash Here in this loop I iterated from i equal K to N minus 1 period this loop does the job similarly to the above loop but hash the change is that the block i can only be reached from prev k blocks so here x is 999999999999999 hash But in the previous loop x is the product of a_i and b_i itself as block i can be reached directly period i equal K j equal 0 while leftround i leftangle N rightround colon k equal 1 curr_a equal V leftsquare i rightsquare leftsquare 0 rightsquare curr_b equal V leftsquare i rightsquare leftsquare 1 rightsquare x equal 999999999999999999999 while leftround k leftangle equal K and i minus k rightangle equal 0 rightround colon temp equal max leftround V leftsquare i minus k rightsquare leftsquare 0 rightsquare comma curr_a rightround asterisk max leftround V leftsquare i minus k rightsquare leftsquare 1 rightsquare comma curr_b rightround x equal min leftround temp comma x rightround k equal k plus 1 ans period append leftround x rightround i equal i plus 1 hash After the end of this loop period the ans list is leftsquare 5 comma 8 comma 9 comma 12 comma 10 rightsquare hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash hash in this loop I searched for last K blocks and checked for answer i period e I searched for leftsquare 9 comma 12 comma 10 rightsquare as min is 9 so hash answer is 9 i equal N minus 1 k equal 0 x equal 99999999999999999999999 while leftround k leftangle K rightround colon x equal min leftround x comma ans leftsquare i rightsquare rightround i equal i minus 1 k equal k plus 1 print x
0,def foo leftround a comma b rightround colon x equal a y equal b while y exclamation equal 0 colon r equal x percent y x equal y y equal r return leftround a slash x comma b slash x rightround em equal leftcurly 0 colon leftround 0 comma 0 rightround comma 1 colon leftround 1 comma 1 rightround comma 2 colon leftround 2 comma 1 rightround rightcurly piss equal 2 tc equal input leftround rightround for xyz in xrange leftround tc rightround colon number equal input leftround rightround mass equal max leftround piss comma number rightround if leftround mass equal equal piss rightround colon c comma d equal em leftsquare number rightsquare if d equal equal 1 colon print c else colon print d minus quotation percent d slash percent d d minus quotation percent leftround c comma d rightround else colon for i in xrange leftround piss comma number rightround colon m comma n equal em leftsquare i rightsquare o comma p equal em leftsquare i minus 1 rightsquare em leftsquare i plus 1 rightsquare equal foo leftround n asterisk p asterisk leftround leftround i plus 1 rightround asterisk asterisk 2 minus 3 asterisk i rightround plus 2 asterisk leftround i rightround asterisk m asterisk p minus n asterisk o comma leftround 2 asterisk i minus 1 rightround asterisk n asterisk p rightround piss equal number hash print em c comma d equal em leftsquare piss rightsquare if d equal equal 1 colon print c else colon print d minus quotation percent d slash percent d d minus quotation percent leftround c comma d rightround
0,def countgreater leftround a comma key comma low comma high rightround colon if low rightangle high colon return 0 if a leftsquare low rightsquare rightangle key colon return leftround high minus low plus 1 rightround elif a leftsquare high rightsquare leftangle key colon return 0 mid equal leftround low plus high rightround rightangle rightangle 1 if a leftsquare mid rightsquare rightangle key colon return leftround high minus mid plus 1 rightround plus countgreater leftround a comma key comma low comma mid minus 1 rightround elif a leftsquare mid rightsquare leftangle equal key colon return countgreater leftround a comma key comma mid plus 1 comma high rightround def countlesser leftround a comma key comma low comma high rightround colon if low rightangle high colon return 0 if a leftsquare high rightsquare leftangle key colon return leftround high minus low plus 1 rightround elif a leftsquare low rightsquare rightangle key colon return 0 mid equal leftround low plus high rightround rightangle rightangle 1 if a leftsquare mid rightsquare leftangle key colon return leftround mid minus low plus 1 rightround plus countlesser leftround a comma key comma mid plus 1 comma high rightround elif a leftsquare mid rightsquare rightangle equal key colon return countlesser leftround a comma key comma low comma mid minus 1 rightround def insert leftround a comma key comma low comma high rightround colon if high leftangle low colon a period append leftround key rightround return if low equal equal high colon if a leftsquare low rightsquare rightangle equal key colon a period insert leftround low comma key rightround elif a leftsquare low rightsquare leftangle key colon a period insert leftround low plus 1 comma key rightround return mid equal leftround low plus high rightround rightangle rightangle 1 if a leftsquare mid rightsquare leftangle equal key colon insert leftround a comma key comma low comma mid minus 1 rightround elif a leftsquare mid rightsquare rightangle key colon insert leftround a comma key comma mid plus 1 comma high rightround def delete leftround a comma key comma low comma high rightround colon mid equal leftround high plus low rightround rightangle rightangle 1 if a leftsquare mid rightsquare equal equal key colon a period pop leftround mid rightround return elif a leftsquare mid rightsquare rightangle key colon delete leftround a comma key comma low comma mid minus 1 rightround return else colon delete leftround a comma key comma mid plus 1 comma high rightround return nm equal raw_input leftround rightround x equal nm period split leftround rightround n equal int leftround x leftsquare 0 rightsquare rightround m equal int leftround x leftsquare 1 rightsquare rightround length equal 0 lst1 equal leftsquare rightsquare lst2 equal leftsquare rightsquare lst3 equal leftsquare rightsquare lst4 equal leftsquare rightsquare length equal 0 for i in range leftround m rightround colon x equal raw_input leftround rightround x equal x period split leftround rightround if len leftround x rightround equal equal 2 colon ans equal length ans1 equal countgreater leftround lst1 comma int leftround x leftsquare 1 rightsquare rightround comma 0 comma length minus 1 rightround hash print d minus quotation Count Greater in lst1 than d minus quotation comma int leftround x leftsquare 1 rightsquare rightround comma d minus quotation equal d minus quotation comma ans1 ans2 equal countlesser leftround lst2 comma int leftround x leftsquare 1 rightsquare rightround comma 0 comma length minus 1 rightround hash print d minus quotation Count lesser in lst2 than d minus quotation comma int leftround x leftsquare 1 rightsquare rightround comma d minus quotation equal d minus quotation comma ans2 print ans minus ans1 minus ans2 else colon if x leftsquare 0 rightsquare equal equal s minus quotation P s minus quotation colon insert leftround lst1 comma int leftround x leftsquare 1 rightsquare rightround comma 0 comma length minus 1 rightround insert leftround lst2 comma int leftround x leftsquare 2 rightsquare rightround comma 0 comma length minus 1 rightround lst3 period append leftround int leftround x leftsquare 1 rightsquare rightround rightround lst4 period append leftround int leftround x leftsquare 2 rightsquare rightround rightround length equal length plus 1 d minus quotation d minus quotation d minus quotation for k in range leftround length rightround colon print lst1 leftsquare k rightsquare comma print for k in range leftround length rightround colon print lst2 leftsquare k rightsquare comma print d minus quotation d minus quotation d minus quotation elif x leftsquare 0 rightsquare equal equal s minus quotation M s minus quotation colon delete leftround lst1 comma lst3 leftsquare int leftround x leftsquare 1 rightsquare rightround minus 1 rightsquare comma 0 comma length minus 1 rightround delete leftround lst2 comma lst4 leftsquare int leftround x leftsquare 1 rightsquare rightround minus 1 rightsquare comma 0 comma length minus 1 rightround insert leftround lst1 comma lst3 leftsquare int leftround x leftsquare 1 rightsquare rightround minus 1 rightsquare plus int leftround x leftsquare 2 rightsquare rightround comma 0 comma length minus 2 rightround insert leftround lst2 comma lst4 leftsquare int leftround x leftsquare 1 rightsquare rightround minus 1 rightsquare plus int leftround x leftsquare 2 rightsquare rightround comma 0 comma length minus 2 rightround d minus quotation d minus quotation d minus quotation for k in range leftround length rightround colon print lst1 leftsquare k rightsquare comma print for k in range leftround length rightround colon print lst2 leftsquare k rightsquare comma print d minus quotation d minus quotation d minus quotation
0,highest equal leftsquare rightsquare c equal 0 for i in xrange leftround len leftround arr rightround rightround colon if leftround friends leftsquare c rightsquare equal equal arr leftsquare i rightsquare leftsquare 0 rightsquare rightround colon highest period append leftround arr leftsquare i rightsquare rightround c plus equal 1 i equal 0 if c equal equal leftround len leftround friends rightround rightround colon break highest equal sorted leftround highest comma key equal itemgetter leftround 1 rightround comma reverse equal True rightround for i in highest colon sys period stdout period write leftround i leftsquare 2 rightsquare plus s minus quotation \n s minus quotation rightround c equal 0 for i in xrange leftround len leftround arr rightround rightround colon if highest leftsquare c rightsquare in arr colon arr period remove leftround highest leftsquare c rightsquare rightround c plus equal 1 i equal 0 if c equal equal leftround len leftround highest rightround rightround colon break return sorted leftround arr comma key equal itemgetter leftround 1 rightround comma reverse equal True rightround
0,a equal int leftround raw_input leftround rightround rightround for _ in xrange leftround a rightround colon h equal leftsquare rightsquare b equal map leftround int comma raw_input leftround rightround period split leftround rightround rightround c equal map leftround int comma raw_input leftround rightround period split leftround rightround rightround d equal map leftround int comma raw_input leftround rightround period split leftround rightround rightround e equal reduce leftround lambda x comma y colon x plus y comma b rightround f equal reduce leftround lambda x comma y colon x plus y comma c rightround g equal reduce leftround lambda x comma y colon x plus y comma d rightround if e percent 2 equal equal 0 colon e equal 0 if f percent 2 equal equal 0 colon f equal 0 if g percent 2 equal equal 0 colon g equal 0 for i in xrange leftround 3 rightround colon sum equal 0 sum plus equal b leftsquare i rightsquare plus c leftsquare i rightsquare plus d leftsquare i rightsquare if sum percent 2 equal equal 0 colon continue else colon h period append leftround sum rightround print max leftround e comma f comma g comma max leftround h rightround rightround
0,def maximum_balance leftround a rightround colon balance comma result equal 0 comma 0 for i in range leftround len leftround a rightround rightround colon if a leftsquare i rightsquare equal equal s minus quotation leftround s minus quotation colon balance plus equal 1 else colon balance minus equal 1 result equal max leftround result comma balance rightround s equal str leftround rightround for i in range leftround result rightround colon s plus equal s minus quotation leftround s minus quotation for i in range leftround result rightround colon s plus equal s minus quotation rightround s minus quotation return s test_cases equal int leftround raw_input leftround rightround rightround while test_cases exclamation equal 0 colon test_cases minus equal 1 string equal raw_input leftround rightround print leftround maximum_balance leftround string rightround rightround
0,t equal int leftround raw_input leftround rightround rightround while t colon n equal int leftround raw_input leftround rightround rightround a equal map leftround int comma raw_input leftround rightround period split leftround rightround rightround c equal 0 l equal leftsquare 0 rightsquare asterisk n semicolon for i in range leftround 0 comma n minus 1 rightround colon if a leftsquare i rightsquare exclamation equal a leftsquare i plus 1 rightsquare colon if l leftsquare i rightsquare equal equal 0 and l leftsquare i plus 1 rightsquare equal equal 0 colon c equal c plus 2 l leftsquare i rightsquare equal 1 l leftsquare i plus 1 rightsquare equal 1 else colon l leftsquare i rightsquare equal 1 semicolon l leftsquare i plus 1 rightsquare equal 1 semicolon c equal c plus 1 semicolon print c t equal t minus 1 semicolon
0,hash exclamation slash usr slash bin slash env python hash question from math import sqrt comma floor C equal 2 asterisk sqrt leftround 2 rightround X comma Y equal 0 comma 1 def valid leftround leftround w comma h rightround comma W comma H rightround colon return 0 leftangle equal w leftangle equal W and 0 leftangle equal h leftangle equal H def get leftround W comma H comma d comma n comma barricades rightround colon minn equal 10000 asterisk 200000 plus 1 for w in xrange leftround W plus 1 rightround colon for h in xrange leftround H plus 1 rightround colon center equal w comma h up equal w comma h plus d left equal w minus d comma h right equal w plus d comma h bottom equal w comma h minus d if not leftround valid leftround up comma W comma H rightround and valid leftround left comma W comma H rightround and valid leftround right comma W comma H rightround and valid leftround bottom comma W comma H rightround rightround colon continue up equal map leftround int comma up rightround left equal map leftround int comma left rightround right equal map leftround int comma right rightround bottom equal map leftround int comma bottom rightround cost equal 0 removes equal leftsquare rightsquare hash center comma up comma left for y in xrange leftround center leftsquare Y rightsquare comma up leftsquare Y rightsquare plus 1 rightround colon for x in xrange leftround center leftsquare X rightsquare comma left leftsquare X rightsquare plus leftround y minus center leftsquare Y rightsquare rightround minus 1 comma minus 1 rightround colon c equal barricades period get leftround leftround x comma y rightround rightround if c is None colon c equal 0 else colon del barricades leftsquare leftround x comma y rightround rightsquare removes period append leftround leftround x comma y comma c rightround rightround cost plus equal c hash center comma up comma right for y in xrange leftround center leftsquare Y rightsquare comma up leftsquare Y rightsquare plus 1 rightround colon for x in xrange leftround center leftsquare X rightsquare comma right leftsquare X rightsquare minus leftround y minus center leftsquare Y rightsquare rightround plus 1 rightround colon c equal barricades period get leftround leftround x comma y rightround rightround if c is None colon c equal 0 else colon del barricades leftsquare leftround x comma y rightround rightsquare removes period append leftround leftround x comma y comma c rightround rightround cost plus equal c hash center comma bottom comma right for y in xrange leftround center leftsquare Y rightsquare comma bottom leftsquare Y rightsquare minus 1 comma minus 1 rightround colon for x in xrange leftround center leftsquare X rightsquare comma right leftsquare X rightsquare minus leftround center leftsquare Y rightsquare minus y rightround plus 1 rightround colon c equal barricades period get leftround leftround x comma y rightround rightround if c is None colon c equal 0 else colon del barricades leftsquare leftround x comma y rightround rightsquare removes period append leftround leftround x comma y comma c rightround rightround cost plus equal c hash center comma bottom comma left for y in xrange leftround center leftsquare Y rightsquare comma bottom leftsquare Y rightsquare minus 1 comma minus 1 rightround colon for x in xrange leftround center leftsquare X rightsquare comma left leftsquare X rightsquare plus leftround center leftsquare Y rightsquare minus y rightround minus 1 comma minus 1 rightround colon c equal barricades period get leftround leftround x comma y rightround rightround if c is None colon c equal 0 else colon del barricades leftsquare leftround x comma y rightround rightsquare removes period append leftround leftround x comma y comma c rightround rightround cost plus equal c for x comma y comma c in removes colon barricades leftsquare leftround x comma y rightround rightsquare equal c minn equal min leftround minn comma cost rightround return minn def main leftround rightround colon w comma h comma d comma n equal map leftround int comma raw_input leftround rightround period split leftround rightround rightround barricades equal leftcurly rightcurly for _ in xrange leftround n rightround colon x comma y comma c equal map leftround int comma raw_input leftround rightround period split leftround rightround rightround barricades leftsquare leftround x comma y rightround rightsquare equal c print get leftround w comma h comma d comma n comma barricades rightround if __name__ equal equal s minus quotation __main__ s minus quotation colon main leftround rightround
0,hash exclamation slash usr slash bin slash env python import sys n_tests equal int leftround sys period stdin period readline leftround rightround rightround def read_test leftround f rightround colon n equal int leftround f period readline leftround rightround rightround I equal leftsquare leftsquare bool leftround int leftround v rightround rightround for v in f period readline leftround rightround period split leftround rightround rightsquare for _ in range leftround 0 comma n rightround rightsquare F equal leftsquare leftsquare bool leftround int leftround v rightround rightround for v in f period readline leftround rightround period split leftround rightround rightsquare for _ in range leftround 0 comma n rightround rightsquare return n comma I comma F def is_valid leftround r comma c comma f comma i rightround colon return r hat c hat f hat i def run_test leftround f rightround colon n comma I comma F equal read_test leftround f rightround s equal leftround I leftsquare 0 rightsquare leftsquare 0 rightsquare equal equal F leftsquare 0 rightsquare leftsquare 0 rightsquare rightround R equal leftsquare i exclamation equal f for i comma f in zip leftround I leftsquare 0 rightsquare comma F leftsquare 0 rightsquare rightround rightsquare C equal leftsquare I leftsquare j rightsquare leftsquare 0 rightsquare equal equal F leftsquare j rightsquare leftsquare 0 rightsquare for j in range leftround 0 comma n rightround rightsquare if s colon C equal leftsquare leftround not c rightround for c in C rightsquare for i in range leftround 0 comma n rightround colon for j in range leftround 0 comma n rightround colon v equal is_valid leftround R leftsquare j rightsquare comma C leftsquare i rightsquare comma F leftsquare i rightsquare leftsquare j rightsquare comma I leftsquare i rightsquare leftsquare j rightsquare rightround if v colon print leftround s minus quotation minus 1 s minus quotation rightround return hash Minimize presses by either taking solution computed or negate it nr equal sum leftround R rightround nc equal sum leftround C rightround m1 equal nr plus nc m2 equal 2 asterisk n minus m1 if m1 rightangle m2 colon R equal leftsquare leftround not r rightround for r in R rightsquare C equal leftsquare leftround not c rightround for c in C rightsquare Lr equal leftsquare i for i comma f in zip leftround range leftround 0 comma n rightround comma R rightround if f rightsquare Lc equal leftsquare i for i comma f in zip leftround range leftround 0 comma n rightround comma C rightround if f rightsquare print leftround str leftround len leftround Lc rightround rightround rightround for i in Lc colon print leftround str leftround i rightround rightround print leftround str leftround len leftround Lr rightround rightround rightround for i in Lr colon print leftround str leftround i rightround rightround return for test in range leftround 0 comma n_tests rightround colon run_test leftround sys period stdin rightround
0,def main leftround rightround colon t equal int leftround raw_input leftround rightround rightround for i in range leftround t rightround colon n comma m comma k equal map leftround int comma raw_input leftround rightround period split leftround rightround rightround ai equal map leftround int comma raw_input leftround rightround period split leftround rightround rightround ai period sort leftround rightround s equal minus 1 for a in combinations leftround ai comma m rightround colon s1 equal sum leftround a rightround if s1 percent k equal equal 0 colon s equal s1 break print s def combinations leftround iterable comma r rightround colon pool equal tuple leftround iterable rightround n equal len leftround pool rightround if r rightangle n colon return indices equal range leftround r rightround yield tuple leftround pool leftsquare i rightsquare for i in indices rightround while True colon for i in reversed leftround range leftround r rightround rightround colon if indices leftsquare i rightsquare exclamation equal i plus n minus r colon break else colon return indices leftsquare i rightsquare plus equal 1 for j in range leftround i plus 1 comma r rightround colon indices leftsquare j rightsquare equal indices leftsquare j minus 1 rightsquare plus 1 yield tuple leftround pool leftsquare i rightsquare for i in indices rightround main leftround rightround
0,hash exclamation slash usr slash bin slash python2 period 7 import sys def main leftround filename rightround colon hash f equal open leftround filename comma s minus quotation ru s minus quotation rightround hash T equal int leftround f period readline leftround rightround rightround try colon T equal int leftround raw_input leftround d minus quotation T test Cases colon d minus quotation rightround rightround T equal int leftround T rightround except ValueError colon sys period exit leftround 0 rightround if T leftangle 1 or T rightangle 20 colon sys period exit leftround 0 rightround hash totlines equal f period readlines leftround rightround hash totlines period pop leftround 0 rightround while T rightangle 0 colon N equal int leftround raw_input leftround d minus quotation Enter number of notes d minus quotation rightround rightround X equal int leftround raw_input leftround d minus quotation Cost of sweets d minus quotation rightround rightround if N rightangle equal 1 and X leftangle equal 100 colon for a in range leftround 0 comma N rightround colon a equal leftsquare rightsquare z equal int leftround raw_input leftround d minus quotation enter value of note d minus quotation rightround rightround a period append leftround z rightround s equal sum leftround a rightround m equal min leftround a rightround K equal s slash X cost equal K asterisk X if leftround X rightangle 0 rightround and leftround cost rightangle leftround s minus m rightround rightround colon print K else colon print minus 1 T equal T minus 1 else colon sys period exit leftround 0 rightround if __name__ equal equal s minus quotation __main__ s minus quotation colon main leftround sys period argv leftsquare 1 rightsquare rightround
0,t equal int leftround raw_input leftround rightround rightround for k in range leftround t rightround colon s equal raw_input leftround rightround x equal s period find leftround d minus quotation W d minus quotation rightround y equal len leftround s rightround minus 1 minus x if leftround x equal equal 0 rightround colon if leftround y exclamation equal 0 rightround colon print d minus quotation Aleksa d minus quotation else colon print d minus quotation Chef d minus quotation elif leftround y equal equal 0 rightround colon if leftround x exclamation equal 0 rightround colon print d minus quotation Aleksa d minus quotation else colon print d minus quotation Chef d minus quotation elif leftround x equal equal 1 rightround colon if leftround y equal equal 1 rightround colon print d minus quotation Chef d minus quotation else colon print d minus quotation Aleksa d minus quotation else colon if leftround y equal equal 1 rightround colon print d minus quotation Aleksa d minus quotation else colon print d minus quotation Chef d minus quotation
0,t equal int leftround raw_input leftround rightround rightround for ii in range leftround t rightround colon n comma m equal raw_input leftround rightround period split leftround rightround n equal int leftround n rightround m equal int leftround m rightround if n leftangle m colon n comma m equal m comma n if n equal equal 1 or m equal equal 1 colon print n asterisk leftround n minus 1 rightround continue print leftround n asterisk m rightround asterisk leftround n asterisk m minus 1 rightround minus 4 asterisk leftround leftround n minus 1 rightround asterisk leftround m minus 2 rightround plus leftround n minus 2 rightround asterisk leftround m minus 1 rightround rightround
0,n equal raw_input leftround s minus quotation s minus quotation rightround semicolon p equal raw_input leftround s minus quotation s minus quotation rightround semicolon x equal p period split leftround rightround semicolon temp equal 0 semicolon if leftround leftround len leftround x rightround rightround equal equal int leftround n rightround rightround colon for i in range leftround int leftround n rightround rightround colon j equal 0 semicolon while leftround leftround j rightangle equal 0 rightround ampersand leftround j leftangle n rightround ampersand leftround j exclamation equal i rightround ampersand leftround j exclamation equal i plus 1 rightround ampersand leftround j exclamation equal i minus 1 rightround rightround colon price equal int leftround x leftsquare j rightsquare rightround plus int leftround x leftsquare i rightsquare rightround semicolon if leftround price rightangle temp rightround colon temp equal price semicolon j equal j plus 1 semicolon print d minus quotation Highest price colon d minus quotation comma temp semicolon else colon print d minus quotation Enter correct no period of goods d minus quotation semicolon
0,hash exclamation slash usr slash bin slash python2 from sys import stdin def readprob leftround rightround colon l equal leftsquare rightsquare n equal int leftround stdin period readline leftround rightround rightround for i in range leftround n rightround colon l period append leftround map leftround int comma stdin period readline leftround rightround period split leftround s minus quotation s minus quotation rightround rightround rightround return l def solve leftround l rightround colon s equal leftsquare rightsquare for n in range leftround 0 comma len leftround l rightround plus 1 rightround colon t equal s minus quotation s minus quotation period join leftround s minus quotation 1 s minus quotation if n rightangle equal i leftsquare 0 rightsquare and n leftangle equal i leftsquare 1 rightsquare else s minus quotation 0 s minus quotation for i in l rightround if t period count leftround s minus quotation 1 s minus quotation rightround equal equal n colon s period append leftround t rightround return s n equal int leftround stdin period readline leftround rightround rightround for i in range leftround n rightround colon l equal readprob leftround rightround s equal solve leftround l rightround print len leftround s rightround s period sort leftround rightround print s leftsquare 0 rightsquare
0,t equal int leftround raw_input leftround d minus quotation Enter no period of Test Cases colon d minus quotation rightround rightround for j in range leftround 0 comma t rightround colon n equal int leftround raw_input leftround d minus quotation Enter no period of Integers colon d minus quotation rightround rightround list equal leftsquare rightsquare for i in range leftround 0 comma n rightround colon list period append leftround int leftround raw_input leftround rightround rightround rightround while leftround 1 rightround colon c equal 0 for i in range leftround 0 comma n minus 1 rightround colon if list leftsquare i rightsquare rightangle list leftsquare i plus 1 rightsquare plus 1 colon list leftsquare i rightsquare comma list leftsquare i plus 1 rightsquare equal list leftsquare i plus 1 rightsquare comma list leftsquare i rightsquare c plus equal 1 if c equal equal 0 colon break for i in range leftround 0 comma n rightround colon print list leftsquare i rightsquare comma print d minus quotation \n d minus quotation
0,t equal int leftround raw_input leftround rightround rightround for i in range leftround 0 comma t rightround colon n comma k comma p equal raw_input leftround rightround period split leftround s minus quotation s minus quotation rightround n comma k comma p equal int leftround n rightround comma int leftround k rightround comma int leftround p rightround temp equal 1 ans equal 0 for i in range leftround 1 comma n plus 1 rightround colon temp equal i for j in range leftround 0 comma k minus 1 rightround colon temp equal leftround leftround temp percent p rightround asterisk leftround i percent p rightround rightround percent p ans plus equal leftround temp rightround percent p print ans
0,import sys M equal 531169 hash Assumption is that neither a nor b is 0 def gcd leftround a comma b rightround colon if b leftangle a colon tmp equal a a equal b b equal tmp while a rightangle 1 colon tmp equal a a equal b percent a b equal tmp return b def product_modulo leftround a comma b comma m rightround colon return leftround leftround a percent m rightround asterisk leftround b percent m rightround rightround percent m def lcm_modulo leftround a comma b comma m rightround colon g equal gcd leftround a comma b rightround return product_modulo leftround product_modulo leftround a comma b comma m rightround comma ModuloInverse leftround g comma M rightround comma M rightround def BinomialCoeff leftround n comma r rightround colon if n minus r leftangle r colon r equal n minus r ans equal 1 for i in range leftround 1 comma r plus 1 rightround colon ans equal leftround ans asterisk leftround n minus i plus 1 rightround rightround ans equal leftround ans slash i rightround return ans def Power leftround n comma m rightround colon if m equal equal 0 colon return 1 p equal Power leftround n comma m slash 2 rightround if m percent 2 equal equal 1 colon return p asterisk p asterisk n else colon return p asterisk p def Power_M leftround n comma m comma M rightround colon if m equal equal 0 colon return 1 p equal Power_M leftround n comma m slash 2 comma M rightround if m percent 2 equal equal 1 colon return leftround leftround p asterisk p rightround percent M asterisk n rightround percent M else colon return leftround p asterisk p rightround percent M def ModuloInverse leftround n comma P rightround colon return Power_M leftround n comma P minus 2 comma P rightround def BinomialCoeff_M leftround n comma r comma M rightround colon if n minus r leftangle r colon r equal n minus r numerator equal 1 denominator equal 1 for i in range leftround 1 comma r plus 1 rightround colon numerator equal leftround numerator asterisk leftround n minus i plus 1 rightround rightround percent M denominator equal leftround denominator asterisk i rightround percent M d_inverse equal ModuloInverse leftround denominator comma M rightround ans equal leftround numerator asterisk d_inverse rightround percent M return ans def Solve leftround a comma b rightround colon k equal product_modulo leftround lcm_modulo leftround a comma a plus b comma M rightround comma ModuloInverse leftround a comma M rightround comma M rightround l equal product_modulo leftround product_modulo leftround a comma k comma M rightround comma ModuloInverse leftround a plus b comma M rightround comma M rightround A equal BinomialCoeff_M leftround a plus b comma a comma M rightround B equal BinomialCoeff_M leftround k comma l comma M rightround print leftround A minus B rightround percent M if __name__ equal equal d minus quotation __main__ d minus quotation colon t equal int leftround sys period stdin period readline leftround rightround rightround for i in range leftround 0 comma t rightround colon nums equal leftsquare int leftround x rightround for x in sys period stdin period readline leftround rightround period split leftround rightround rightsquare Solve leftround nums leftsquare 0 rightsquare comma nums leftsquare 1 rightsquare rightround
0,import sys semicolon def cakedoom leftround rightround colon test equal int leftround raw_input leftround rightround rightround semicolon while test rightangle 0 colon k0 equal int leftround raw_input leftround rightround rightround semicolon s equal list leftround raw_input leftround rightround rightround semicolon if len leftround s rightround equal equal 1 colon if s leftsquare 0 rightsquare equal equal s minus quotation question s minus quotation colon print s minus quotation 0 s minus quotation semicolon else colon if int leftround s leftsquare 0 rightsquare rightround leftangle k0 colon print s leftsquare 0 rightsquare semicolon else colon print d minus quotation NO d minus quotation semicolon test equal test minus 1 semicolon continue semicolon i equal 0 semicolon while leftround i leftangle len leftround s rightround rightround colon k equal i plus 1 semicolon if k equal equal len leftround s rightround colon k equal 0 semicolon if s leftsquare i rightsquare equal equal s minus quotation question s minus quotation colon b equal leftround leftround s leftsquare i minus 1 rightsquare equal equal s minus quotation 0 s minus quotation rightround ampersand leftround s leftsquare k rightsquare equal equal s minus quotation 1 s minus quotation rightround rightround pipe leftround leftround s leftsquare i minus 1 rightsquare equal equal s minus quotation 1 s minus quotation rightround ampersand leftround s leftsquare k rightsquare equal equal s minus quotation 0 s minus quotation rightround rightround semicolon if b equal equal True colon s leftsquare i rightsquare equal s minus quotation 2 s minus quotation semicolon else colon b equal leftround leftround s leftsquare i minus 1 rightsquare equal equal s minus quotation 0 s minus quotation rightround pipe leftround s leftsquare k rightsquare equal equal s minus quotation 0 s minus quotation rightround rightround semicolon if b equal equal True colon s leftsquare i rightsquare equal s minus quotation 1 s minus quotation semicolon else colon s leftsquare i rightsquare equal s minus quotation 0 s minus quotation semicolon i equal i plus 1 semicolon ans equal d minus quotation d minus quotation semicolon i equal 0 semicolon while i leftangle len leftround s rightround colon ans equal ans plus s leftsquare i rightsquare semicolon i equal i plus 1 semicolon i equal 0 semicolon flag equal 0 semicolon while i leftangle len leftround s rightround colon k equal i plus 1 semicolon if k equal equal len leftround s rightround colon k equal 0 semicolon if leftround s leftsquare i rightsquare equal equal s leftsquare k rightsquare rightround pipe leftround int leftround s leftsquare i rightsquare rightround rightangle equal k0 rightround colon flag equal 1 semicolon break semicolon i equal i plus 1 semicolon if flag equal equal 1 colon ans equal d minus quotation NO d minus quotation semicolon print ans semicolon test equal test minus 1 semicolon if __name__ equal equal d minus quotation __main__ d minus quotation colon cakedoom leftround rightround semicolon sys period exit leftround rightround semicolon
0,n equal int leftround raw_input leftround rightround rightround while n exclamation equal minus 1 colon l equal leftsquare rightsquare sum equal 0 for i in range leftround n rightround colon a equal int leftround raw_input leftround rightround rightround l period append leftround a rightround sum plus equal a if sum percent n exclamation equal 0 colon print s minus quotation minus 1 s minus quotation else colon count equal 0 avg equal sum slash n for i in l colon if i rightangle avg colon count plus equal i minus avg print count n equal int leftround raw_input leftround rightround rightround
0,for _ in xrange leftround input leftround rightround rightround colon r comma c equal map leftround int comma raw_input leftround rightround period split leftround rightround rightround a equal leftsquare list leftround raw_input leftround rightround rightround for _ in range leftround r rightround rightsquare tot equal 0 for i in range leftround r rightround colon for j in range leftround c rightround colon if a leftsquare i rightsquare leftsquare j rightsquare exclamation equal s minus quotation hat s minus quotation colon continue L equal 0 for k in range leftround i minus 1 comma minus 1 comma minus 1 rightround colon if a leftsquare k rightsquare leftsquare j rightsquare equal equal s minus quotation hash s minus quotation colon break L plus equal 1 R equal 0 for k in range leftround i plus 1 comma r comma 1 rightround colon if a leftsquare k rightsquare leftsquare j rightsquare equal equal s minus quotation hash s minus quotation colon break R plus equal 1 T equal 0 for k in range leftround j minus 1 comma minus 1 comma minus 1 rightround colon if a leftsquare i rightsquare leftsquare k rightsquare equal equal s minus quotation hash s minus quotation colon break T plus equal 1 B equal 0 for k in range leftround j plus 1 comma c comma 1 rightround colon if a leftsquare i rightsquare leftsquare k rightsquare equal equal s minus quotation hash s minus quotation colon break B plus equal 1 fi equal min leftround L comma T comma B comma R rightround if fi rightangle equal 2 colon tot plus equal 1 print leftround tot rightround
0,hash exclamation slash usr slash bin slash env python hash minus asterisk minus coding colon UTF minus 8 minus asterisk minus primes equal leftsquare 2 comma 3 comma 5 comma 7 comma 11 comma 13 comma 17 comma 19 comma 23 comma 29 comma 31 comma 37 comma 41 comma 43 comma 47 comma 53 comma 59 comma 61 comma 67 comma 71 comma 73 comma 79 comma 83 comma 89 comma 97 comma 101 comma 103 comma 107 comma 109 comma 113 comma 127 comma 131 comma 137 comma 139 comma 149 comma 151 comma 157 comma 163 comma 167 comma 173 comma 179 comma 181 comma 191 comma 193 comma 197 comma 199 comma 211 comma 223 comma 227 comma 229 comma 233 comma 239 comma 241 comma 251 rightsquare primes_length equal len leftround primes rightround rows equal 0 columns equal 0 def binary_search_prime leftround n comma s equal 0 comma e equal primes_length minus 1 rightround colon if n leftangle primes leftsquare s rightsquare or e leftangle s colon return 0 if n rightangle equal primes leftsquare e rightsquare colon return e plus 1 hash number of primes under n m equal leftround s plus e rightround slash 2 if n leftangle primes leftsquare m rightsquare colon return binary_search_prime leftround n comma s comma m minus 1 rightround else colon return binary_search_prime leftround n comma m comma e minus 1 rightround def count_monsters leftround rightround colon global rows comma columns rows comma columns equal map leftround int comma raw_input leftround rightround period split leftround rightround rightround matrix equal leftsquare rightsquare hash every row is a bitmap represent hash or hat for _ in range leftround rows rightround colon bits equal raw_input leftround rightround period replace leftround s minus quotation hash s minus quotation comma s minus quotation 0 s minus quotation rightround period replace leftround s minus quotation hat s minus quotation comma s minus quotation 1 s minus quotation rightround matrix period append leftround int leftround bits comma 2 rightround rightround sum equal 0 for i in range leftround rows rightround colon for j in range leftround columns rightround colon sum plus equal cpc leftround matrix comma i comma j rightround return sum def compute leftround matrix comma i comma j rightround colon l equal 0 k equal leftround columns minus j rightround mask equal 1 leftangle leftangle k while leftround matrix leftsquare i rightsquare ampersand mask rightround rightangle 0 colon l plus equal 1 k plus equal 1 mask equal 1 leftangle leftangle k r equal 0 k equal leftround columns minus j minus 2 rightround while k rightangle equal 0 and leftround matrix leftsquare i rightsquare ampersand leftround 1 leftangle leftangle k rightround rightround rightangle 0 colon r plus equal 1 k minus equal 1 t equal 0 k equal i minus 1 mask equal 1 leftangle leftangle leftround columns minus j minus 1 rightround while k rightangle equal 0 and leftround matrix leftsquare k rightsquare ampersand mask rightround rightangle 0 colon t plus equal 1 k minus equal 1 b equal 0 k equal i plus 1 mask equal 1 leftangle leftangle leftround columns minus j minus 1 rightround while k leftangle rows and leftround matrix leftsquare k rightsquare ampersand mask rightround rightangle 0 colon b plus equal 1 k plus equal 1 return leftround l comma r comma t comma b rightround def cpc leftround matrix comma i comma j rightround colon d minus quotation cpc prime of a cell d minus quotation if matrix leftsquare i rightsquare ampersand leftround 1 leftangle leftangle leftround columns minus j minus 1 rightround rightround equal equal 0 colon return 0 l comma r comma t comma b equal compute leftround matrix comma i comma j rightround return binary_search_prime leftround min leftround l comma r comma t comma b rightround rightround def main leftround rightround colon rounds equal int leftround raw_input leftround rightround rightround for _ in range leftround rounds rightround colon print count_monsters leftround rightround if __name__ equal equal s minus quotation __main__ s minus quotation colon main leftround rightround
0,T equal int leftround raw_input leftround rightround rightround while T colon N equal int leftround raw_input leftround rightround rightround L equal leftsquare int leftround i rightround for i in raw_input leftround rightround period split leftround rightround rightsquare semicolon L period sort leftround rightround semicolon count equal 0 for i in range leftround len leftround L rightround minus 1 comma 0 comma minus 1 rightround colon if L leftsquare i minus 1 rightsquare exclamation equal L leftsquare i rightsquare colon count plus equal leftround L leftsquare i rightsquare minus L leftsquare i minus 1 rightsquare rightround print count plus 1 semicolon T minus equal 1
0,n comma m equal map leftround int comma raw_input leftround rightround period split leftround d minus quotation d minus quotation rightround rightround card equal leftsquare rightsquare for i in range leftround n rightround colon card period append leftround i plus 1 rightround for i in range leftround m rightround colon A comma B comma C equal map leftround int comma raw_input leftround rightround period split leftround d minus quotation d minus quotation rightround rightround a equal card leftsquare colon A rightsquare card equal card leftsquare A colon rightsquare b equal card leftsquare colon B rightsquare card equal card leftsquare B colon rightsquare card equal a plus card c equal card leftsquare colon C rightsquare card equal card leftsquare C colon rightsquare b period reverse leftround rightround card equal b plus card card equal c plus card for i in range leftround n rightround colon print card leftsquare i rightsquare comma
0,hash trying phi ki sequence period a equal leftcurly rightcurly hash a stores min x for each n to get to Nx equal 1 a leftsquare 2 rightsquare equal 1 a leftsquare 3 rightsquare equal 2 a leftsquare 4 rightsquare equal 2 def f leftround n rightround colon global a if not a period has_key leftround n rightround colon a leftsquare n rightsquare equal f leftround phi leftround n rightround rightround return a leftsquare n rightsquare def sieve leftround n rightround colon j equal 2 k equal 0 yolist equal leftsquare 1 rightsquare asterisk n while j asterisk asterisk 2 leftangle n colon k equal j asterisk asterisk 2 while k leftangle n colon yolist leftsquare k rightsquare equal 0 k plus equal j j plus equal 1 while yolist leftsquare j rightsquare equal equal 0 colon j plus equal 1 return yolist def primelist leftround l rightround colon i equal 3 ans equal leftsquare 2 rightsquare sieve_n equal sieve leftround l rightround while i leftangle l colon if sieve_n leftsquare i rightsquare colon ans period append leftround i rightround i plus equal 1 return ans hash print primelist leftround 19 rightround theseprimes equal primelist leftround 100000 rightround totalp equal len leftround theseprimes rightround def phi leftround n rightround colon ans equal n ith equal 0 while ith leftangle totalp and theseprimes leftsquare ith rightsquare leftangle leftround n plus 3 rightround slash 2 colon elem equal theseprimes leftsquare ith rightsquare if n percent elem equal equal 0 colon ans asterisk equal leftround elem minus 1 rightround ans slash equal elem ith plus equal 1 if ans equal equal n colon return leftround n minus 1 rightround else colon return ans hash pfac has all prime factors of n period hash print phi leftround 30 rightround hash print phi leftround 7 rightround hash print phi leftround 12 rightround noCases equal int leftround raw_input leftround rightround rightround x equal 0 while x leftangle noCases colon n equal int leftround raw_input leftround rightround rightround y equal 0 n1 equal 1 while y leftangle n colon strPK equal raw_input leftround rightround pk equal strPK period split leftround rightround p equal int leftround pk leftsquare 0 rightsquare rightround k equal int leftround pk leftsquare 1 rightsquare rightround n1 asterisk equal leftround p minus 1 rightround n1 asterisk equal pow leftround p comma k minus 1 rightround y plus equal 1 hash n1 is phi leftround n rightround print 1 plus f leftround n1 rightround x plus equal 1
0,for _ in range leftround int leftround raw_input leftround rightround rightround rightround colon n equal int leftround raw_input leftround rightround rightround c equal list leftround map leftround int comma raw_input leftround rightround period strip leftround rightround period split leftround rightround rightround rightround count equal 0 for i in range leftround len leftround c rightround minus 1 comma 0 comma minus 1 rightround colon if c leftsquare i minus 1 rightsquare rightangle c leftsquare i rightsquare colon count plus equal 1 print count plus 1
0,string1 equal raw_input leftround rightround t equal int leftround string1 rightround for i in range leftround t rightround colon memory equal list leftround rightround string3 equal raw_input leftround rightround n equal int leftround string3 rightround string2 equal raw_input leftround rightround nums1 equal string2 period split leftround rightround for j in range leftround n rightround colon memory period append leftround int leftround nums1 leftsquare j rightsquare rightround rightround counter equal memory leftsquare 0 rightsquare for j in range leftround 1 comma n rightround colon if memory leftsquare j rightsquare rightangle memory leftsquare j minus 1 rightsquare colon counter equal counter plus memory leftsquare j rightsquare minus memory leftsquare j minus 1 rightsquare print counter
0,hash exclamation slash usr slash bin slash python mod equal 1000000007 hash import psyco hash psyco period full leftround rightround def matrix_mult leftround A comma B rightround colon C equal leftsquare leftsquare 0 comma 0 comma 0 rightsquare comma leftsquare 0 comma 0 comma 0 rightsquare comma leftsquare 0 comma 0 comma 0 rightsquare rightsquare for i in range leftround 3 rightround colon for j in range leftround 3 rightround colon for k in range leftround 3 rightround colon C leftsquare i rightsquare leftsquare k rightsquare equal leftround C leftsquare i rightsquare leftsquare k rightsquare plus A leftsquare i rightsquare leftsquare j rightsquare asterisk B leftsquare j rightsquare leftsquare k rightsquare rightround if leftround C leftsquare i rightsquare leftsquare k rightsquare rightangle 1000000007 rightround colon C leftsquare i rightsquare leftsquare k rightsquare equal C leftsquare i rightsquare leftsquare k rightsquare percent 1000000007 return C def matrix_mult_1 leftround A comma B rightround colon C equal leftsquare leftsquare 0 comma 0 rightsquare comma leftsquare 0 comma 0 rightsquare rightsquare for i in range leftround 2 rightround colon for j in range leftround 2 rightround colon for k in range leftround 2 rightround colon C leftsquare i rightsquare leftsquare k rightsquare equal leftround C leftsquare i rightsquare leftsquare k rightsquare plus A leftsquare i rightsquare leftsquare j rightsquare asterisk B leftsquare j rightsquare leftsquare k rightsquare rightround percent 1000000007 return C def matrix_mult_4 leftround A comma B rightround colon C equal leftsquare leftsquare 0 comma 0 comma 0 comma 0 comma 0 rightsquare comma leftsquare 0 comma 0 comma 0 comma 0 comma 0 rightsquare comma leftsquare 0 comma 0 comma 0 comma 0 comma 0 rightsquare comma leftsquare 0 comma 0 comma 0 comma 0 comma 0 rightsquare comma leftsquare 0 comma 0 comma 0 comma 0 comma 0 rightsquare rightsquare for i in range leftround 5 rightround colon for j in range leftround 5 rightround colon for k in range leftround 5 rightround colon C leftsquare i rightsquare leftsquare k rightsquare equal leftround C leftsquare i rightsquare leftsquare k rightsquare plus A leftsquare i rightsquare leftsquare j rightsquare asterisk B leftsquare j rightsquare leftsquare k rightsquare rightround if leftround C leftsquare i rightsquare leftsquare k rightsquare rightangle 1000000007 rightround colon C leftsquare i rightsquare leftsquare k rightsquare equal C leftsquare i rightsquare leftsquare k rightsquare percent 1000000007 return C def matrix_mult_5 leftround A comma B rightround colon C equal leftsquare rightsquare for i in range leftround 9 rightround colon C period append leftround leftsquare 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 rightsquare rightround for i in range leftround 9 rightround colon for j in range leftround 9 rightround colon for k in range leftround 9 rightround colon C leftsquare i rightsquare leftsquare k rightsquare equal leftround C leftsquare i rightsquare leftsquare k rightsquare plus A leftsquare i rightsquare leftsquare j rightsquare asterisk B leftsquare j rightsquare leftsquare k rightsquare rightround if leftround C leftsquare i rightsquare leftsquare k rightsquare rightangle 1000000007 rightround colon C leftsquare i rightsquare leftsquare k rightsquare equal C leftsquare i rightsquare leftsquare k rightsquare percent 1000000007 return C def matrix_mult_6 leftround A comma B rightround colon C equal leftsquare rightsquare for i in range leftround 18 rightround colon C period append leftround leftsquare 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 rightsquare rightround for i in range leftround 18 rightround colon for j in range leftround 18 rightround colon for k in range leftround 18 rightround colon hash if leftround A leftsquare i rightsquare leftsquare j rightsquare rightangle mod rightround colon hash A leftsquare i rightsquare leftsquare j rightsquare equal A leftsquare i rightsquare leftsquare j rightsquare percent mod hash elif leftround B leftsquare j rightsquare leftsquare k rightsquare rightangle mod rightround colon hash B leftsquare j rightsquare leftsquare k rightsquare equal B leftsquare j rightsquare leftsquare k rightsquare percent mod C leftsquare i rightsquare leftsquare k rightsquare equal leftround C leftsquare i rightsquare leftsquare k rightsquare plus A leftsquare i rightsquare leftsquare j rightsquare asterisk B leftsquare j rightsquare leftsquare k rightsquare rightround hash if leftround C leftsquare i rightsquare leftsquare k rightsquare rightangle mod rightround colon C leftsquare i rightsquare leftsquare k rightsquare equal C leftsquare i rightsquare leftsquare k rightsquare percent mod return C def fast_exp leftround A comma n comma flag rightround colon if n equal equal 1 colon return A else colon if n ampersand 1 equal equal 0 colon A1 equal fast_exp leftround A comma n slash 2 comma flag rightround if leftround flag equal equal 2 rightround colon return matrix_mult_1 leftround A1 comma A1 rightround elif leftround flag equal equal 3 rightround colon return matrix_mult leftround A1 comma A1 rightround elif leftround flag equal equal 4 rightround colon return matrix_mult_4 leftround A1 comma A1 rightround elif leftround flag equal equal 5 rightround colon return matrix_mult_5 leftround A1 comma A1 rightround elif leftround flag equal equal 6 rightround colon return matrix_mult_6 leftround A1 comma A1 rightround else colon A1 equal fast_exp leftround A comma n minus 1 comma flag rightround if leftround flag equal equal 2 rightround colon return matrix_mult_1 leftround A comma A1 rightround elif leftround flag equal equal 3 rightround colon return matrix_mult leftround A comma A1 rightround elif leftround flag equal equal 4 rightround colon return matrix_mult_4 leftround A comma A1 rightround elif leftround flag equal equal 5 rightround colon return matrix_mult_5 leftround A comma A1 rightround elif leftround flag equal equal 6 rightround colon return matrix_mult_6 leftround A comma A1 rightround def fast_pow leftround n rightround colon if n equal equal 1 colon return 2 if n equal equal 0 colon return 1 else colon if n percent 2 equal equal 0 colon ans equal fast_pow leftround n slash 2 rightround ans equal ans percent mod return leftround ans asterisk ans rightround percent mod else colon ans equal fast_pow leftround n minus 1 rightround ans equal ans percent mod return ans asterisk 2 def solve_1 leftround n rightround colon A equal leftsquare leftsquare 0 comma 1 comma 0 rightsquare comma leftsquare 0 comma 0 comma 1 rightsquare comma leftsquare 1 comma 1 comma 1 rightsquare rightsquare A_n equal fast_exp leftround A comma n minus 3 rightround return A_n leftsquare 2 rightsquare leftsquare 0 rightsquare plus A_n leftsquare 2 rightsquare leftsquare 1 rightsquare plus A_n leftsquare 2 rightsquare leftsquare 2 rightsquare asterisk 2 def solve_2 leftround n rightround colon if leftround n equal equal 1 rightround colon return 2 elif leftround n equal equal 2 rightround colon return 7 A equal leftsquare leftsquare 0 comma 1 rightsquare comma leftsquare 2 comma 3 rightsquare rightsquare A_n equal fast_exp leftround A comma n minus 2 comma 2 rightround return A_n leftsquare 1 rightsquare leftsquare 0 rightsquare asterisk 2 plus A_n leftsquare 1 rightsquare leftsquare 1 rightsquare asterisk 7 def solve_3 leftround n rightround colon A equal leftsquare leftsquare 0 comma 1 comma 0 rightsquare comma leftsquare 0 comma 0 comma 1 rightsquare comma leftsquare minus 2 comma 3 comma 6 rightsquare rightsquare if leftround n equal equal 1 rightround colon return 4 elif leftround n equal equal 2 rightround colon return 25 elif leftround n equal equal 3 rightround colon return 161 A_n equal fast_exp leftround A comma n minus 3 comma 3 rightround return A_n leftsquare 2 rightsquare leftsquare 0 rightsquare asterisk 4 plus A_n leftsquare 2 rightsquare leftsquare 1 rightsquare asterisk 25 plus A_n leftsquare 2 rightsquare leftsquare 2 rightsquare asterisk 161 def solve_4 leftround n rightround colon ans equal leftsquare 8 comma 89 comma 1033 comma 11929 comma 137845 rightsquare if leftround n leftangle equal 5 rightround colon return ans leftsquare n minus 1 rightsquare A equal leftsquare leftsquare 0 comma 1 comma 0 comma 0 comma 0 rightsquare comma leftsquare 0 comma 0 comma 1 comma 0 comma 0 rightsquare comma leftsquare 0 comma 0 comma 0 comma 1 comma 0 rightsquare comma leftsquare 0 comma 0 comma 0 comma 0 comma 1 rightsquare comma leftsquare 8 comma minus 30 comma minus 21 comma 20 comma 10 rightsquare rightsquare A_n equal fast_exp leftround A comma n minus 5 comma 4 rightround return A_n leftsquare 4 rightsquare leftsquare 0 rightsquare asterisk 8 plus A_n leftsquare 4 rightsquare leftsquare 1 rightsquare asterisk 89 plus A_n leftsquare 4 rightsquare leftsquare 2 rightsquare asterisk 1033 plus A_n leftsquare 4 rightsquare leftsquare 3 rightsquare asterisk 11929 plus A_n leftsquare 4 rightsquare leftsquare 4 rightsquare asterisk 137845 def solve_5 leftround n rightround colon ans equal leftsquare 16 comma 317 comma 6631 comma 137845 comma 2867739 comma 59655167 comma 1240971177 comma 25815151595 comma 537016650729 rightsquare if leftround n leftangle equal 9 rightround colon return ans leftsquare n minus 1 rightsquare A equal leftsquare leftsquare 0 comma 1 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 rightsquare comma leftsquare 0 comma 0 comma 1 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 rightsquare comma leftsquare 0 comma 0 comma 0 comma 1 comma 0 comma 0 comma 0 comma 0 comma 0 rightsquare comma leftsquare 0 comma 0 comma 0 comma 0 comma 1 comma 0 comma 0 comma 0 comma 0 rightsquare comma leftsquare 0 comma 0 comma 0 comma 0 comma 0 comma 1 comma 0 comma 0 comma 0 rightsquare comma leftsquare 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 1 comma 0 comma 0 rightsquare comma leftsquare 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 1 comma 0 rightsquare comma leftsquare 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 1 rightsquare comma leftsquare minus 10 comma 69 comma 29 comma minus 662 comma 790 comma 73 comma minus 278 comma 9 comma 21 rightsquare rightsquare Ab equal fast_exp leftround A comma n minus 9 comma 5 rightround return Ab leftsquare 8 rightsquare leftsquare 0 rightsquare asterisk 16 plus Ab leftsquare 8 rightsquare leftsquare 1 rightsquare asterisk 317 plus Ab leftsquare 8 rightsquare leftsquare 2 rightsquare asterisk 6631 plus Ab leftsquare 8 rightsquare leftsquare 3 rightsquare asterisk 137845 plus Ab leftsquare 8 rightsquare leftsquare 4 rightsquare asterisk 2867739 plus Ab leftsquare 8 rightsquare leftsquare 5 rightsquare asterisk 59655167 plus Ab leftsquare 8 rightsquare leftsquare 6 rightsquare asterisk 1240971177 plus Ab leftsquare 8 rightsquare leftsquare 7 rightsquare asterisk 25815151595 plus Ab leftsquare 8 rightsquare leftsquare 8 rightsquare asterisk 537016650729 def solve_6 leftround n rightround colon ans equal leftsquare 32 comma 1129 comma 42563 comma 1592731 comma 59655167 comma 2234126207 comma 83670667271 comma 3133560234217 comma 117355367786585 comma 4395090865370635 comma 164601109918978615 comma 6164497208894901477 comma 230867373009598884627 comma 8646243499452479433569 comma 323811570588787197424201 comma 12127108524504811121752257 comma 454173891617617632766031151 comma 17009324474195992258878836533 rightsquare if leftround n leftangle equal 18 rightround colon return ans leftsquare n minus 1 rightsquare for i in range leftround 18 rightround colon ans leftsquare i rightsquare equal ans leftsquare i rightsquare percent mod A equal leftsquare leftsquare 0 comma 1 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 rightsquare comma leftsquare 0 comma 0 comma 1 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 rightsquare comma leftsquare 0 comma 0 comma 0 comma 1 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 rightsquare comma leftsquare 0 comma 0 comma 0 comma 0 comma 1 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 rightsquare comma leftsquare 0 comma 0 comma 0 comma 0 comma 0 comma 1 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 rightsquare comma leftsquare 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 1 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 rightsquare comma leftsquare 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 1 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 rightsquare comma leftsquare 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 1 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 rightsquare comma leftsquare 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 1 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 rightsquare comma leftsquare 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 1 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 rightsquare comma leftsquare 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 1 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 rightsquare comma leftsquare 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 1 comma 0 comma 0 comma 0 comma 0 comma 0 rightsquare comma leftsquare 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 1 comma 0 comma 0 comma 0 comma 0 rightsquare comma leftsquare 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 1 comma 0 comma 0 comma 0 rightsquare comma leftsquare 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 1 comma 0 comma 0 rightsquare comma leftsquare 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 1 comma 0 rightsquare comma leftsquare 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 0 comma 1 rightsquare rightsquare A period append leftround leftsquare 28 comma minus 622 comma 3386 comma 6203 comma minus 70276 comma 38077 comma 355981 comma minus 410368 comma minus 499260 comma 751787 comma 154999 comma minus 396016 comma 27152 comma 50702 comma minus 3905 comma minus 2391 comma 120 comma 36 rightsquare rightround Ab equal fast_exp leftround A comma n minus 18 comma 6 rightround hash print len leftround ans rightround finalans equal 0 for i in range leftround 18 rightround colon finalans equal finalans plus leftround leftround Ab leftsquare 17 rightsquare leftsquare i rightsquare percent mod rightround asterisk ans leftsquare i rightsquare rightround percent mod if leftround finalans rightangle mod rightround colon finalans percent mod return finalans inp equal raw_input leftround rightround inp equal inp period split leftround rightround hash print inp leftsquare 0 rightsquare comma inp leftsquare 1 rightsquare inp leftsquare 0 rightsquare equal int leftround inp leftsquare 0 rightsquare rightround semicolon inp leftsquare 1 rightsquare equal int leftround inp leftsquare 1 rightsquare rightround semicolon if leftround inp leftsquare 0 rightsquare equal equal 1 rightround colon if leftround inp leftsquare 1 rightsquare equal equal 1 rightround colon print 2 else colon print fast_pow leftround inp leftsquare 1 rightsquare rightround percent mod elif leftround inp leftsquare 0 rightsquare equal equal 2 rightround colon print leftround solve_2 leftround inp leftsquare 1 rightsquare rightround asterisk 2 rightround percent mod elif leftround inp leftsquare 0 rightsquare equal equal 3 rightround colon print leftround solve_3 leftround inp leftsquare 1 rightsquare rightround asterisk 2 rightround percent mod elif leftround inp leftsquare 0 rightsquare equal equal 4 rightround colon print leftround solve_4 leftround inp leftsquare 1 rightsquare rightround asterisk 2 rightround percent mod elif leftround inp leftsquare 0 rightsquare equal equal 5 rightround colon print leftround solve_5 leftround inp leftsquare 1 rightsquare rightround asterisk 2 rightround percent mod elif leftround inp leftsquare 0 rightsquare equal equal 6 rightround colon print leftround solve_6 leftround inp leftsquare 1 rightsquare rightround asterisk 2 rightround percent mod
1,nan
1,hash Read in the number of test cases t equal int leftround input leftround rightround rightround hash Loop through each test case for i in range leftround t rightround colon hash Read in the number of hints given by Johnny k equal int leftround input leftround rightround rightround hash Initialize variables to keep track of the lower and upper bounds for n lower_bound equal 0 upper_bound equal 10 asterisk asterisk 9 hash Initialize a variable to keep track of the number of lies Johnny told lies equal 0 hash Loop through each hint for j in range leftround k rightround colon hash Read in the hint hint equal input leftround rightround period split leftround rightround hash Extract the operator comma value comma and logical value from the hint operator equal hint leftsquare 0 rightsquare value equal int leftround hint leftsquare 1 rightsquare rightround logical_value equal hint leftsquare 2 rightsquare hash If the hint is a lie comma Johnny must have given a false positive if logical_value equal equal d minus quotation Yes d minus quotation colon lies plus equal 1 hash Update the lower or upper bound based on the operator if operator equal equal d minus quotation leftangle d minus quotation colon upper_bound equal min leftround upper_bound comma value minus 1 rightround elif operator equal equal d minus quotation rightangle d minus quotation colon lower_bound equal max leftround lower_bound comma value plus 1 rightround else colon lower_bound equal max leftround lower_bound comma value rightround upper_bound equal min leftround upper_bound comma value rightround hash If the hint is not a lie comma update the lower or upper bound based on the operator else colon if operator equal equal d minus quotation leftangle d minus quotation colon lower_bound equal max leftround lower_bound comma value rightround elif operator equal equal d minus quotation rightangle d minus quotation colon upper_bound equal min leftround upper_bound comma value rightround else colon lower_bound equal max leftround lower_bound comma value plus 1 rightround upper_bound equal min leftround upper_bound comma value minus 1 rightround hash Print the minimum number of lies Johnny told print leftround lies rightround
1,hash t個のテストケースを処理する t equal int leftround input leftround rightround rightround for i in range leftround t rightround colon hash nとkを読み込む n comma k equal map leftround int comma input leftround rightround period split leftround rightround rightround hash nのk桁を表す数字を計算する divisor equal 10 asterisk asterisk k hash nの最後のk桁を計算する last_k_digits equal n percent divisor hash nの最初のk桁を計算する first_k_digits equal n slash slash divisor hash 最初のk桁と最後のk桁を出力する print leftround first_k_digits comma last_k_digits
1,n comma m equal map leftround int comma input leftround rightround period split leftround rightround rightround hash 街のすべての道路を保存するリスト streets equal leftsquare rightsquare hash 街のすべての道路を読み込む for i in range leftround n rightround colon x1 comma y1 comma x2 comma y2 equal map leftround int comma input leftround rightround period split leftround rightround rightround streets period append leftround leftround x1 comma y1 comma x2 comma y2 rightround rightround hash 最終的な答えを保存する変数 result equal 0 hash ピザパーラーをすべて確認する for i in range leftround m rightround colon x comma y comma r equal map leftround int comma input leftround rightround period split leftround rightround rightround hash 前のピザパーラーの結果をxorで計算する if i rightangle 0 colon x hat equal result
1,from collections import deque def minimum_steps_to_unify leftround t comma test_cases rightround colon hash t colon int comma the number of test cases hash test_cases colon list of tuple comma containing the description of the cities of Byteland hash each tuple contains two elements colon hash minus int comma the number of cities in Byteland hash minus list of int comma a road connecting cities having numbers i plus 1 and p in Byteland results equal leftsquare rightsquare for test_case in test_cases colon k comma roads equal test_case hash 各市が属する国を示すリスト countries equal leftsquare i for i in range leftround k rightround rightsquare hash 国を統一するために必要なステップ数 steps equal 0 while len leftround set leftround countries rightround rightround rightangle 1 colon hash 各市が属する国を統一することができる市を見つける for i comma road in enumerate leftround roads rightround colon if countries leftsquare i rightsquare exclamation equal countries leftsquare road rightsquare colon steps plus equal 1 hash 統一する市を見つけた場合は、それらを統一する for j comma c in enumerate leftround countries rightround colon if c equal equal countries leftsquare road rightsquare colon countries leftsquare j rightsquare equal countries leftsquare i rightsquare hash 統一したので、breakして次のステップに進む break results period append leftround steps rightround return results hash test t equal 3 test_cases equal leftsquare leftround 4 comma leftsquare 0 comma 1 comma 2 rightsquare rightround comma leftround 8 comma leftsquare 0 comma 1 comma 2 comma 0 comma 0 comma 3 comma 3 rightsquare rightround comma leftround 9 comma leftsquare 0 comma 1 comma 1 comma 1 comma 1 comma 0 comma 2 comma 2 rightsquare rightround comma rightsquare print leftround minimum_steps_to_unify leftround t comma test_cases rightround rightround hash expect leftsquare 2 comma 4 comma 5 rightsquare
1,def maximize_hamming_distance leftround x colon str comma y colon str rightround minus rightangle str colon n equal len leftround x rightround z equal leftsquare s minus quotation s minus quotation rightsquare asterisk n for i in range leftround n rightround colon hash If the characters at this position in x and y are different comma hash we can set the character at this position in z to be the one that is different from both x and y if x leftsquare i rightsquare exclamation equal y leftsquare i rightsquare colon z leftsquare i rightsquare equal s minus quotation W s minus quotation if x leftsquare i rightsquare equal equal s minus quotation B s minus quotation else s minus quotation B s minus quotation hash If the characters at this position in x and y are the same comma hash we can set the character at this position in z to be the one that is different from x else colon z leftsquare i rightsquare equal s minus quotation W s minus quotation if x leftsquare i rightsquare equal equal s minus quotation B s minus quotation else s minus quotation B s minus quotation return s minus quotation s minus quotation period join leftround z rightround hash Test the function with the example from the prompt print leftround maximize_hamming_distance leftround s minus quotation WBWB s minus quotation comma s minus quotation WBBB s minus quotation rightround rightround hash Expected output colon d minus quotation BWBW d minus quotation
1,def main leftround rightround colon t equal int leftround input leftround rightround rightround for _ in range leftround t rightround colon n equal int leftround input leftround rightround rightround cards equal 0 while n rightangle 0 colon cards plus equal 1 n slash slash equal 2 print leftround cards rightround main leftround rightround
1,T equal int leftround input leftround rightround rightround for _ in range leftround T rightround colon n comma m equal map leftround int comma input leftround rightround period split leftround rightround rightround heights equal list leftround map leftround int comma input leftround rightround period split leftround rightround rightround rightround mean equal sum leftround heights rightround slash n cubes_needed equal 0 for i in range leftround n rightround colon diff equal int leftround heights leftsquare i rightsquare rightround minus mean if diff rightangle 0 colon cubes_needed plus equal diff if cubes_needed leftangle equal m colon print leftround d minus quotation Yes d minus quotation rightround else colon print leftround d minus quotation No d minus quotation rightround
1,def microcontroller_freeze leftround T comma test_cases rightround colon hash T colon int comma number of test cases hash test_cases colon list of tuples comma each tuple containing two elements colon hash minus N colon int comma number of sensors hash minus frequencies colon list of ints comma frequencies of measurements for each sensor hash returns colon list of ints comma time in milliseconds until the microcontroller freezes for each test case hash Initialize the result list result equal leftsquare rightsquare hash Iterate over the test cases for case in test_cases colon N comma frequencies equal case hash Find the least common multiple of the frequencies lcm equal frequencies leftsquare 0 rightsquare for i in range leftround 1 comma N rightround colon lcm equal lcm asterisk frequencies leftsquare i rightsquare slash slash math period gcd leftround lcm comma frequencies leftsquare i rightsquare rightround hash Append the least common multiple to the result list result period append leftround lcm rightround return result
1,def generate_password leftround n rightround colon hash Initialize the password with n plus 1 empty lines password equal leftsquare leftsquare rightsquare for _ in range leftround n plus 1 rightround rightsquare hash Draw the first line from leftround 0 comma 0 rightround to leftround n comma 0 rightround password leftsquare 0 rightsquare equal leftsquare leftround 0 comma 0 rightround comma leftround n comma 0 rightround rightsquare hash Loop through the remaining lines for i in range leftround 1 comma n plus 1 rightround colon hash Draw the line from leftround i comma 0 rightround to leftround i comma n rightround password leftsquare i rightsquare equal leftsquare leftround i comma 0 rightround comma leftround i comma n rightround rightsquare hash Return the password return password hash Test the function with some examples print leftround generate_password leftround 3 rightround rightround
1,hash Read the letters that Jeff knows letters equal input leftround rightround period strip leftround rightround hash Read the number of words in the book num_words equal int leftround input leftround rightround period strip leftround rightround rightround hash Read each word in the book and check if Jeff can read it for i in range leftround num_words rightround colon word equal input leftround rightround period strip leftround rightround can_read equal True for letter in word colon if letter not in letters colon can_read equal False break if can_read colon print leftround d minus quotation Yes d minus quotation rightround else colon print leftround d minus quotation No d minus quotation rightround
1,def longest_alternating_subarray leftround n comma arr rightround colon hash Initialize the result array with 1s res equal leftsquare 1 rightsquare asterisk n hash Loop through the array comma starting from the second element for i in range leftround 1 comma n rightround colon hash If the current element has a different sign than the previous element comma hash update the result for the current position to be the result for the hash previous position plus 1 if leftround arr leftsquare i rightsquare rightangle 0 and arr leftsquare i minus 1 rightsquare leftangle 0 rightround or leftround arr leftsquare i rightsquare leftangle 0 and arr leftsquare i minus 1 rightsquare rightangle 0 rightround colon res leftsquare i rightsquare equal res leftsquare i minus 1 rightsquare plus 1 hash Return the result array return res hash Test the function with some examples print leftround longest_alternating_subarray leftround 4 comma leftsquare 1 comma 2 comma 3 comma 4 rightsquare rightround rightround hash Should print leftsquare 1 comma 1 comma 1 comma 1 rightsquare print leftround longest_alternating_subarray leftround 4 comma leftsquare 1 comma minus 5 comma 1 comma minus 5 rightsquare rightround rightround hash Should print leftsquare 4 comma 3 comma 2 comma 1 rightsquare print leftround longest_alternating_subarray leftround 6 comma leftsquare minus 5 comma minus 1 comma minus 1 comma 2 comma minus 2 comma minus 3 rightsquare rightround rightround hash Should print leftsquare 1 comma 1 comma 3 comma 2 comma 1 comma 1 rightsquare
1,def is_fibonacci leftround n rightround colon hash Initialize the first two Fibonacci numbers a comma b equal 0 comma 1 hash Loop until we find a Fibonacci number greater than n while b leftangle equal n colon hash If we find a match comma return d minus quotation YES d minus quotation if b equal equal n colon return d minus quotation YES d minus quotation hash Otherwise comma calculate the next Fibonacci number a comma b equal b comma a plus b hash If we reach here comma it means we have not found a Fibonacci number hash that is equal to n comma so return d minus quotation NO d minus quotation return d minus quotation NO d minus quotation hash Test the function with some examples print leftround is_fibonacci leftround 3 rightround rightround hash Should print d minus quotation YES d minus quotation print leftround is_fibonacci leftround 4 rightround rightround hash Should print d minus quotation NO d minus quotation print leftround is_fibonacci leftround 5 rightround rightround hash Should print d minus quotation YES d minus quotation
1,hash Read the number of test cases t equal int leftround input leftround rightround rightround hash Iterate over the test cases for _ in range leftround t rightround colon hash Read the number of soldiers and the weapons they are holding n equal int leftround input leftround rightround rightround weapons equal list leftround map leftround int comma input leftround rightround period split leftround rightround rightround rightround hash Count the number of soldiers holding even and odd number of weapons even_count equal sum leftround leftsquare 1 for w in weapons if w percent 2 equal equal 0 rightsquare rightround odd_count equal sum leftround leftsquare 1 for w in weapons if w percent 2 equal equal 1 rightsquare rightround hash Check if the number of soldiers holding even number of weapons is greater than the number of soldiers holding odd number of weapons if even_count rightangle odd_count colon print leftround d minus quotation READY FOR BATTLE d minus quotation rightround else colon print leftround d minus quotation NOT READY d minus quotation rightround
1,MOD equal 1000000007 def solve leftround n comma a rightround colon hash Find the gcd of all elements in a g equal a leftsquare 0 rightsquare for i in range leftround 1 comma n rightround colon g equal gcd leftround g comma a leftsquare i rightsquare rightround hash Calculate the product of all gcd of all possible subsets of a ans equal 1 for i in range leftround n plus 1 rightround colon ans equal leftround ans asterisk g rightround percent MOD return ans hash Function to calculate gcd of two numbers def gcd leftround a comma b rightround colon if b equal equal 0 colon return a return gcd leftround b comma a percent b rightround hash Test cases test_cases equal leftsquare leftsquare 1 comma leftsquare 1 rightsquare rightsquare comma leftsquare 2 comma leftsquare 1 comma 2 rightsquare rightsquare comma leftsquare 3 comma leftsquare 1 comma 2 comma 2 rightsquare rightsquare comma rightsquare for test_case in test_cases colon n equal test_case leftsquare 0 rightsquare a equal test_case leftsquare 1 rightsquare print leftround solve leftround n comma a rightround rightround
1,def solve leftround n comma k rightround colon hash If k is 0 comma then we can simply permute the soldiers in increasing order hash to attack the forts period if k equal equal 0 colon return leftsquare i for i in range leftround 1 comma n plus 1 rightround rightsquare hash If k is greater than n comma then we cannot destroy any fort period if k rightangle n colon return minus 1 hash Otherwise comma we can permute the soldiers in the following way colon hash leftsquare k plus 1 comma k plus 2 comma period period period comma n comma 1 comma 2 comma period period period comma k rightsquare permutation equal leftsquare i for i in range leftround k plus 1 comma n plus 1 rightround rightsquare plus leftsquare i for i in range leftround 1 comma k plus 1 rightround rightsquare return permutation hash Test the solution assert solve leftround 2 comma 2 rightround equal equal minus 1 assert solve leftround 3 comma 0 rightround equal equal leftsquare 1 comma 2 comma 3 rightsquare assert solve leftround 3 comma 1 rightround equal equal leftsquare 2 comma 3 comma 1 rightsquare
1,def gcd leftround a comma b rightround colon hash Returns the greatest common divisor of a and b if a equal equal 0 colon return b return gcd leftround b percent a comma a rightround t equal int leftround input leftround rightround rightround for _ in range leftround t rightround colon n equal int leftround input leftround rightround rightround hash Read the array of numbers a equal list leftround map leftround int comma input leftround rightround period split leftround rightround rightround rightround hash Initialize the gcd to be the first number in the array g equal a leftsquare 0 rightsquare hash Find the gcd of all the numbers in the array for i in range leftround 1 comma n rightround colon g equal gcd leftround g comma a leftsquare i rightsquare rightround hash If the gcd is 1 comma then all the numbers will be 1 after the operations hash Otherwise comma the gcd will be the final value if g equal equal 1 colon print leftround 1 rightround else colon print leftround g rightround
1,MOD equal 1000000009 def count_and_tuples leftround k comma n rightround colon hash Base case colon if k equal 1 comma there is only one and minus tuple if k equal equal 1 colon return 1 hash Initialize the count to zero count equal 0 hash Iterate over all possible values of the last element in the and minus tuple for i in range leftround n plus 1 rightround colon hash Calculate the count of and minus tuples of size k minus 1 with sum n minus i count plus equal count_and_tuples leftround k minus 1 comma n minus i rightround hash Take the modulo of the count count percent equal MOD hash Return the count of and minus tuples return count hash Read the number of test cases t equal int leftround input leftround rightround rightround hash Iterate over the test cases for _ in range leftround t rightround colon hash Read the values of k and n k comma n equal map leftround int comma input leftround rightround period split leftround rightround rightround hash Calculate the count of and minus tuples count equal count_and_tuples leftround k comma n rightround hash Print the count of and minus tuples print leftround count rightround
1,hash Get the input string S and the number of queries Q S equal input leftround rightround Q equal int leftround input leftround rightround rightround hash Process the queries for i in range leftround Q rightround colon hash Get the indices for the reversal and the palindrome check i comma j comma k comma l equal map leftround int comma input leftround rightround period split leftround rightround rightround hash Reverse the substring s leftsquare i colon j plus 1 rightsquare S equal S leftsquare colon i minus 1 rightsquare plus S leftsquare i minus 1 colon j plus 1 rightsquare leftsquare colon colon minus 1 rightsquare plus S leftsquare j plus 1 colon rightsquare hash Check if the substring s leftsquare k colon l plus 1 rightsquare is a palindrome if S leftsquare k minus 1 colon l plus 1 rightsquare equal equal S leftsquare k minus 1 colon l plus 1 rightsquare leftsquare colon colon minus 1 rightsquare colon print leftround d minus quotation Yes d minus quotation rightround else colon print leftround d minus quotation No d minus quotation rightround
1,from collections import Counter def find_longest_non_regular_subsequence leftround s comma k rightround colon hash Count the number of s minus quotation leftround s minus quotation and s minus quotation rightround s minus quotation characters in the sequence c equal Counter leftround s rightround hash Calculate the number of pairs of s minus quotation leftround s minus quotation and s minus quotation rightround s minus quotation characters pairs equal min leftround c leftsquare s minus quotation leftround s minus quotation rightsquare comma c leftsquare s minus quotation rightround s minus quotation rightsquare rightround hash Calculate the maximum length of a non minus regular subsequence max_len equal pairs asterisk 2 hash Find all the non minus regular subsequences of maximum length subsequences equal leftsquare rightsquare for i in range leftround len leftround s rightround minus max_len plus 1 rightround colon hash Check if the subsequence is non minus regular if s leftsquare i colon i plus max_len rightsquare period count leftround s minus quotation leftround s minus quotation rightround exclamation equal pairs or s leftsquare i colon i plus max_len rightsquare period count leftround s minus quotation rightround s minus quotation rightround exclamation equal pairs colon continue hash Add the subsequence to the list if it is non minus regular subsequences period append leftround s leftsquare i colon i plus max_len rightsquare rightround hash Sort the list of non minus regular subsequences in lexicographical order subsequences period sort leftround rightround
1,hash Read in the number of test cases T equal int leftround input leftround rightround rightround hash Loop through each test case for t in range leftround T rightround colon hash Read in the number of rectangles and the maximum number of rectangles that can be removed N comma M equal map leftround int comma input leftround rightround period split leftround rightround rightround hash Initialize a list to store the rectangles rectangles equal leftsquare rightsquare hash Read in the dimensions of each rectangle for n in range leftround N rightround colon l comma b equal map leftround int comma input leftround rightround period split leftround rightround rightround rectangles period append leftround leftround l comma b rightround rightround hash Sort the rectangles by area in descending order rectangles period sort leftround key equal lambda x colon x leftsquare 0 rightsquare asterisk x leftsquare 1 rightsquare comma reverse equal True rightround hash Initialize the total area to be the area of the first rectangle total_area equal rectangles leftsquare 0 rightsquare leftsquare 0 rightsquare asterisk rectangles leftsquare 0 rightsquare leftsquare 1 rightsquare hash Loop through the remaining rectangles for i in range leftround 1 comma N rightround colon hash If we can remove the current rectangle comma do so and subtract its area from the total if M rightangle 0 colon total_area minus equal rectangles leftsquare i rightsquare leftsquare 0 rightsquare asterisk rectangles leftsquare i rightsquare leftsquare 1 rightsquare M minus equal 1 hash Otherwise comma break out of the loop since we can s minus quotation t remove any more rectangles else colon break hash Print the total area print leftround total_area rightround
1,t equal int leftround input leftround rightround rightround for _ in range leftround t rightround colon hash Read the number of soldiers and rounds n comma m equal map leftround int comma input leftround rightround period split leftround rightround rightround hash Initialize the list of numbers shouted by each soldier numbers equal leftsquare 0 rightsquare asterisk n hash Read the positions selected in each round positions equal list leftround map leftround int comma input leftround rightround period split leftround rightround rightround rightround hash Iterate over the rounds in reverse order for i in range leftround m minus 1 comma minus 1 comma minus 1 rightround colon hash Select the position for this round p equal positions leftsquare i rightsquare hash Calculate the numbers shouted by each soldier for j in range leftround p minus 1 comma minus 1 comma minus 1 rightround colon numbers leftsquare j rightsquare equal numbers leftsquare j plus 1 rightsquare plus 1 for j in range leftround p plus 1 comma n rightround colon numbers leftsquare j rightsquare equal numbers leftsquare j minus 1 rightsquare plus 1 hash Print the numbers shouted by each soldier print leftround d minus quotation d minus quotation period join leftround str leftround x rightround for x in numbers rightround rightround
1,def gcd leftround a comma b rightround colon hash Calculate the greatest common divisor of a and b using the Euclidean algorithm while b exclamation equal 0 colon a comma b equal b comma a percent b return a t equal int leftround input leftround rightround rightround for _ in range leftround t rightround colon hash Read the number of pages n equal int leftround input leftround rightround rightround hash Calculate the probability of winning p equal gcd leftround n comma 10 rightround hash Print the probability as a reduced fraction print leftround f d minus quotation leftcurly p rightcurly slash 10 d minus quotation rightround
1,hash Test case input comes from the console def read_input leftround rightround colon t equal int leftround input leftround rightround rightround test_cases equal leftsquare rightsquare for i in range leftround t rightround colon n equal int leftround input leftround rightround rightround costs equal list leftround map leftround int comma input leftround rightround period split leftround rightround rightround rightround test_cases period append leftround leftround n comma costs rightround rightround return test_cases hash Test case output goes to the console def write_output leftround output rightround colon for item in output colon print leftround item rightround def minimum_cost leftround test_case rightround colon n comma costs equal test_case costs period sort leftround reverse equal True rightround total_cost equal 0 for i in range leftround 0 comma n comma 4 rightround colon total_cost plus equal costs leftsquare i rightsquare plus costs leftsquare i plus 1 rightsquare return total_cost test_cases equal read_input leftround rightround output equal leftsquare minimum_cost leftround test_case rightround for test_case in test_cases rightsquare write_output leftround output rightround
1,hash Store the values of the nodes in the initial tree values equal list leftround map leftround int comma input leftround rightround period split leftround rightround rightround rightround hash Build the initial tree as a dictionary mapping each node to its children tree equal leftcurly rightcurly for i in range leftround 1 comma len leftround values rightround rightround colon a comma b equal map leftround int comma input leftround rightround period split leftround rightround rightround if a not in tree colon tree leftsquare a rightsquare equal leftsquare rightsquare if b not in tree colon tree leftsquare b rightsquare equal leftsquare rightsquare tree leftsquare a rightsquare period append leftround b rightround tree leftsquare b rightsquare period append leftround a rightround hash Process the queries q equal int leftround input leftround rightround rightround for _ in range leftround q rightround colon hash Read the parameters of the query m comma x comma y equal map leftround int comma input leftround rightround period split leftround rightround rightround hash Read the values of the nodes to be added new_values equal list leftround map leftround int comma input leftround rightround period split leftround rightround rightround rightround hash Initialize the cost to zero cost equal 0 hash For each node to be added comma find the minimum cost to add it to the tree for v in new_values colon hash Initialize the minimum cost to add the node to the root min_cost equal v asterisk values leftsquare 0 rightsquare plus y hash Check if adding the node to the root has an additional cost if len leftround tree leftsquare 1 rightsquare rightround plus 1 rightangle equal x colon min_cost plus equal y hash Check the other nodes in the tree for i in range leftround 2 comma len leftround values rightround plus 1 rightround colon hash Calculate the cost of adding the node to this node c equal v asterisk values leftsquare i minus 1 rightsquare plus y hash Check if adding the node to this node has an additional cost if len leftround tree leftsquare i rightsquare rightround plus 1 rightangle equal x colon c plus equal y hash Update the minimum cost if necessary min_cost equal min leftround min_cost comma c rightround hash Add the minimum cost to the total cost cost plus equal min_cost hash Add the node to the tree as a child of the node with minimum cost tree leftsquare min_cost percent leftround len leftround values rightround plus 1 rightround rightsquare period append leftround len leftround values rightround plus 1 rightround hash Add the value of the node to the list of values values period append leftround v rightround hash Print the total cost print leftround cost rightround
1,def can_make_equal_pieces leftround n colon int rightround minus rightangle bool colon return n percent 360 equal equal 0 def can_make_pieces leftround n colon int rightround minus rightangle bool colon return n leftangle equal 360 def can_make_unequal_pieces leftround n colon int rightround minus rightangle bool colon return n exclamation equal 360 def main leftround rightround colon t equal int leftround input leftround rightround rightround for _ in range leftround t rightround colon n equal int leftround input leftround rightround rightround print leftround d minus quotation y d minus quotation if can_make_equal_pieces leftround n rightround else d minus quotation n d minus quotation comma end equal d minus quotation d minus quotation rightround print leftround d minus quotation y d minus quotation if can_make_pieces leftround n rightround else d minus quotation n d minus quotation comma end equal d minus quotation d minus quotation rightround print leftround d minus quotation y d minus quotation if can_make_unequal_pieces leftround n rightround else d minus quotation n d minus quotation rightround main leftround rightround
1,a equal int leftround raw_input leftround rightround rightround result equal leftsquare rightsquare for k in range leftround a rightround colon input equal map leftround int comma raw_input leftround rightround period split leftround s minus quotation s minus quotation rightround rightround input_set equal set leftround input rightround input_dict equal dict leftround leftsquare leftround i comma len leftround filter leftround lambda x colon leftround x equal equal i rightround comma input rightround rightround rightround for i in input_set rightsquare rightround result period append leftround sum leftround sorted leftround input_dict period values leftround rightround comma reverse equal True rightround leftsquare 1 colon rightsquare rightround rightround for k in result colon print k
1,hash Initialize the list of balls on each pan to empty pan1 equal leftsquare rightsquare pan2 equal leftsquare rightsquare hash Weigh the balls with colour 1 and 2 on both pans print leftround d minus quotation 1 d minus quotation rightround print leftround d minus quotation 1 1 d minus quotation rightround print leftround d minus quotation 1 2 d minus quotation rightround diff equal int leftround input leftround rightround rightround hash Check the difference in weights if diff equal equal 0 colon hash Both balls have the same weight comma so we need to weigh the remaining balls pan1 period extend leftround leftsquare 3 comma 4 comma 5 rightsquare rightround pan2 period extend leftround leftsquare 3 comma 4 comma 5 rightsquare rightround elif diff rightangle 0 colon hash Ball on pan1 is heavier comma so it is one of the heavier balls heavier_colour equal 1 elif diff leftangle 0 colon hash Ball on pan2 is heavier comma so it is one of the heavier balls heavier_colour equal 2 hash Weigh the remaining balls while pan1 colon print leftround d minus quotation 1 d minus quotation rightround print leftround len leftround pan1 rightround comma asterisk pan1 rightround print leftround len leftround pan2 rightround comma asterisk pan2 rightround diff equal int leftround input leftround rightround rightround hash Check the difference in weights if diff equal equal 0 colon hash Both balls have the same weight comma so remove them from the list pan1 period pop leftround 0 rightround pan2 period pop leftround 0 rightround elif diff rightangle 0 colon hash Ball on pan1 is heavier comma so it is the heavier colour heavier_colour equal pan1 period pop leftround 0 rightround elif diff leftangle 0 colon hash Ball on pan2 is heavier comma so it is the heavier colour heavier_colour equal pan2 period pop leftround 0 rightround hash Output the heavier colour print leftround d minus quotation 2 d minus quotation rightround print leftround heavier_colour rightround
1,def solve_probability_problem leftround N comma M rightround colon hash Initialize the 2D array P to store the probabilities P equal leftsquare leftsquare 0 rightsquare asterisk M for _ in range leftround N rightround rightsquare hash Initialize the starting cell P leftsquare 0 rightsquare leftsquare 0 rightsquare equal 1 hash Iterate over the rows and columns of the grid for i in range leftround N rightround colon for j in range leftround M rightround colon hash Calculate the probability of visiting cell leftround i comma j rightround P leftsquare i rightsquare leftsquare j rightsquare equal P leftsquare i minus 1 rightsquare leftsquare j rightsquare plus P leftsquare i rightsquare leftsquare j minus 1 rightsquare hash Sum up the values in the array P and return the result return sum leftround P leftsquare i rightsquare leftsquare j rightsquare for i in range leftround N rightround for j in range leftround M rightround rightround
1,def solve_lights_problem leftround N rightround colon hash Initialize the distance to 0 distance equal 0 hash Initialize the left and right pointers left equal 0 right equal N hash Keep alternating between going to the rightmost and leftmost lights hash until all lights are turned off while left leftangle equal right colon hash Find the rightmost light that is on while right rightangle equal left and leftround right not in leftround left comma right rightround rightround colon right minus equal 1 hash Turn off the rightmost light and add the distance traveled distance plus equal right hash Find the leftmost light that is on while left leftangle equal right and leftround left not in leftround left comma right rightround rightround colon left plus equal 1 hash Turn off the leftmost light and add the distance traveled distance plus equal left hash Return the total distance traveled return distance
1,number equal input leftround rightround possibilities equal 0 def s leftround x rightround colon _sum equal 0 semicolon while x rightangle 0 colon _sum plus equal x percent 10 x equal x slash 10 return _sum a equal min leftround leftsquare 90 comma number rightsquare rightround for i in range leftround 1 comma a rightround colon temp equal s leftround i rightround plus i if i equal equal leftround s leftround number minus temp rightround rightround colon possibilities plus equal 1 print possibilities
1,hash Read the input M equal int leftround input leftround rightround rightround B equal list leftround map leftround int comma input leftround rightround period split leftround rightround rightround rightround hash Sort the list B in ascending order B period sort leftround rightround hash Initialize the list of numbers numbers equal leftsquare rightsquare hash Iterate through the elements of B for b in B colon hash Check if b is already in numbers or if there are already two other elements x and y in numbers such that b is the average of x and y if b not in numbers and not any leftround abs leftround b minus x minus y rightround leftangle 1e minus 9 for x in numbers for y in numbers rightround colon hash Add b to the list of numbers numbers period append leftround b rightround hash Output the length of numbers and the elements of numbers print leftround len leftround numbers rightround rightround print leftround asterisk numbers rightround
1,__author__ equal s minus quotation robert s minus quotation def distance leftround p1 comma p2 rightround colon return minus sum leftround leftsquare leftround a minus b rightround asterisk asterisk 2 for a comma b in zip leftround p1 comma p2 rightround rightsquare rightround def index_iter leftround x comma ranked rightround colon for xx comma ii in ranked colon if xx rightangle equal x colon break yield ii def back_index_iter leftround x comma ranked rightround colon for xx comma ii in reversed leftround ranked rightround colon if xx leftangle equal x colon break yield ii def yielder leftround i comma points comma sp rightround colon x equal points leftsquare i rightsquare dim equal len leftround x rightround while True colon iters equal leftsquare rightsquare for j in range leftround dim rightround colon iters period append leftround index_iter leftround x leftsquare j rightsquare comma sp leftsquare j rightsquare rightround rightround iters period append leftround back_index_iter leftround x leftsquare j rightsquare comma sp leftsquare j rightsquare rightround rightround indicies equal leftsquare rightsquare for j comma it in enumerate leftround iters rightround colon cc equal 0 for ni in it colon indicies period append leftround leftround ni comma j rightround rightround cc plus equal 1 if cc rightangle 5 colon break best_spot equal leftcurly rightcurly worst_spot equal leftcurly rightcurly distances equal leftcurly rightcurly for ii comma j in indicies colon d equal distances period get leftround ii comma None rightround or distance leftround x comma points leftsquare ii rightsquare rightround distances leftsquare ii rightsquare equal d best_spot leftsquare j rightsquare equal min leftround best_spot period get leftround j comma 99999 rightround comma d rightround worst_spot leftsquare j rightsquare equal max leftround worst_spot period get leftround j comma minus 99999999 rightround comma d rightround best_j equal min leftround best_spot comma key equal best_spot period get rightround while worst_spot leftsquare best_j rightsquare equal equal best_spot leftsquare best_j rightsquare colon try colon ii equal next leftround iters leftsquare best_j rightsquare rightround except StopIteration colon break d equal distance leftround x comma points leftsquare ii rightsquare rightround distances leftsquare ii rightsquare equal d worst_spot leftsquare best_j rightsquare equal d result equal leftsquare rightsquare for ii comma d in distances period iteritems leftround rightround colon result period append leftround leftround d comma ii rightround rightround result period sort leftround rightround for d comma ii in result colon yield ii comma d else colon break def get_graph leftround points comma N rightround colon dimension_points equal zip leftround asterisk points rightround point_places equal leftsquare leftsquare leftround x comma i rightround for i comma x in enumerate leftround xs rightround rightsquare for xs in dimension_points rightsquare sp equal map leftround sorted comma point_places rightround G equal leftsquare leftsquare rightsquare for i in range leftround N rightround rightsquare for i in range leftround N rightround colon G leftsquare i rightsquare equal yielder leftround i comma points comma sp rightround return G def solve leftround G comma N comma heappush comma heappop rightround colon score equal 1 u equal 0 frontier equal leftsquare rightsquare visited equal set leftround leftsquare u rightsquare rightround v comma d equal next leftround G leftsquare u rightsquare rightround heappush leftround frontier comma leftround d comma u comma v rightround rightround extras equal leftsquare rightsquare while frontier colon while extras colon if extras leftsquare 0 rightsquare leftsquare 0 rightsquare rightangle frontier leftsquare 0 rightsquare leftsquare 0 rightsquare colon break d2 comma v comma g equal heappop leftround extras rightround tc equal 0 for w comma d2 in g colon if not w in visited colon tc plus equal 1 heappush leftround frontier comma leftround d2 comma v comma w rightround rightround if tc rightangle 10 colon heappush leftround extras comma leftround d2 comma v comma g rightround rightround break W comma u comma v equal heappop leftround frontier rightround if v in visited colon continue visited period add leftround v rightround taken_count equal 0 for w comma d2 in G leftsquare v rightsquare colon if not w in visited colon taken_count plus equal 1 heappush leftround frontier comma leftround d2 comma v comma w rightround rightround if taken_count rightangle 10 colon heappush leftround extras comma leftround d2 comma v comma G leftsquare v rightsquare rightround rightround score asterisk equal W return score percent 747474747 def main leftround rightround colon from sys import stdin from heapq import heappush comma heappop data equal leftround line for line in stdin period read leftround rightround period splitlines leftround rightround rightround cases equal int leftround next leftround data rightround rightround for case in range leftround 1 comma cases plus 1 rightround colon N comma D equal map leftround int comma next leftround data rightround period split leftround rightround rightround points equal leftsquare map leftround int comma next leftround data rightround period split leftround rightround rightround for i in range leftround N rightround rightsquare G equal get_graph leftround points comma N rightround ans equal solve leftround G comma N comma heappush comma heappop rightround print ans main leftround rightround
1,from __future__ import division from sys import stdin from cStringIO import StringIO inp equal iter leftround StringIO leftround stdin period read leftround rightround rightround rightround period next t equal int leftround inp leftround rightround rightround def tell leftround l rightround colon ans equal 1 odd equal l leftsquare 0 rightsquare percent 2 for i in xrange leftround len leftround l rightround rightround colon if l leftsquare i rightsquare percent 2 equal equal odd colon ans plus equal 1 else colon if odd equal equal 1 colon return minus 1 asterisk ans else colon return ans return ans for _ in xrange leftround t rightround colon n equal int leftround inp leftround rightround rightround game_value equal 0 for i in xrange leftround n rightround colon l equal map leftround int comma inp leftround rightround period split leftround rightround rightround leftsquare 1 colon rightsquare l period sort leftround rightround value equal tell leftround l rightround count equal 0 ini equal value for j in xrange leftround ini comma len leftround l rightround rightround colon if l leftsquare j rightsquare percent 2 colon value minus equal 1 slash leftround 2 leftangle leftangle count rightround else colon value plus equal 1 slash leftround 2 leftangle leftangle count rightround game_value plus equal value if game_value rightangle 0 colon print d minus quotation EVEN d minus quotation elif game_value leftangle 0 colon print d minus quotation ODD d minus quotation else colon print d minus quotation DON s minus quotation T PLAY d minus quotation
1,hash Read the number of test cases t equal int leftround input leftround rightround rightround hash Define a function to check if a number is a prime power def is_prime_power leftround n rightround colon hash Check if n is a prime number if n in leftround 2 comma 3 rightround colon return True if n equal equal 1 or n percent 2 equal equal 0 colon return False for i in range leftround 3 comma int leftround n asterisk asterisk 0 period 5 rightround plus 1 comma 2 rightround colon if n percent i equal equal 0 colon return False hash If n is prime comma check if it is a power of 2 or 3 if n percent 2 equal equal 1 colon return False while n percent 2 equal equal 0 colon n slash slash equal 2 return n equal equal 1 or n equal equal 3 hash Process each test case for _ in range leftround t rightround colon hash Read the input for this test case n equal int leftround input leftround rightround rightround hash If n is a prime power comma Chef will win if is_prime_power leftround n rightround colon print leftround d minus quotation Chef d minus quotation rightround hash Otherwise comma Misha will win else colon print leftround d minus quotation Misha d minus quotation rightround
1,hash Read the number of test cases t equal int leftround input leftround rightround rightround hash Process each test case for _ in range leftround t rightround colon hash Read the input for this test case n comma k equal map leftround int comma input leftround rightround period split leftround rightround rightround a equal list leftround map leftround int comma input leftround rightround period split leftround rightround rightround rightround hash Check if it is possible to perform operations such that exactly n minus 1 numbers become 0 if all leftround a leftsquare i rightsquare percent leftround k plus 1 rightround equal equal 0 for i in range leftround n rightround rightround colon print leftround d minus quotation YES d minus quotation rightround else colon print leftround d minus quotation NO d minus quotation rightround
1,hash Read the number of test cases T equal int leftround input leftround rightround rightround hash Iterate through each test case for _ in range leftround T rightround colon hash Read the number of numbers in each gift N equal int leftround input leftround rightround rightround hash Read the numbers given by Sasha to Chef A equal list leftround map leftround int comma input leftround rightround period split leftround rightround rightround rightround hash Read the numbers given by Chef to Sasha B equal list leftround map leftround int comma input leftround rightround period split leftround rightround rightround rightround hash Sort the numbers in ascending order A period sort leftround rightround B period sort leftround rightround hash Initialize the expected number of kisses to 0 kisses equal 0 hash Iterate through the numbers in Chef s minus quotation s gift for a in A colon hash Find the number of numbers in Sasha s minus quotation s gift that are greater than a greater_than_a equal len leftround leftsquare b for b in B if b rightangle a rightsquare rightround hash Add the probability of kissing Chef to the expected number of kisses kisses plus equal greater_than_a slash len leftround B rightround hash Print the expected number of kisses print leftround kisses rightround
1,hash Read the number of test cases t equal int leftround input leftround rightround rightround hash Process each test case for _ in range leftround t rightround colon hash Read the input for this test case x equal int leftround input leftround rightround rightround b equal int leftround input leftround rightround rightround dishes equal leftsquare rightsquare for _ in range leftround b rightround colon dishes period append leftround tuple leftround map leftround int comma input leftround rightround period split leftround rightround rightround rightround rightround c equal int leftround input leftround rightround rightround clans equal leftsquare rightsquare for _ in range leftround c rightround colon clans period append leftround tuple leftround map leftround int comma input leftround rightround period split leftround rightround rightround rightround rightround hash Sort the dishes and clans by their distance from Chef s minus quotation s town dishes equal sorted leftround dishes comma key equal lambda x colon x leftsquare 0 rightsquare rightround clans equal sorted leftround clans comma key equal lambda x colon x leftsquare 0 rightsquare rightround hash Initialize the current size of the group to 1 leftround for Chef rightround size equal 1 hash Keep track of the current position in the list of dishes and clans dish_index equal 0 clan_index equal 0 hash Keep track of the number of chefs left at each position left equal 0 hash Process each position on the path for pos in range leftround 1 comma x rightround colon hash If we have reached a dish comma eat it and update the number of chefs left if dish_index leftangle b and dishes leftsquare dish_index rightsquare leftsquare 0 rightsquare equal equal pos colon size minus equal left left equal dishes leftsquare dish_index rightsquare leftsquare 1 rightsquare dish_index plus equal 1 hash If we have reached a clan comma join it if we have enough chefs elif clan_index leftangle c and clans leftsquare clan_index rightsquare leftsquare 0 rightsquare equal equal pos colon size equal max leftround size comma clans leftsquare clan_index rightsquare leftsquare 1 rightsquare rightround clan_index plus equal 1 hash Otherwise comma update the number of chefs left else colon size minus equal left left equal 0 hash Print the final size of the group print leftround size rightround
1,hash Read the number of test cases t equal int leftround input leftround rightround rightround hash Process each test case for _ in range leftround t rightround colon hash Read the input for this test case s equal input leftround rightround n equal int leftround input leftround rightround rightround words equal set leftround rightround for _ in range leftround n rightround colon words period add leftround input leftround rightround rightround hash Check if Teddy can win by checking if there is a word in the dictionary that is a substring of the string on the whiteboard if any leftround word in s for word in words rightround colon print leftround d minus quotation Teddy d minus quotation rightround else colon print leftround d minus quotation Tracy d minus quotation rightround
1,def smallest_subsequence leftround S comma K rightround colon res equal s minus quotation s minus quotation for c in S colon if len leftround res rightround equal equal K colon break if c not in res colon hash Add c to res if it is lexicographically smaller than the remaining characters if not any leftround c leftangle d for d in S leftsquare S period index leftround c rightround plus 1 colon rightsquare rightround colon res plus equal c return res hash Test the function T equal 2 test_cases equal leftsquare leftround s minus quotation abdc s minus quotation comma 3 rightround comma leftround s minus quotation bacb s minus quotation comma 2 rightround rightsquare for i in range leftround T rightround colon S comma K equal test_cases leftsquare i rightsquare print leftround smallest_subsequence leftround S comma K rightround rightround
1,hash Test input cases tests equal leftsquare leftcurly d minus quotation input d minus quotation colon d minus quotation 2\n5 2\n3 0 1 2\n3 2 3 4\n4 3\n2 0 1\n2 1 2\n2 2 3\n d minus quotation comma d minus quotation output d minus quotation colon d minus quotation 3\n4\n d minus quotation rightcurly comma hash add more test cases here rightsquare hash Test function def test leftround function equal None rightround colon for test in tests colon is_test_passing equal function leftround test leftsquare s minus quotation input s minus quotation rightsquare rightround equal equal test leftsquare s minus quotation output s minus quotation rightsquare result equal leftround d minus quotation PASS d minus quotation if is_test_passing else f d minus quotation FAIL leftround leftcurly function leftround test leftsquare s minus quotation input s minus quotation rightsquare rightround rightcurly rightround d minus quotation rightround print leftround f d minus quotation Input colon \n leftcurly test leftsquare s minus quotation input s minus quotation rightsquare rightcurly Output colon \n leftcurly test leftsquare s minus quotation output s minus quotation rightsquare rightcurly Result colon leftcurly result rightcurly \n d minus quotation rightround hash Test minus driven development function def tdd leftround function rightround colon def wrapper leftround asterisk args comma asterisk asterisk kwargs rightround colon test leftround function rightround return function leftround asterisk args comma asterisk asterisk kwargs rightround return wrapper hash Solution function at tdd def find_min_atoms leftround test_input rightround colon hash Split the input string into lines lines equal test_input period strip leftround rightround period split leftround d minus quotation \n d minus quotation rightround hash Parse the first line to get the number of test cases t equal int leftround lines leftsquare 0 rightsquare rightround hash Initialize an empty list to store the results results equal leftsquare rightsquare hash Initialize a line index i equal 1 hash Iterate over the test cases for _ in range leftround t rightround colon hash Parse the current line to get the size of X and the number of sets n comma m equal map leftround int comma lines leftsquare i rightsquare period split leftround rightround rightround i plus equal 1 hash Initialize a set to store all the items in X all_items equal set leftround range leftround n rightround rightround hash Initialize a set to store the items that have already been covered covered_items equal set leftround rightround hash Iterate over the sets for _ in range leftround m rightround colon hash Parse the current line to get the size of the current set v equal int leftround lines leftsquare i rightsquare rightround i plus equal 1 hash Parse the current line to get the items in the current set items equal set leftround map leftround int comma lines leftsquare i rightsquare period split leftround rightround rightround rightround i plus equal 1 hash Update the set of covered items covered_items pipe equal items hash Calculate the number of atoms needed atoms equal len leftround all_items minus covered_items rightround
1,def main leftround rightround colon hash Read the number of test cases t equal int leftround input leftround rightround rightround hash Process each test case for _ in range leftround t rightround colon hash Read the passage passage equal input leftround rightround hash Initialize the number of days needed to 0 days equal 0 hash Initialize the maximum jump length to 1 max_jump equal 1 hash Iterate through the passage for i in range leftround 1 comma len leftround passage rightround rightround colon hash If the current position is not a floorboard if passage leftsquare i rightsquare equal equal s minus quotation period s minus quotation colon hash Update the maximum jump length to the distance to the next floorboard max_jump equal i minus days hash If the current jump length is smaller than the distance to the next floorboard if max_jump leftangle i minus days colon hash Increment the number of days needed days plus equal 1 hash Print the number of days needed print leftround days rightround hash Call the main function main leftround rightround
1,import heapq def shortest_average_length leftround n comma m comma edges comma source comma destination rightround colon hash Initialize the distance array dist equal leftsquare float leftround s minus quotation inf s minus quotation rightround rightsquare asterisk n dist leftsquare source rightsquare equal 0 hash Initialize the priority queue pq equal leftsquare rightsquare heapq period heappush leftround pq comma leftround 0 comma source rightround rightround while pq colon hash Extract the node with the minimum distance leftround length comma node rightround equal heapq period heappop leftround pq rightround hash Check if the node has already been processed if length rightangle dist leftsquare node rightsquare colon continue hash Update the distances of the neighbors for leftround neighbor comma weight rightround in edges leftsquare node rightsquare colon average_length equal leftround length asterisk leftround node minus source rightround plus weight rightround slash leftround node minus source plus 1 rightround if average_length leftangle dist leftsquare neighbor rightsquare colon dist leftsquare neighbor rightsquare
1,hash Test input input_str equal d minus quotation d minus quotation d minus quotation 4 2 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 0 d minus quotation d minus quotation d minus quotation hash Test output output_str equal d minus quotation d minus quotation d minus quotation 0 1 2 4 0 0 2 0 0 d minus quotation d minus quotation d minus quotation def trap_bugs leftround n comma k comma map rightround colon hash Initialize the result with zeros result equal leftsquare leftsquare 0 for _ in range leftround n minus k plus 1 rightround rightsquare for _ in range leftround n minus k plus 1 rightround rightsquare hash Iterate over all the possible positions for the trap for i in range leftround n minus k plus 1 rightround colon for j in range leftround n minus k plus 1 rightround colon hash Get the minimum number of bugs on the tiles covered by the trap result leftsquare i rightsquare leftsquare j rightsquare equal min leftround leftsquare map leftsquare i plus x rightsquare leftsquare j plus y rightsquare for x in range leftround k rightround for y in range leftround k rightround rightsquare rightround return result
1,hash Number of test cases T equal int leftround input leftround rightround rightround hash Loop through each test case for _ in range leftround T rightround colon hash Read in M and p M comma p equal map leftround int comma input leftround rightround period split leftround rightround rightround hash Calculate the amount of money each thief will get chef_money equal 1e9 asterisk p slash leftround 1 plus p rightround colleague_money equal 1e9 minus chef_money hash Print the result print leftround d minus quotation leftcurly colon period 2f rightcurly leftcurly colon period 2f rightcurly d minus quotation period format leftround chef_money comma colleague_money rightround rightround
1,import heapq hash Create an empty heap and dictionary heap equal leftsquare rightsquare books equal leftcurly rightcurly hash Read the number of actions n equal int leftround input leftround rightround rightround hash Counter to keep track of the number of removed books removed equal 0 hash Process the actions for i in range leftround n rightround colon hash Read the action action equal input leftround rightround period split leftround rightround if action leftsquare 0 rightsquare equal equal s minus quotation minus 1 s minus quotation colon hash Harry wants to do a book exercise hash Remove the book with the minimum number of remaining exercises from the heap book equal heapq period heappop leftround heap rightround hash Update the dictionary and counter del books leftsquare book leftsquare 1 rightsquare rightsquare removed plus equal 1 hash Print the number of removed
1,def solve leftround n comma k comma points rightround colon divisions equal leftsquare leftsquare rightsquare for i in range leftround k rightround rightsquare for i in range leftround n rightround colon min_distance equal float leftround d minus quotation inf d minus quotation rightround min_division equal None for j in range leftround k rightround colon division equal divisions leftsquare j rightsquare division period append leftround i rightround max_distance equal max_distance leftround points leftsquare j rightsquare rightround if max_distance leftangle min_distance colon min_distance equal max_distance min_division equal j division period pop leftround rightround divisions leftsquare min_division rightsquare period append leftround i rightround return divisions
1,class Node colon def __init__ leftround self comma start comma end rightround colon self period start equal start self period end equal end self period sum equal 0 self period lazy equal 1 self period left equal None self period right equal None def build_tree leftround start comma end rightround colon hash base case colon if start and end are the same comma return a leaf node if start equal equal end colon return Node leftround start comma end rightround hash calculate the midpoint of the range mid equal leftround start plus end rightround slash slash 2 hash create a new node and set its left and right children node equal Node leftround start comma end rightround node period left equal build_tree leftround start comma mid rightround node period right equal build_tree leftround mid plus 1 comma end rightround hash return the root node return node
1,T equal int leftround input leftround rightround rightround for _ in range leftround T rightround colon R comma C comma G equal map leftround int comma input leftround rightround period split leftround rightround rightround column equal C coins equal 0 while coins leftangle G colon coins plus equal C leftround R comma column rightround column minus equal 1 if column equal equal 0 colon break print leftround C minus column rightround print leftround d minus quotation d minus quotation period join leftround str leftround C leftround R comma i rightround rightround for i in range leftround column plus 1 comma C plus 1 rightround rightround rightround
1,hash First comma we define a function called d minus quotation format_time d minus quotation that takes in a timestamp and formats it according to the requirements specified in the problem statement def format_time leftround ts rightround colon hash Convert the timestamp to a date object now equal datetime period fromtimestamp leftround ts rightround hash Extract the hour comma minute comma and second from the date object hour equal now period hour min equal now period minute sec equal now period second hash Add a leading zero to the minute and second if they are less than 10 if min leftangle equal 9 colon min equal d minus quotation 0 d minus quotation plus str leftround min rightround if sec leftangle equal 9 colon sec equal d minus quotation 0 d minus quotation plus str leftround sec rightround hash Determine whether it is AM or PM based on the hour if hour rightangle 12 colon hour equal hour minus 12 add equal d minus quotation PM d minus quotation else colon hour equal hour add equal d minus quotation AM d minus quotation hash Set the hour to 12 if it is equal to 0 if hour equal equal 12 colon add equal d minus quotation PM d minus quotation if hour equal equal 0 colon hour equal d minus quotation 12 d minus quotation hash Return the formatted time as a string return str leftround
1,def find_operations leftround a comma b rightround colon hash Initialize variables to track the number of operations and whether a conversion is possible num_ops equal 0 possible equal True hash Iterate through the characters in the strings for i in range leftround len leftround a rightround rightround colon hash If the characters are not equal comma we need to perform an operation if a leftsquare i rightsquare exclamation equal b leftsquare i rightsquare colon num_ops plus equal 1 hash If the characters are both 1 or both 0 comma we can use the AND operation if a leftsquare i rightsquare equal equal s minus quotation 1 s minus quotation and b leftsquare i rightsquare equal equal s minus quotation 0 s minus quotation or a leftsquare i rightsquare equal equal s minus quotation 0 s minus quotation and b leftsquare i rightsquare equal equal s minus quotation 1 s minus quotation colon hash Update the characters in the strings a leftsquare i rightsquare equal s minus quotation 0 s minus quotation b leftsquare i rightsquare equal s minus quotation 0 s minus quotation hash If one character is 1 and the other is 0 comma we can use the OR or XOR operation elif a leftsquare i rightsquare equal equal s minus quotation 1 s minus quotation or b leftsquare i rightsquare equal equal s minus quotation 1 s minus quotation colon hash Update the characters in the strings a leftsquare i rightsquare equal s minus quotation 1 s minus quotation b leftsquare i rightsquare equal s minus quotation 1 s minus quotation hash If none of the above conditions are met comma it is not possible to convert the strings else colon possible equal False break hash Return the number of operations and whether a conversion is possible return num_ops comma possible hash Test the function with the given test cases t equal 2 test_cases equal leftsquare leftround d minus quotation 101 d minus quotation comma d minus quotation 010 d minus quotation rightround comma leftround d minus quotation 1111 d minus quotation comma d minus quotation 1010 d minus quotation rightround rightsquare for i in range leftround t rightround colon a comma b equal test_
1,def knight_chances leftround K colon int rightround colon mod equal 10 asterisk asterisk 9 plus 9 hash Initialize an array to store the number of configurations for each knight chances equal leftsquare 0 rightsquare asterisk leftround 2 asterisk asterisk K rightround hash Iterate over all pairs of knights for i in range leftround 2 asterisk asterisk K rightround colon for j in range leftround 2 asterisk asterisk K rightround colon if i equal equal j colon continue hash Compute the number of configurations where i and j face off in the final configs equal 1 for round in range leftround K rightround colon pos_i equal i slash slash leftround 2 asterisk asterisk round rightround pos_j equal j slash slash leftround 2 asterisk asterisk round rightround configs asterisk equal leftround leftround 2 asterisk pos_i minus 1 rightround exclamation asterisk leftround 2 asterisk pos_j minus 1 rightround exclamation rightround asterisk leftround leftround 2 asterisk pos_i rightround exclamation asterisk leftround 2 asterisk pos_j rightround exclamation rightround configs percent equal mod hash Add the configurations to the count for each knight chances leftsquare i rightsquare plus equal configs chances leftsquare j rightsquare plus equal configs hash Return the result return chances
1,def shortest_path leftround N colon int comma queries colon List leftsquare Tuple leftsquare int comma int rightsquare rightsquare rightround colon hash Function to find the depth of a node in the tree def depth leftround node rightround colon d equal 0 while node rightangle 1 colon node slash slash equal 2 d plus equal 1 return d hash Function to find the LCA of two nodes def lca leftround node1 comma node2 rightround colon d1 equal depth leftround node1 rightround d2 equal depth leftround node2 rightround hash Bring the deeper node to the same depth as the shallower node if d1 rightangle d2 colon node1 slash slash equal 2 asterisk asterisk leftround d1 minus d2 rightround elif d2 rightangle d1 colon node2 slash slash equal 2 asterisk asterisk leftround d2 minus d1 rightround hash Iterate through the nodes from the shallower node to the deeper node hash and divide their labels by 2 until we reach a node where the two labels are equal while node1 exclamation equal node2 colon node1 slash slash equal 2 node2 slash slash equal 2 return node1 hash Find the shortest path between the two nodes for each query for i comma j in queries colon print leftround depth leftround i rightround plus depth leftround j rightround minus 2 asterisk depth leftround lca leftround i comma j rightround rightround plus 1 rightround
1,def count_pairs leftround N colon int comma queries colon List leftsquare Tuple leftsquare int comma int comma int rightsquare rightsquare rightround colon hash Function to find the common ancestor of two nodes def common_ancestor leftround node1 comma node2 rightround colon while node1 exclamation equal node2 colon if node1 rightangle node2 colon node1 slash slash equal 2 else colon node2 slash slash equal 2 return node1 for n comma u comma v in queries colon hash Find the common ancestor of u and v ancestor equal common_ancestor leftround u comma v rightround hash Initialize the count to the number of nodes on the same side of the ancestor as u and v count equal leftround n plus 1 rightround slash slash 2 hash Iterate through the depths of the tree comma starting from the common ancestor depth equal 1 while ancestor rightangle 1 colon ancestor slash slash equal 2 hash Add the number of nodes at this depth that are on the opposite side of the ancestor as u and v count plus equal leftround n plus 1 rightround slash slash leftround 2 asterisk asterisk depth rightround depth plus equal 1 print leftround count rightround
1,def max_ways leftround T colon int comma test_cases colon List leftsquare Tuple leftsquare int comma int rightsquare rightsquare rightround colon mod equal 1000000007 hash Function to compute the number of ways to assign cars to the zombies for each hierarchy def dp leftround n comma k rightround colon hash Initialize the dp array with 0 dp equal leftsquare leftsquare 0 rightsquare asterisk leftround k plus 1 rightround for _ in range leftround n plus 1 rightround rightsquare hash Set the base case colon dp leftsquare 1 rightsquare leftsquare j rightsquare equal j for all j for j in range leftround 1 comma k plus 1 rightround colon dp leftsquare 1 rightsquare leftsquare j rightsquare equal j hash Iterate through the number of zombies comma starting from the first zombie for i in range leftround 2 comma n plus 1 rightround colon hash Compute the number of ways to assign cars to the remaining zombies in the hierarchy for j in range leftround 1 comma k plus 1 rightround colon dp leftsquare i rightsquare leftsquare j rightsquare equal leftround dp leftsquare i rightsquare leftsquare j minus 1 rightsquare plus dp leftsquare i minus 1 rightsquare leftsquare j minus 1 rightsquare rightround percent mod hash Return the number of ways to assign cars to all the zombies return sum leftround dp leftsquare n rightsquare rightround percent mod hash Comp
1,def minimal_penalty leftround N comma K comma A comma B rightround colon dp equal leftsquare 0 rightsquare asterisk leftround N plus 2 rightround for i in range leftround 1 comma N plus 2 rightround colon dp leftsquare i rightsquare equal float leftround s minus quotation inf s minus quotation rightround for j in range leftround max leftround 0 comma i minus k minus 1 rightround comma i minus 1 rightround colon dp leftsquare i rightsquare equal min leftround dp leftsquare i rightsquare comma dp leftsquare j rightsquare plus max leftround A leftsquare j plus 1 colon i rightsquare rightround asterisk max leftround B leftsquare j plus 1 colon i rightsquare rightround rightround return dp leftsquare N plus 1 rightsquare
1,def shuffles_needed leftround permutation rightround colon counter equal 0 while not is_sorted leftround permutation rightround colon counter plus equal 1 i equal 0 while i leftangle len leftround permutation rightround and permutation leftsquare i rightsquare equal equal i plus 1 colon i plus equal 1 j equal len leftround permutation rightround minus 1 while j rightangle equal 0 and permutation leftsquare j rightsquare equal equal j plus 1 colon j minus equal 1 permutation equal permutation leftsquare colon i rightsquare plus shuffle leftround permutation leftsquare i colon j plus 1 rightsquare rightround plus permutation leftsquare j plus 1 colon rightsquare return counter def is_sorted leftround permutation rightround colon for i in range leftround len leftround permutation rightround rightround colon if permutation leftsquare i rightsquare exclamation equal i plus 1 colon return False return True def shuffle leftround sequence rightround colon hash shuffle the elements of the sequence randomly pass def expected_value leftround n rightround colon total equal 0 for permutation in permutations leftround range leftround 1 comma n plus 1 rightround rightround colon probability equal 1 slash math period factorial leftround n rightround shuffles equal shuffles_needed leftround permutation rightround total plus equal probability asterisk shuffles return total slash math period factorial leftround n rightround
1,def sort_posts leftround a comma b rightround colon hash Check if a or b are special friends a_is_special equal a leftsquare 0 rightsquare in special_friends b_is_special equal b leftsquare 0 rightsquare in special_friends hash If both are special or both are not special comma compare their popularity if a_is_special equal equal b_is_special colon return b leftsquare 1 rightsquare minus a leftsquare 1 rightsquare hash If a is special and b is not comma a comes first if a_is_special colon return minus 1 hash If b is special and a is not comma b comes first if b_is_special colon return 1 posts equal leftsquare leftround f comma p comma s rightround for f comma p comma s in zip leftround f_values comma p_values comma s_values rightround rightsquare posts period sort leftround key equal sort_posts rightround for f comma p comma s in posts colon print leftround s rightround
1,MG equal 1 comma MY equal 2 comma MR equal 3 OG equal 3 comma OY equal 2 comma OR equal 1 PG equal 1 comma PY equal 3 comma PR equal 4 PR equal 4 OG equal 3 MY equal 2 OY equal 2 MR equal 3 OR equal 1 PG equal 1 MG equal 1 function maximal_nice_bouquet leftround MG comma MY comma MR comma OG comma OY comma OR comma PG comma PY comma PR rightround colon bouquet equal leftsquare rightsquare leaves equal leftsquare leftround PR comma d minus quotation PR d minus quotation rightround comma leftround OG comma d minus quotation OG d minus quotation rightround comma leftround MY comma d minus quotation MY d minus quotation rightround comma leftround OY comma d minus quotation OY d minus quotation rightround comma leftround MR comma d minus quotation MR d minus quotation rightround comma leftround OR comma d minus quotation OR d minus quotation rightround comma leftround PG comma d minus quotation PG d minus quotation rightround comma leftround MG comma d minus quotation MG d minus quotation rightround rightsquare for leftround count comma type rightround in leaves colon if count percent 2 equal equal 1 and count rightangle 0 colon bouquet period append leftround type rightround eval leftround type plus d minus quotation minus equal 1 d minus quotation rightround return len leftround bouquet rightround def maximal_nice_bouquet leftround MG comma MY comma MR comma OG comma OY comma OR comma PG comma PY comma PR rightround colon bouquet equal leftsquare rightsquare leaves equal leftsquare leftround PR comma d minus quotation PR d minus quotation rightround comma leftround OG comma d minus quotation OG d minus quotation rightround comma leftround MY comma d minus quotation MY d minus quotation rightround comma leftround OY comma d minus quotation OY d minus quotation rightround comma leftround MR comma d minus quotation MR d minus quotation rightround comma leftround OR comma d minus quotation OR d minus quotation rightround comma leftround PG comma d minus quotation PG d minus quotation rightround comma leftround MG comma d minus quotation MG d minus quotation rightround rightsquare for leftround count comma type rightround in leaves colon if count percent 2 equal equal 1 and count rightangle 0 colon bouquet period append leftround type rightround eval leftround type plus d minus quotation minus equal 1 d minus quotation rightround return len leftround bouquet rightround T equal int leftround input leftround rightround rightround for _ in range leftround T rightround colon MG comma MY comma MR equal map leftround int comma input leftround rightround period split leftround rightround rightround OG comma OY comma OR equal map leftround int comma input leftround rightround period split leftround rightround rightround PG comma PY comma PR equal map leftround int comma input leftround rightround period split leftround rightround rightround print leftround maximal_nice_bouquet leftround MG comma MY comma MR comma OG comma OY comma OR comma PG comma PY comma PR rightround rightround
1,FUNCTION solve leftround A colon string rightround colon string B equal d minus quotation d minus quotation balance equal 0 FOR i equal 1 TO LENGTH leftround A rightround IF A leftsquare i rightsquare equal equal s minus quotation leftround s minus quotation balance equal balance plus 1 B equal B plus s minus quotation leftround s minus quotation ELSE IF balance rightangle 0 balance equal balance minus 1 B equal B plus s minus quotation rightround s minus quotation END FOR FOR i equal 1 TO balance B equal B plus s minus quotation rightround s minus quotation END FOR RETURN B END FUNCTION
1,for each test case colon row_toggles equal 0 row_indices equal leftsquare rightsquare col_toggles equal 0 col_indices equal leftsquare rightsquare for i from 0 to n minus 1 colon if the ith row of the initial grid is not equal to the ith row of the final grid colon row_toggles plus equal 1 row_indices period append leftround i rightround if the ith column of the initial grid is not equal to the ith column of the final grid colon col_toggles plus equal 1 col_indices period append leftround i rightround if row_toggles plus col_toggles is minimum possible colon output row_toggles output row_indices output col_toggles output col_indices else colon output d minus quotation minus 1 d minus quotation
1,dp leftsquare i rightsquare leftsquare j rightsquare equal min leftround dp leftsquare i minus 1 rightsquare leftsquare j rightsquare comma dp leftsquare i minus 1 rightsquare leftsquare j minus A leftsquare i rightsquare rightsquare plus A leftsquare i rightsquare rightround def min_candies leftround N comma M comma K comma A rightround colon INF equal float leftround s minus quotation inf s minus quotation rightround dp equal leftsquare leftsquare INF rightsquare asterisk leftround leftround M plus 1 rightround asterisk K plus 1 rightround for _ in range leftround M plus 1 rightround rightsquare dp leftsquare 0 rightsquare leftsquare 0 rightsquare equal 0 for i in range leftround 1 comma M plus 1 rightround colon for j in range leftround K rightround colon dp leftsquare i rightsquare leftsquare j rightsquare equal dp leftsquare i minus 1 rightsquare leftsquare j rightsquare for j in range leftround K comma leftround M plus 1 rightround asterisk K plus 1 rightround colon dp leftsquare i rightsquare leftsquare j rightsquare equal min leftround dp leftsquare i minus 1 rightsquare leftsquare j rightsquare comma dp leftsquare i minus 1 rightsquare leftsquare j minus A leftsquare i rightsquare rightsquare plus A leftsquare i rightsquare rightround for j in range leftround K comma leftround M plus 1 rightround asterisk K plus 1 rightround colon if dp leftsquare M rightsquare leftsquare j rightsquare percent K equal equal 0 colon return dp leftsquare M rightsquare leftsquare j rightsquare return minus 1
1,function maximum_sweets leftround N comma X comma banknotes rightround colon total equal 0 sweets equal 0 for i in range leftround N minus 1 comma minus 1 comma minus 1 rightround colon total plus equal banknotes leftsquare i rightsquare while total rightangle equal X colon total minus equal X sweets plus equal 1 if total rightangle 0 colon return minus 1 return sweets def maximum_sweets leftround N comma X comma banknotes rightround colon total equal 0 sweets equal 0 for i in range leftround N minus 1 comma minus 1 comma minus 1 rightround colon total plus equal banknotes leftsquare i rightsquare while total rightangle equal X colon total minus equal X sweets plus equal 1 if total rightangle 0 colon return minus 1 return sweets T equal int leftround input leftround rightround rightround for _ in range leftround T rightround colon N comma X equal map leftround int comma input leftround rightround period split leftround rightround rightround banknotes equal list leftround map leftround int comma input leftround rightround period split leftround rightround rightround rightround print leftround maximum_sweets leftround N comma X comma banknotes rightround rightround
1,T equal int leftround input leftround rightround rightround for _ in range leftround T rightround colon s equal input leftround rightround left equal s period find leftround s minus quotation W s minus quotation rightround right equal len leftround s rightround minus left minus 1 if left percent 2 equal equal 1 or right percent 2 equal equal 1 colon print leftround d minus quotation Chef d minus quotation rightround else colon print leftround d minus quotation Aleksa d minus quotation rightround
1,dp leftsquare i rightsquare leftsquare j rightsquare equal leftround dp leftsquare i minus 1 rightsquare leftsquare j minus 2 rightsquare plus dp leftsquare i minus 2 rightsquare leftsquare j minus 1 rightsquare rightround asterisk 2 plus leftround dp leftsquare i minus 1 rightsquare leftsquare j minus 1 rightsquare plus dp leftsquare i minus 2 rightsquare leftsquare j minus 2 rightsquare rightround asterisk 4 def ways_to_place leftround N comma M rightround colon dp equal leftsquare leftsquare 0 rightsquare asterisk leftround M plus 1 rightround for _ in range leftround N plus 1 rightround rightsquare dp leftsquare 1 rightsquare leftsquare 1 rightsquare equal 0 dp leftsquare 2 rightsquare leftsquare 2 rightsquare equal 6 for i in range leftround 2 comma N plus 1 rightround colon for j in range leftround 2 comma M plus 1 rightround colon dp leftsquare i rightsquare leftsquare j rightsquare equal leftround dp leftsquare i minus 1 rightsquare leftsquare j minus 2 rightsquare plus dp leftsquare i minus 2 rightsquare leftsquare j minus 1 rightsquare rightround asterisk 2 plus leftround dp leftsquare i minus 1 rightsquare leftsquare j minus 1 rightsquare plus dp leftsquare i minus 2 rightsquare leftsquare j minus 2 rightsquare rightround asterisk 4 return dp leftsquare N rightsquare leftsquare M rightsquare
1,function minimum_score leftround n comma points rightround colon hash Sort the points by their x coordinate period points period sort leftround key equal lambda point colon point leftsquare 0 rightsquare rightround hash Initialize the list of intermediate points and lines period intermediate_points equal leftsquare rightsquare lines equal leftsquare rightsquare hash Iterate over the points and connect them with lines period for i in range leftround n minus 1 rightround colon x1 comma y1 equal points leftsquare i rightsquare x2 comma y2 equal points leftsquare i plus 1 rightsquare distance equal sqrt leftround leftround x1 minus x2 rightround asterisk asterisk 2 plus leftround y1 minus y2 rightround asterisk asterisk 2 rightround if distance rightangle 1 colon hash If the distance between the points is greater than 1 comma we need to hash add an intermediate point period x3 equal leftround x1 plus x2 rightround slash 2 y3 equal leftround y1 plus y2 rightround slash 2 intermediate_points period append leftround leftround x3 comma y3 rightround rightround lines period append leftround leftround i comma n plus len leftround intermediate_points rightround minus 1 rightround rightround lines period append leftround leftround i plus 1 comma n plus len leftround intermediate_points rightround minus 1 rightround rightround else colon hash If the distance is less than or equal to 1 comma we can directly hash connect the points with a line period lines period append leftround leftround i comma i plus 1 rightround rightround return len leftround intermediate_points rightround comma intermediate_points comma len leftround lines rightround comma lines from math import sqrt def minimum_score leftround n comma points rightround colon hash Sort the points by their x coordinate period points period sort leftround key equal lambda point colon point leftsquare 0 rightsquare rightround hash Initialize the list of intermediate points and lines period intermediate_points equal leftsquare rightsquare lines equal leftsquare rightsquare hash Iterate over the points and connect them with lines period for i in range leftround n minus 1 rightround colon x1 comma y1 equal points leftsquare i rightsquare x2 comma y2 equal points leftsquare i plus 1 rightsquare distance equal sqrt leftround leftround x1 minus x2 rightround asterisk asterisk 2 plus leftround
1,for each test case colon read N dp leftsquare 0 rightsquare equal 0 for i equal 1 to N colon read ai comma bi dp leftsquare i rightsquare equal infinity for k equal ai to bi colon dp leftsquare i rightsquare equal min leftround dp leftsquare i rightsquare comma dp leftsquare i minus k rightsquare plus k rightround print 1 for i equal N downto 1 colon if dp leftsquare i rightsquare equal equal dp leftsquare i minus 1 rightsquare colon print 0 else colon print 1
1,def solve_mismatch leftround w rightround colon for i in range leftround len leftround w rightround minus 1 rightround colon if w leftsquare i rightsquare rightangle w leftsquare i plus 1 rightsquare plus 1 colon w leftsquare i rightsquare comma w leftsquare i plus 1 rightsquare equal w leftsquare i plus 1 rightsquare comma w leftsquare i rightsquare i minus equal 1 return w
1,1 hat k plus 2 hat k plus period period period plus n hat k equal leftround n hat leftround k plus 1 rightround minus 1 rightround slash leftround n minus 1 rightround t equal int leftround input leftround rightround rightround for _ in range leftround t rightround colon n comma k comma p equal map leftround int comma input leftround rightround period split leftround rightround rightround result equal leftround n asterisk asterisk leftround k plus 1 rightround minus 1 rightround slash slash leftround n minus 1 rightround percent p print leftround result rightround
1,def solve leftround a comma b rightround colon hash Initialize the dp array with all zeros dp equal leftsquare leftsquare 0 for j in range leftround b plus 1 rightround rightsquare for i in range leftround a plus 1 rightround rightsquare hash Set the base case dp leftsquare 0 rightsquare leftsquare 0 rightsquare equal 1 dp leftsquare 0 rightsquare leftsquare 0 rightsquare equal 1 hash Iterate through all possible values of i and j for i in range leftround 1 comma a plus 1 rightround colon for j in range leftround 1 comma b plus 1 rightround colon hash Iterate through all possible values of k for k in range leftround 1 comma i plus 1 rightround colon hash If the shorter word of length k cannot be used to form a prime word comma continue to the next value of k if dp leftsquare i minus k rightsquare leftsquare j minus k rightsquare equal equal 0 colon continue hash Otherwise comma add the value of dp leftsquare i minus k rightsquare leftsquare j minus k rightsquare to dp leftsquare i rightsquare leftsquare j rightsquare dp leftsquare i rightsquare leftsquare j rightsquare equal leftround dp leftsquare i rightsquare leftsquare j rightsquare plus dp leftsquare i minus k rightsquare leftsquare j minus k rightsquare rightround percent 531169 hash Return the final result return dp leftsquare a rightsquare leftsquare b rightsquare
1,def solve_cake leftround K comma S rightround colon hash replace question marks at the beginning and end with the smallest available digit if S leftsquare 0 rightsquare equal equal d minus quotation question d minus quotation colon S leftsquare 0 rightsquare equal d minus quotation 0 d minus quotation if S leftsquare minus 1 rightsquare equal equal d minus quotation question d minus quotation colon S leftsquare minus 1 rightsquare equal d minus quotation 0 d minus quotation hash replace the remaining question marks with the smallest available digit hash that is different from the previous and the next digit for i in range leftround 1 comma len leftround S rightround minus 1 rightround colon if S leftsquare i rightsquare equal equal d minus quotation question d minus quotation colon for j in range leftround K rightround colon if str leftround j rightround exclamation equal S leftsquare i minus 1 rightsquare and str leftround j rightround exclamation equal S leftsquare i plus 1 rightsquare colon S leftsquare i rightsquare equal str leftround j rightround break return S
1,import itertools def solve leftround candies comma desired rightround colon for i in range leftround 1 comma len leftround candies rightround plus 1 rightround colon for combination in itertools period combinations leftround candies comma i rightround colon chocolate equal sum leftround c leftsquare 0 rightsquare for c in combination rightround caramel equal sum leftround c leftsquare 1 rightsquare for c in combination rightround if chocolate asterisk desired leftsquare 1 rightsquare equal equal caramel asterisk desired leftsquare 0 rightsquare colon print leftround i rightround return print leftround minus 1 rightround t equal int leftround input leftround rightround rightround for _ in range leftround t rightround colon n equal int leftround input leftround rightround rightround candies equal leftsquare rightsquare for _ in range leftround n rightround colon candies period append leftround tuple leftround map leftround int comma input leftround rightround period split leftround rightround rightround rightround rightround desired equal tuple leftround map leftround int comma input leftround rightround period split leftround rightround rightround rightround solve leftround candies comma desired rightround
1,def solve leftround rightround colon T equal int leftround input leftround rightround rightround for _ in range leftround T rightround colon N comma M comma Z comma L comma R comma B equal map leftround int comma input leftround rightround period split leftround rightround rightround attendance equal 0 for _ in range leftround N rightround colon both_seats equal B slash slash N one_seats equal leftround L plus R rightround slash slash N none_seats equal Z slash slash N seats equal both_seats plus one_seats plus none_seats attendance plus equal seats B minus equal both_seats asterisk N L minus equal one_seats asterisk N R minus equal one_seats asterisk N Z minus equal none_seats asterisk N max_attendance plus equal attendance print leftround max_attendance rightround solve leftround rightround
1,hash Read the input T equal int leftround input leftround rightround rightround for _ in range leftround T rightround colon hash Read the number of trees N equal int leftround input leftround rightround rightround hash Create a dictionary to store the number of trees for each number of apples tree_count equal leftcurly rightcurly hash Read the number of apples for each tree for i in range leftround N rightround colon apples equal int leftround input leftround rightround rightround if apples in tree_count colon tree_count leftsquare apples rightsquare plus equal 1 else colon tree_count leftsquare apples rightsquare equal 1 hash Find the minimum time required by counting the number of keys in the dictionary min_time equal len leftround tree_count rightround hash Print the minimum time required print leftround min_time rightround
1,hash parse input N comma M equal map leftround int comma input leftround rightround period split leftround rightround rightround deck equal list leftround range leftround 1 comma N plus 1 rightround rightround moves equal leftsquare rightsquare for i in range leftround M rightround colon A comma B comma C equal map leftround int comma input leftround rightround period split leftround rightround rightround moves period append leftround leftround A comma B comma C rightround rightround hash simulate shuffling process for move in moves colon A comma B comma C equal move top_a equal deck leftsquare colon A rightsquare top_b equal deck leftsquare A colon A plus B rightsquare rest equal deck leftsquare A plus B colon rightsquare deck equal top_a plus rest deck equal top_b plus deck top_c equal deck leftsquare colon C rightsquare rest equal deck leftsquare C colon rightsquare deck equal rest plus top_c hash print shuffled deck print leftround s minus quotation s minus quotation period join leftround map leftround str comma deck rightround rightround rightround
1,hash Read the input T equal int leftround input leftround rightround rightround for _ in range leftround T rightround colon hash Read the number of prime powers m equal int leftround input leftround rightround rightround hash Initialize the value of N N equal 1 hash Calculate the value of N as the product of the prime powers for i in range leftround m rightround colon p comma k equal map leftround int comma input leftround rightround period split leftround rightround rightround N asterisk equal p asterisk asterisk k hash Initialize a counter X equal 1 hash Calculate the value of NX NX equal N while NX exclamation equal 1 colon NX equal math period euler_phi leftround NX rightround X plus equal 1 hash Print the result print leftround X rightround
1,if m rightangle max_memory colon max_memory equal m for each test case colon max_memory equal 0 read N for i equal 1 to N colon read m if m rightangle max_memory colon max_memory equal m print max_memory
1,dp leftsquare 1 rightsquare leftsquare 1 rightsquare equal 2 dp leftsquare i rightsquare leftsquare j rightsquare equal dp leftsquare i minus 1 rightsquare leftsquare j rightsquare plus dp leftsquare i rightsquare leftsquare j minus 1 rightsquare minus dp leftsquare i minus 1 rightsquare leftsquare j minus 1 rightsquare hash include leftangle iostream rightangle using namespace std semicolon const int MOD equal 1000000007 semicolon int main leftround rightround leftcurly int a comma b semicolon cin rightangle rightangle a rightangle rightangle b semicolon long long dp leftsquare 7 rightsquare leftsquare 263 rightsquare semicolon dp leftsquare 1 rightsquare leftsquare 1 rightsquare equal 2 semicolon for leftround int i equal 1 semicolon i leftangle equal a semicolon i plus plus rightround leftcurly for leftround int j equal 1 semicolon j leftangle equal b semicolon j plus plus rightround leftcurly if leftround i rightangle 1 pipe pipe j rightangle 1 rightround leftcurly dp leftsquare i rightsquare leftsquare j rightsquare equal dp leftsquare i minus 1 rightsquare leftsquare j rightsquare plus dp leftsquare i rightsquare leftsquare j minus 1 rightsquare minus dp leftsquare i minus 1 rightsquare leftsquare j minus 1 rightsquare semicolon dp leftsquare i rightsquare leftsquare j rightsquare percent equal MOD semicolon rightcurly rightcurly rightcurly cout leftangle leftangle dp leftsquare a rightsquare leftsquare b rightsquare leftangle leftangle endl semicolon return 0 semicolon rightcurly
1,T equal int leftround input leftround rightround rightround for _ in range leftround T rightround colon n equal int leftround input leftround rightround rightround days equal list leftround map leftround int comma input leftround rightround period split leftround rightround rightround rightround days period sort leftround rightround count equal 0 planned_parties equal set leftround rightround for day in days colon if day not in planned_parties colon planned_parties period add leftround day rightround count plus equal 1 print leftround count rightround
1,hash parse input T equal int leftround input leftround rightround rightround test_cases equal leftsquare rightsquare for i in range leftround T rightround colon N equal int leftround input leftround rightround rightround trees equal leftsquare rightsquare for j in range leftround N rightround colon h comma m equal map leftround int comma input leftround rightround period split leftround rightround rightround trees period append leftround leftround h comma m rightround rightround test_cases period append leftround leftround N comma trees rightround rightround hash iterate through test cases for test_case in test_cases colon N comma trees equal test_case Q equal 0 intervals equal leftsquare rightsquare hash iterate through trees for i in range leftround 1 comma N rightround colon prev_h comma prev_m equal trees leftsquare i minus 1 rightsquare h comma m equal trees leftsquare i rightsquare if i percent 2 equal equal 1 colon hash check for decreasing sequence if h leftangle prev_h colon hash compute interval of time t1 equal leftround prev_h minus h rightround slash leftround m minus prev_m rightround t2 equal float leftround s minus quotation inf s minus quotation rightround intervals period append leftround leftround t1 comma t2 rightround rightround Q plus equal 1 else colon hash check for increasing sequence if h rightangle prev_h colon hash compute interval of time t1 equal leftround h minus prev_h rightround slash leftround m minus prev_m rightround t2 equal float leftround s minus quotation inf s minus quotation rightround intervals period append leftround leftround t1 comma t2 rightround rightround Q plus equal 1 print leftround Q rightround for interval in intervals colon print leftround interval leftsquare 0 rightsquare comma interval leftsquare 1 rightsquare rightround
1,import random hash Read input T comma N comma H equal map leftround int comma input leftround rightround period split leftround rightround rightround hash Initialize best score best_score equal 0 hash Loop through password guesses for i in range leftround T rightround colon hash Generate random password guess guess equal leftsquare s minus quotation s minus quotation period join leftround random period choices leftround string period ascii_lowercase comma k equal random period randint leftround 8 comma 12 rightround rightround rightround for _ in range leftround N rightround rightsquare hash Print password guess print leftround s minus quotation s minus quotation period join leftround guess rightround rightround sys period stdout period flush leftround rightround hash Read score of guess score equal int leftround input leftround rightround rightround hash Update best score if necessary best_score equal max leftround best_score comma score rightround hash Print best score print leftround best_score slash leftround N minus H rightround rightround
1,def find_non_arithmetic_sequence leftround list rightround colon while True colon hash choose three random integers from the list int1 comma int2 comma int3 equal choose_random_integers leftround list rightround hash check if they form an arithmetic sequence if leftround int2 minus int1 equal equal int3 minus int2 rightround colon hash remove one of the integers and try again list period remove leftround int2 rightround else colon hash we found a set of integers that do not form an arithmetic sequence return leftsquare int1 comma int2 comma int3 rightsquare hash choose three random integers from the list def choose_random_integers leftround list rightround colon int1 equal choose_random_integer leftround list rightround int2 equal choose_random_integer leftround list rightround int3 equal choose_random_integer leftround list rightround return leftsquare int1 comma int2 comma int3 rightsquare hash choose a random integer from the list def choose_random_integer leftround list rightround colon index equal random period randint leftround 0 comma len leftround list rightround minus 1 rightround return list leftsquare index rightsquare import random hash find a set of integers that do not form an arithmetic sequence def find_non_arithmetic_sequence leftround list rightround colon
1,hash Read the number of test cases t equal int leftround input leftround rightround rightround hash Process each test case for _ in range leftround t rightround colon hash Read the number of columns and the number of cubes n comma m equal map leftround int comma input leftround rightround period split leftround rightround rightround hash Read the initial heights of the columns heights equal list leftround map leftround int comma input leftround rightround period split leftround rightround rightround rightround hash Calculate the minimum height of the columns min_height equal min leftround heights rightround hash Calculate the total number of cubes needed to raise the other columns to the minimum height total_cubes equal sum leftround h minus min_height for h in heights rightround hash Check if we have enough cubes if total_cubes leftangle equal m colon print leftround d minus quotation Yes d minus quotation rightround else colon print leftround d minus quotation No d minus quotation rightround
1,function findHeavierBalls leftround colors rightround colon hash Compare the weights of two balls of the same color for color in colors colon print d minus quotation 1 d minus quotation print d minus quotation 1 d minus quotation comma color print d minus quotation 1 d minus quotation comma color difference equal read input if difference exclamation equal 0 colon heavier_color equal color break hash Compare the weights of two balls of different colors for color1 in colors colon for color2 in colors colon if color1 equal equal color2 colon continue print d minus quotation 1 d minus quotation print d minus quotation 1 d minus quotation comma color1 print d minus quotation 1 d minus quotation comma color2 difference equal read input if difference exclamation equal 0 colon hash Determine which of these balls is heavier print d minus quotation 1 d minus quotation print d minus quotation 1 d minus quotation comma color1 print d minus quotation 1 d minus quotation comma color1 difference1 equal read input print d minus quotation 1 d minus quotation print d minus quotation 1 d minus quotation comma color2 print d minus quotation 1 d minus quotation comma color2 difference2 equal read input if difference1 rightangle 0 colon heavier_color equal color1 else colon heavier_color equal color2 break print d minus quotation 2 d minus quotation print heavier_color
1,hash Read T comma N comma and H T comma N comma H equal map leftround int comma input leftround rightround period split leftround rightround rightround hash Iterate T times for _ in range leftround T rightround colon hash Print 1 to use the scales print leftround d minus quotation 1 d minus quotation rightround hash Compare the weights of two balls of color 1 against two balls of color 2 print leftround d minus quotation 2 1 2 d minus quotation rightround print leftround d minus quotation 2 1 2 d minus quotation rightround difference equal int leftround input leftround rightround rightround hash If the difference in weight is not zero comma then we know that the heavier balls are either color 1 or color 2 if difference exclamation equal 0 colon print leftround d minus quotation 2 d minus quotation rightround print leftround 1 if difference rightangle 0 else 2 rightround break hash Compare the weights of two balls of color 3 against two balls of color 4 print leftround d minus quotation 2 3 4 d minus quotation rightround print leftround d minus quotation 2 3 4 d minus quotation rightround difference equal int leftround input leftround rightround rightround hash If the difference in weight is not zero comma then we know that the heavier balls are either color 3 or color 4 if difference exclamation equal 0 colon print leftround d minus quotation 2 d minus quotation rightround print leftround 3 if difference rightangle 0 else 4 rightround break hash If the difference in weight is still zero after comparing the weights of the balls of color 3 and 4 comma hash then we know that the heavier balls must be color 5 print leftround d minus quotation 2 d minus quotation rightround print leftround 5 rightround
1,T equal int leftround input leftround rightround rightround hash number of test cases for _ in range leftround T rightround colon N comma M comma Z comma L comma R comma B equal map leftround int comma input leftround rightround period split leftround rightround rightround hash Calculate the number of people that can attend the show people equal 0 hash First comma we will try to fill the rows with B people comma as they need both armrests people plus equal B hash Then comma we will try to fill the rows with L and R people comma as they only need one armrest hash We need to make sure that there are enough seats available for them available_seats equal N asterisk M minus people if available_seats rightangle equal L plus R colon people plus equal L plus R else colon people plus equal available_seats hash Finally comma we will try to fill the remaining seats with Z people comma as they don s minus quotation t need any armrest available_seats equal N asterisk M minus people people plus equal min leftround available_seats comma Z rightround hash Print the result print leftround people rightround
1,function solve leftround rightround colon T equal read input for i equal 1 to T colon N equal read input if is_prime_power leftround N rightround colon print d minus quotation Chef d minus quotation else colon print d minus quotation Misha d minus quotation function is_prime_power leftround N rightround colon for p in prime_numbers colon x equal 0 while N percent p equal equal 0 colon N slash equal p x plus equal 1 if x rightangle 0 colon return x rightangle 1 return False
1,hash Read the number of test cases t equal int leftround input leftround rightround rightround hash Process each test case for _ in range leftround t rightround colon hash Read the colors of the six sides colors equal input leftround rightround period split leftround rightround hash Check if there are three consecutive elements with the same color for i in range leftround 4 rightround colon if colors leftsquare i rightsquare equal equal colors leftsquare i plus 1 rightsquare and colors leftsquare i plus 1 rightsquare equal equal colors leftsquare i plus 2 rightsquare colon print leftround d minus quotation YES d minus quotation rightround break else colon print leftround d minus quotation NO d minus quotation rightround
1,for each test case colon sort the piles in decreasing order of the number of stones total_stones equal 0 while there are still piles colon remove the first pile and add the number of stones to total_stones print total_stones
1,MOD equal 10 asterisk asterisk 9 plus 7 def solve leftround n comma k comma a rightround colon hash Count the number of positive comma negative comma and zero elements in the array pos equal neg equal zero equal 0 for x in a colon if x rightangle 0 colon pos plus equal 1 elif x leftangle 0 colon neg plus equal 1 else colon zero plus equal 1 hash If K is even comma we can always obtain the original array if k percent 2 equal equal 0 colon return 1 hash If there are zero elements comma we can obtain only one array if zero rightangle 0 colon return 1 hash If there are an odd number of negative elements comma we can obtain two arrays if neg percent 2 equal equal 1 colon return 2 hash Otherwise comma we can obtain only one array return 1 hash Read the input and call the solve function for each test case t equal int leftround input leftround rightround rightround for _ in range leftround t rightround colon n comma k equal map leftround int comma input leftround rightround period split leftround rightround rightround a equal list leftround map leftround int comma input leftround rightround period split leftround rightround rightround rightround print leftround solve leftround n comma k comma a rightround percent MOD rightround
1,def count_subarrays leftround n comma a rightround colon hash Initialize the result to 0 result equal 0 hash Loop through the array and consider each element as the starting point of a subarray for i in range leftround n rightround colon hash Initialize the sum and product for the current subarray to the value of the element at the starting point curr_sum equal a leftsquare i rightsquare curr_prod equal a leftsquare i rightsquare hash Loop through the rest of the array comma starting from the next element after the starting point of the current subarray for j in range leftround i plus 1 comma n rightround colon hash Update the sum and product by adding the value of the current element curr_sum plus equal a leftsquare j rightsquare curr_prod asterisk equal a leftsquare j rightsquare hash If the sum and product are equal comma increment the result if curr_sum equal equal curr_prod colon result plus equal 1 hash Return the result return result hash Test the function with the example from the prompt print leftround count_subarrays leftround 3 comma leftsquare 1 comma 3 comma 2 rightsquare rightround rightround hash Expected output colon 4 print leftround count_subarrays leftround 4 comma leftsquare 4 comma 1 comma 2 comma 1 rightsquare rightround rightround hash Expected output colon 5 print leftround count_subarrays leftround 6 comma leftsquare 1 comma 2 comma 2 comma 2 comma 2 comma 1 rightsquare rightround rightround hash Expected output colon 9
1,def is_prime leftround n rightround colon hash Return True if n is a prime number comma and False otherwise if n leftangle equal 1 colon return False for i in range leftround 2 comma int leftround n asterisk asterisk 0 period 5 rightround plus 1 rightround colon if n percent i equal equal 0 colon return False return True def solve leftround n comma a rightround colon hash Return the minimum number of operations needed to make all numbers in the array a equal to 1 hash Initialize the number of operations to 0 operations equal 0 hash Iterate over the elements of the array for x in a colon hash Divide x by all the prime divisors until it becomes 1 while x exclamation equal 1 colon for p in range leftround 2 comma x plus 1 rightround colon if is_prime leftround p rightround and x percent p equal equal 0 colon x slash equal p operations plus equal 1 return operations hash Read the input T equal int leftround input leftround rightround rightround for _ in range leftround T rightround colon n equal int leftround input leftround rightround rightround a equal list leftround map leftround int comma input leftround rightround period split leftround rightround rightround rightround hash Print the solution for this test case print leftround solve leftround n comma a rightround rightround
1,hash Read input n comma m comma p equal map leftround int comma input leftround rightround period split leftround rightround rightround hash Initialize matrix matrix equal leftsquare leftsquare j for j in range leftround 1 comma m plus 1 rightround rightsquare for i in range leftround n rightround rightsquare hash Process increasing commands for _ in range leftround p rightround colon i comma j equal map leftround int comma input leftround rightround period split leftround rightround rightround matrix leftsquare i minus 1 rightsquare leftsquare j minus 1 rightsquare plus equal 1 hash Calculate answers for each row for row in matrix colon cost equal 0 for i in range leftround m minus 1 comma 0 comma minus 1 rightround colon if row leftsquare i minus 1 rightsquare rightangle row leftsquare i rightsquare colon print leftround minus 1 rightround break cost plus equal row leftsquare i rightsquare minus row leftsquare i minus 1 rightsquare else colon print leftround cost rightround
1,def solve leftround a comma b comma c comma d rightround colon hash Check if a colon b equal c colon d if a asterisk d equal equal b asterisk c colon return d minus quotation Possible d minus quotation hash Check if a colon c equal b colon d elif a asterisk d equal equal b asterisk c colon return d minus quotation Possible d minus quotation hash Check if a colon d equal b colon c elif a asterisk c equal equal b asterisk d colon return d minus quotation Possible d minus quotation else colon return d minus quotation Impossible d minus quotation hash Read the input a comma b comma c comma d equal map leftround int comma input leftround rightround period split leftround rightround rightround hash Print the solution print leftround solve leftround a comma b comma c comma d rightround rightround
1,hash Read the number of test cases t equal int leftround input leftround rightround rightround hash Iterate through each test case for _ in range leftround t rightround colon hash Read the string s equal input leftround rightround hash Initialize the counter to 0 counter equal 0 hash Iterate through the string for i in range leftround 1 comma len leftround s rightround rightround colon hash Check if the current character is different from the previous one if s leftsquare i rightsquare exclamation equal s leftsquare i minus 1 rightsquare colon hash Increment the counter counter plus equal 1 hash Print the result print leftround counter rightround
1,def gcd leftround a comma b rightround colon hash Return the greatest common divisor of a and b using the Euclidean algorithm if a equal equal 0 colon return b return gcd leftround b percent a comma a rightround def is_closed_set leftround A rightround colon hash Return True if the set A is closed under the gcd operation comma and False otherwise for i in range leftround len leftround A rightround rightround colon for j in range leftround i plus 1 comma len leftround A rightround rightround colon if gcd leftround A leftsquare i rightsquare comma A leftsquare j rightsquare rightround not in A colon return False return True def solve leftround N comma K comma L comma A rightround colon hash Return the number of ways to add K elements in the range leftsquare 1 comma L rightsquare to the array A such that the resulting array is closed under the gcd operation if is_closed_set leftround A rightround colon hash The array A is already closed under the gcd operation comma so we just need to count the number of ways to add K elements in the range leftsquare 1 comma L rightsquare return pow leftround L comma K comma 1000000007 rightround else colon hash The array A is not closed under the gcd operation comma so we need to add at least one element that makes the array closed ways equal 0 hash Try adding each element in the range leftsquare 1 comma L rightsquare for i in range leftround 1 comma L plus 1 rightround colon if gcd leftround A leftsquare 0 rightsquare comma i rightround in A colon hash Adding i makes the array closed comma so count the number of ways to add the remaining K minus 1 elements ways plus equal solve leftround N comma K minus 1 comma L comma A plus leftsquare i rightsquare rightround ways percent equal 1000000007 return ways hash Read the input T equal int leftround input leftround rightround rightround for _ in range leftround T rightround colon N comma K comma L equal map leftround int comma input leftround rightround period split leftround rightround rightround A equal list leftround map leftround int comma input leftround rightround period split leftround rightround rightround rightround hash Print the solution for this test case print leftround solve leftround N comma K comma L comma A rightround rightround
1,hash Get the number of test cases t equal int leftround input leftround rightround rightround hash Iterate through the test cases for _ in range leftround t rightround colon hash Get the number of nodes n equal int leftround input leftround rightround rightround hash Get the list of edge costs edge_costs equal list leftround map leftround int comma input leftround rightround period split leftround rightround rightround rightround hash Get the start and end nodes start comma end equal map leftround int comma input leftround rightround period split leftround rightround rightround hash Initialize the total cost and the number of times we have traversed each edge total_cost equal 0 edge_counts equal leftsquare 0 rightsquare asterisk n hash Set the current node to the start node current_node equal start hash Keep looping until we reach the end node while current_node exclamation equal end colon hash Get the next node next_node equal leftround current_node percent n rightround plus 1 hash Get the cost of the edge between the current node and the next node cost equal edge_costs leftsquare current_node minus 1 rightsquare hash Increment the count of the number of times we have traversed the edge edge_counts leftsquare current_node minus 1 rightsquare plus equal 1 hash If we have traversed the edge more than twice comma skip it if edge_counts leftsquare current_node minus 1 rightsquare rightangle 2 colon current_node equal next_node continue hash Add the cost to the total cost total_cost plus equal cost hash Set the current node to the next node current_node equal next_node hash Print the total cost print leftround total_cost rightround
1,hash Initialize the array with the given values n equal int leftround input leftround rightround rightround arr equal list leftround map leftround int comma input leftround rightround period split leftround rightround rightround rightround hash Process the queries m equal int leftround input leftround rightround rightround for i in range leftround m rightround colon query equal list leftround map leftround int comma input leftround rightround period split leftround rightround rightround rightround if query leftsquare 0 rightsquare equal equal 1 colon hash Divide the numbers in the given range by the given value for j in range leftround query leftsquare 1 rightsquare minus 1 comma query leftsquare 2 rightsquare rightround colon if arr leftsquare j rightsquare percent query leftsquare 3 rightsquare equal equal 0 colon arr leftsquare j rightsquare slash slash equal query leftsquare 3 rightsquare else colon hash Modify the value at the given index arr leftsquare query leftsquare 1 rightsquare minus 1 rightsquare equal query leftsquare 2 rightsquare hash Print the final array print leftround d minus quotation d minus quotation period join leftround str leftround x rightround for x in arr rightround rightround
1,hash Read the input n equal int leftround input leftround rightround rightround relationships equal list leftround map leftround int comma input leftround rightround period split leftround rightround rightround rightround hash Create a list to store the potential killers potential_killers equal leftsquare rightsquare hash Iterate through the list of relationships for i comma r in enumerate leftround relationships rightround colon hash If the current member has no reports comma add their index to the list if r equal equal 0 colon potential_killers period append leftround i plus 1 rightround hash Sort the list of potential killers potential_killers period sort leftround rightround hash Print the list of potential killers print leftround d minus quotation d minus quotation period join leftround str leftround x rightround for x in potential_killers rightround rightround
1,hash Read the input n equal int leftround input leftround rightround rightround a equal list leftround map leftround int comma input leftround rightround period split leftround rightround rightround rightround hash Initialize the result result equal 0 hash For each element in the array for i in range leftround n rightround colon hash Initialize the count for this element count equal 1 hash Check how many times this element appears in the array for j in range leftround i plus 1 comma n rightround colon if a leftsquare j rightsquare equal equal a leftsquare i rightsquare colon count plus equal 1 hash If the count is greater than half the size of the array comma hash add the number of subarrays starting at this position to the result if count rightangle n slash slash 2 colon result plus equal leftround n minus i rightround hash Print the result print leftround result rightround
1,def find_min_distance leftround n comma electricity comma coordinates rightround colon hash Initialize minimum distance to be the maximum possible value min_distance equal float leftround d minus quotation inf d minus quotation rightround hash Initialize the last village with electricity to be minus 1 last_electricity equal minus 1 hash Loop through the villages for i in range leftround n rightround colon hash If the current village has electricity if electricity leftsquare i rightsquare equal equal s minus quotation 1 s minus quotation colon hash Update the last village with electricity last_electricity equal coordinates leftsquare i rightsquare hash If the current village does not have electricity else colon hash Calculate the distance between the current village and the last village with electricity distance equal coordinates leftsquare i rightsquare minus last_electricity hash Update the minimum distance if necessary min_distance equal min leftround min_distance comma distance rightround hash Return the minimum distance return min_distance hash Read the number of test cases t equal int leftround input leftround rightround rightround hash Loop through the test cases for _ in range leftround t rightround colon hash Read the number of villages and the electricity array n equal int leftround input leftround rightround rightround electricity equal input leftround rightround hash Read the coordinates of the villages coordinates equal list leftround map leftround int comma input leftround rightround period split leftround rightround rightround rightround hash Find the minimum distance min_distance equal find_min_distance leftround n comma electricity comma coordinates rightround hash Print the minimum distance print leftround min_distance rightround
