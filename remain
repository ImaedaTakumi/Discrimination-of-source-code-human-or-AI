000
000000
01
010
04
10
100
1000
10000
100000
100000000000
1000000007
1000000009
100000001
100003
1001
101
1010
103
1033
103993
107
109
11
1111
1129
113
117355367786585
11929
11lf
12
120
12127108524504811121752257
1240971177
125
127
13
131
137
137845
139
149
15
15000
151
154999
157
1592731
16
161
163
164601109918978615
167
17
17009324474195992258878836533
173
179
18
181
19
191
193
197
199
1e
1e9
1s
20
2000
200000
2015
21
211
2229283
223
2234126207
227
229
23
2300000
2300001
230867373009598884627
233
239
2391
241
25
251
25815151595
263
27
27152
278
28
2867739
29
2d
2f
30
31
3133560234217
317
32
323811570588787197424201
33102
3386
355981
36
360
37
38077
39
3905
396016
3mil
4000000
4000001
41
410368
42563
43
4395090865370635
454173891617617632766031151
47
499260
500008
500009
50009
50702
53
531169
537016650729
59
59655167
61
6164497208894901477
6203
622
662
6631
67
69
6f
70276
71
73
747474747
751787
784688995215311
79
790
83
83670667271
8646243499452479433569
89
90
97
99
99999
99999999
999999999999999
999999999999999999999
99999999999999999999999
__
__author__
__class__
__dict__
__eq__
__future__
__hash__
__init__
__iter__
__main__
__name__
__ne__
__repr__
_sum
a0
a1
a_
a_i
a_is_special
a_n
ab
abdc
about
above
abs
according
action
actions
add
add_edge
add_node
added
adding
additional
adityandmagic
after
again
against
ai
aleksa
algorithm
aling
alings
all
all_items
allowed
already
also
alternating
always
am
amount
ampersand
amr15a
an
ancestor
and
ans
ans1
ans2
answer
answers
any
appears
append
appended
appending
apples
approach
are
area
args
argv
arithmetic
armrest
armrests
arr
arr1
arr2
array
arrays
arrayssum
as
ascending
ascii_lowercase
asking
assert
assign
assuming
assumption
asterisk
at
atoms
attack
attend
attendance
author
available
available_seats
average
average_length
avg
b1
b_i
b_is_special
ba
bacb
back_index_iter
balance
ball
balls
banknotes
barricades
base
based
basicconfig
battle
bbsystem
be
beats
beatsline
beauty
beautyof
because
become
becomes
been
begin
beginning
below
best
best_j
best_score
best_spot
between
bi
big
bin
binary_search_prime
binint
binomialcoeff
binomialcoeff_m
bit
bitmap
bits
block
blocks
book
books
bool
both
both_seats
bottom
bound
bounds
bouquet
boy
breadth
break
breakして次のステップに進む
bring
budget
buf
bugs
build
build_monster_dist_map
build_neighbour_list
build_tree
but
bwbw
by
byteland
cache
cakedoom
calculate
calculated
call
called
can
can_make_equal_pieces
can_make_pieces
can_make_unequal_pieces
can_read
candies
cannot
caramel
card
cards
cars
case
cases
cc
ceil
cell
center
chances
change
changed
changing
character
characters
check
check_coolness
checked
checking
chef
chef_money
chef_monster_dist
chef_pos
chefs
child
children
chocolate
choices
choose
choose_random_integer
choose_random_integers
cin
cities
city
claim
clan
clan_index
clans
class
classes
clip
closed
cnt
cnt1
cnt2
co
code
codechef
coding
coins
col_indices
col_toggles
colleague_money
collections
colon
color
color1
color2
colors
colour
column
columns
com
combination
combinations
comes
coming
comma
commands
common
common_ancestor
comp
compare
comparing
complex_level
composite
compute
computed
conditions
configs
configurations
connect
connecting
connections
consecutive
consider
console
const
contain
containing
contains
continue
conversion
convert
cook
coordinate
coordinates
copy
copy_nodes
corners
correct
cost
costs
count
count_1
count_2
count_and_tuples
count_lies
count_monsters
count_pairs
count_subarrays
counter
countgreater
counting
countlesser
countries
cout
covered
covered_items
cpc
cprofile
create
created
cstringio
cubes
cubes_needed
curlevel
curnum
curr
curr_a
curr_b
curr_prod
curr_sum
current
current_node
current_weight
cyc
d0
d1
d2
d_inverse
data
date
datetime
daunting
day
days
debug
deck
deconstruct
decreasing
deepcopy
deeper
def
defaultdict
define
del
delete
denominator
depth
depths
deque
descending
description
desired
destination
destroy
determine
development
dfs
dic
dict
dictionary
diff
difference
difference1
difference2
different
digit
dijsktra
dim
dimension_points
dimensions
directly
dirr
dis
discyc
dish
dish_index
dishes
dist
dist_map_level
distance
distance_form
distances
distans
divcount
divide
divides
divisible
division
divisions
divisor
divisors
divlist
divmod
dmap
do
does
doing
domore
don
donesofar
down
downto
dp
draw
driven
each
eat
edge
edge_costs
edge_counts
edges
efficient
efficiently
either
ele
electricity
elem
element
elements
elif
else
em
empty
end
end_index
endl
enough
enter
enumerate
env
eq
equal
equivalence
erastothenes
est
estimate
euclidean
euler_phi
eval
evaluate
evaluated
even
even_count
every
exactly
examining
example
examples
except
exclamation
exercise
exercises
exist
exists
exit
expansion
expantion
expect
expected
expected_value
extend
extract
extras
f_values
face
fact
facto
factorial
factorizations
factors
fail
false
far
fast_exp
fast_pow
fastest
favs
fdpt
fi
fib_int
fib_str
fibonacci
figure
figuring
filein
filell
filename
fill
filter
final
final_counter
finalans
finally
find
find_depth
find_lca
find_level
find_longest_non_regular_subsequence
find_min_atoms
find_min_distance
find_non_arithmetic_sequence
find_operations
findheavierballs
first
first_iter_int
first_k_digits
flag
float
floor
floorboard
flush
fn
following
foo
for
form
format
format_time
formats
formatted
fort
forts
found
fraction
fractions
freezes
frequencies
friends
from
from_node
fromd
fromtimestamp
frontier
full
function
functions
game_value
gcd
gcd_lst
gen_facts
generate
generate_password
get
get_graph
get_min_est
get_neighbours
gift
girl
given
global
go
goes
going
goods
graph
greater
greater_than_a
greatest
grid
group
guess
guesses
had
half
harry
has
has_key
hash
hat
have
having
heap
heappop
heappush
heapq
heavier
heavier_color
heavier_colour
height
heights
helps
here
heuristics
hierarchy
high
highest
hint
hints
hits
holding
hour
how
https
i0
i1
i10
i11
i12
i2
i3
i4
i5
i6
i7
i8
i9
iarray
idx
if
ii
import
impossible
in
include
increase_by_one
increasing
increment
indeed
index
index_iter
indices
indicies
indx
inf
infinity
info
ini
init_monster_dist_map
initial
initialize
inn
inp
inpt
input
input_dict
input_set
input_str
insert
int
int1
int2
int3
integer
integers
intermediate
intermediate_points
intersect
interval
intervals
into
ints
inv_fact
iostream
is
is_closed_set
is_fibonacci
is_name
is_prime
is_prime_power
is_sorted
is_test_passing
is_valid
isinstance
island
island_graph
island_is
islandpoint
islands
it
item
itemgetter
items
iter
iterable
iterate
iterated
iteritems
iters
itertools
ith
its
itself
j0
jeff
job
johnny
join
jump
junkn
just
k0
k1
k2
keep
key
keyerror
keys
ki
killers
kisses
kissing
kitchen
knight
knight_chances
knights
knoights
know
knows
kwargs
labels
lambda
large
las
last
last_electricity
last_k_digits
lastn
lazy
lc
lc_main
lca
lca_level
lcm
lcm_modulo
le
leading
leaf
least
leaves
left
leftangle
leftcurly
leftmost
leftround
leftsquare
len
length
less
lesser
let
lets
letter
letters
lev1
lev2
level
lexicographical
lexicographically
li
lie
lies
light
lights
like
line
line_intersect
lines
list
list_u
list_v
lists
ll
llow
log
logging
logic
logical
logical_value
long
longest_alternating_subarray
loop
looping
low
lower
lower_bound
lr
lst1
lst2
lst3
lst4
lucky
lup
m1
m2
magic
magusverma
mahasena
main
make
makes
many
map
mapping
marks
mask
mass
match
math
matrix
matrix_mult
matrix_mult_1
matrix_mult_4
matrix_mult_5
matrix_mult_6
max
max_a
max_attendance
max_diff_level
max_distance
max_jump
max_k
max_len
max_memory
max_ways
maximal_nice_bouquet
maximize_hamming_distance
maximum
maximum_balance
maximum_sweets
maxused
maxx
mean
means
measurements
member
members
memory
met
mg
microcontroller
microcontroller_freeze
mid
midpoint
milliseconds
min
min_candies
min_cost
min_distance
min_division
min_est_cache
min_height
min_monster_dist
min_node
min_node_id
min_time
minimal_cost
minimal_penalty
minimize
minimum
minimum_cost
minimum_score
minimum_steps_to_unify
minn
minus
minute
misha
mississippi
mn
mod
mod1
mod_inverse
modifications
modify
modpow
modulo
moduloinverse
modulus
money
monsters
more
most
move
moves
mr
multi
multiple
munged
must
mx
my
mylist
n1
n2
n3
n4
n5
n_child
n_level
n_tests
n_u_v
name
namespace
nb
nbl
nc
ncr
ndiv
ne
necessary
need
needed
neg
negate
negative
neighbor
neighbors
neighbours
neither
new
new_values
newd
newr
newwich
next
next_dist_set
next_node
ng
ngh
ni
nk
nm
no
no_of_guesses
no_of_inputs
no_of_lies
no_of_ones
noc
nocases
node
node1
node2
node_id
nodes
nodes_checked
nodes_insert
nold
nom
non
none
none_seats
nor
nos
not
note
notes
noting
now
np
nr
num
num_cases
num_connections
num_islands
num_ops
num_pizza
num_ports
num_rect
num_street
num_words
number
numbers
numerator
numpy
nums
nums1
nx
nとkを読み込む
nのk桁を表す数字を計算する
nの最初のk桁を計算する
nの最後のk桁を計算する
object
observations
obtain
oct
odd
odd_count
of
off
offline
og
on
onbl
once
one
one_seats
only
open
operation
operations
operator
opposite
optimal
optimistic
or
order
ordinates
original
other
otherresult
otherwise
our
out
outbuf
output
output_str
over
overkill
oy
p0
p1
p2
p_values
pages
pairs
palindrome
pan
pan1
pan2
pans
parameters
parent
parse
parts
pass
passage
password
path
paths
pdb
people
per_l
percent
perform
period
permutation
permutations
permute
pfac
pg
phi
pile
piles
pipe
piss
pk
planned_parties
play
plus
pm
point
point_places
pointers
points
pool
pop
popularity
port
ports
pos
pos_i
pos_j
position
positions
positive
poslist
possibilities
possible
posts
potential
potential_killers
pow
power
power_m
powers
pq
pr
precompute_limit
presses
prev
prev_h
prev_m
preva
prevg
previous
price
prime
prime_numbers
primelist
primes
primes_length
print
print_map
priority
probabilities
probability
problem
problems
process
processed
prod
product
product_modulo
products
prompt
psyco
pt_name
pt_x
pt_y
py
pysco
python
python2
qlist
quantity
queries
query
query1
query2
query3
query4
question
queue
quick
quotation
raise
randint
random
randomly
range
ranked
raw_input
rdline
re
reach
reached
reaching
read
read_input
read_map
read_test
readline
readlines
readprob
ready
really
reasonable
rect
rect_intersect
rectangle
rectangles
rectd
rects
recurrence
recursion
recursively
reduce
reduced
refined
regex
regular
relate
relationships
rem_1
rem_2
remaining
removal_count
remove
removed
removes
repeated
replace
reports
represent
represents
required
requirements
res
residual
rest
result
resulting
results
ret
return
returns
reversal
reverse
reversed
right
rightangle
rightcurly
rightmost
rightround
rightsquare
road
roads
robert
root
round
rounds
row
row_indices
row_toggles
rows
rstrip
ru
run
run_test
runs
s1
s_list
s_values
same
sandwich
sasha
sat
say
scales
scaling
scanned
scanning
score
scores
se
searched
seats
sec
second
second_iter_int
see
seems
seen
select
selected
self
semicolon
sensor
sensors
sequence
set
set1
sets
shallower
shared
shorter
shortest
shortest_average_length
shortest_path
should
shouted
show
shuffle
shuffled
shuffles
shuffles_needed
shuffling
side
sides
sieve
sieve_n
sign
similar
similarly
simply
simulate
since
six
sizable
size
size_d
skip
sl
slash
slightly
small
smaller
smallest
smallest_subsequence
so
sol
soldier
soldiers
solution
solve
solve2
solve3
solve_1
solve_2
solve_3
solve_4
solve_5
solve_6
solve_cake
solve_lights_problem
solve_mismatch
solve_probability_problem
solved
solver
some
something
sort
sort_posts
sorted
source
sp
special
special_friends
specified
split
splitlines
spoon
spoon_pos
sqrt
square
ss
ssissi
stack
start
start_index
starting
statement
std
stdin
stdout
step
steps
still
stones
stop
stopiteration
store
stored
stores
storing
str
straight
streets
strength_oneside
strictly
string
string1
string2
string3
stringio
strings
strip
strpk
structure
su
sub_lst
subarray
subarrays
subsequence
subsequences
subset
subsets
substring
subtract
success
such
sum
sum1
sum2
sum_count
sum_of_digits
sumar
sure
sw
sweets
switch
sys
t1
t2
take
taken_count
takes
taking
tc
tdd
teddy
tell
temp
templist
terms
test
test_
test_case
test_cases
test_input
testprint
tests
than
that
the
their
them
then
there
these
theseprimes
they
thief
this
three
through
tiles
time
times
timestamp
tmp
to
to_node
todo
told
tolerable
top
top_a
top_b
top_c
tot
total
total_area
total_cost
total_cubes
total_stones
totalp
totlines
town
tp
tpi
tpt
tq
track
tracy
trap
trap_bugs
traveled
traversed
tree
tree_count
trees
tresult
true
try
trying
ts
tt
tuple
tuples
turn
turned
twice
two
type
types
t個のテストケースを処理する
u_level
uc_main
under
unlucky
until
up
update
upper
upper_bound
ur
us
use
used
using
usr
utf
v_level
val
valid
value
value_string
valueerror
values
variable
variables
village
villages
vis
visited
visiting
wants
way
ways
ways_to_place
wbbb
wbwb
we
weapons
weigh
weight
weights
whatever
when
where
whether
which
while
whiteboard
wi
width
will
win
winning
with
without
wlow
word
words
work
worst_spot
wrapper
write
write_output
wt
wup
www
x0
x00
x01
x1
x10
x11
x2
x3
x_cost
xd
xor
xp
xpi
xrange
xs
xx
xyz
y0
y00
y01
y1
y10
y11
y2
y3
yd
yes
yield
yielder
yolist
your
ys
zero
zeros
zfill
zip
zombie
zombies
それらを統一する
ピザパーラーをすべて確認する
前のピザパーラーの結果をxorで計算する
各市が属する国を示すリスト
各市が属する国を統一することができる市を見つける
国を統一するために必要なステップ数
最初のk桁と最後のk桁を出力する
最終的な答えを保存する変数
統一したので
統一する市を見つけた場合は
街のすべての道路を保存するリスト
街のすべての道路を読み込む